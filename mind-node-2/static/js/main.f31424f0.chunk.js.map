{"version":3,"sources":["util/javascript-extension.ts","util/ui.ts","components/RadioButton.tsx","components/Icon.tsx","components/MindNodeCard.tsx","components/MindNodeInfo.tsx","core.ts","constants.ts","tools/Tool.ts","tools/CreateNodeTool.ts","util/mathematics.ts","tools/DragNodeTool.ts","tools/DragPoolTool.ts","tools/SelectTool.ts","tools/AutoTool.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toClassName","obj","arr","key","Object","prototype","hasOwnProperty","call","element","push","join","getRect","ref","box","current","getBoundingClientRect","x","y","width","height","STOP_EVENT","e","stopPropagation","RadioButton","props","className","border","checked","value","onMouseDown","onMouseUp","onClick","onChange","children","Icon","rowSize","size","alt","name","src","style","MindNodeCard","selfRef","React","createRef","this","onRectUpdate","node","uid","position","text","background","color","anchor","anchorX","anchorY","linking","choosen","fixedX","fixedY","left","top","onMouseMove","split","map","it","i","onClickLinkButton","onClickChooseButton","Component","MindNodeInfo","getBrief","nodes","get","state","inputingBackground","inputingColor","inputingText","outPorts","inPorts","toFixed","setBackground","target","setColor","setText","length","setState","onUpdate","createNode","ToolBase","env","CreateNodeTool","mousePosition","pixel2pool","genUid","set","Vec2Util","angle","modulo","Number","isNaN","Math","cos","sin","vs","reduce","p","v","v1","v2","atan2","sqrt","getBezierPointAndAngle","t","controlPoints","cps","nextCPs","p0X","p0Y","p1X","p1Y","finalP0X","finalP0Y","finalP1X","finalP1Y","deltaX","deltaY","finalPoint","finalAngle","DragNodeTool","actived","startMousePosition","startNodePositions","Map","clear","selectedNodeUids","Array","from","values","has","Set","delta","forEach","startPosition","DragPoolTool","startPoolOffset","offset","COMPARATOR","a","b","SelectTool","selectionArea","nativeEvent","a1","a2","index","equalsArray","sort","right","bottom","filter","isNodeInRange","ctrlKey","add","rect","getNodeRect","AutoTool","tool","event","button","shiftKey","onStart","onMove","onEnd","TOOL_FLAGS","TOOL_NAMES","App","mounted","onkey","deleteSelectedNodes","poolRef","canvasRef","hideNodeInfoView","editingNodeUid","nodeCardRects","origin","resetView","canvas","notifyUpdate","dirty","update","updateStateNodes","drawLines","requestAnimationFrame","addNode","linkingNodeUid","onClickNode","getToolEvent","ev","onMouseLeave","load","pool","raw","uidCounter","scale","assign","loadPool","JSON","parse","dataString","alert","save","buildPool","stringify","console","log","setNodeChoosen","delete","unchooseAllNodes","toolFlag","window","addEventListener","setTool","removeEventListener","renderTopBar","getAnchor","setNodeRect","linkNode","renderSelectionArea","renderNodeInfo","renderBottomBar","canvasAndContext","context","getContext","get2dContext","g","clearRect","strokeStyle","fillStyle","lineWidth","fix","getPoolFix","pointCache","getPoint","cachedPoint","point","angleCache","getAngle","NaN","nodePosition","inRelative","inNodeUid","inNode","outRelative","outNodeUid","outNode","sourcePoint","portUid","targetNode","targetPoint","controlHandleLength","sourceAngle","targetAngle","controlPoint1","controlPoint2","centerPoint","centerAngle","beginPath","moveTo","bezierCurveTo","stroke","lineTo","PI","fill","f","bind","disabled","placeholder","editingNode","updateNode","o","s","sa","flag","sourceNode","clientX","clientY","poolCoord","pixelCoord","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f31424f0.chunk.js","sourcesContent":["// 将一个对象转换成className字符串\r\nexport function toClassName(obj: { [key: string]: (boolean | string) }): string {\r\n    const arr: Array<string> = [];\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            const element = obj[key];\r\n            if (typeof element === 'string') {\r\n                arr.push(element);\r\n            } else {\r\n                if (element) {\r\n                    arr.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return arr.join(' ');\r\n}\r\n\r\nexport function getMapValue<K, V>(map: Map<K, V>, key: K, handler: (value: V, key: K) => void) {\r\n    const value = map.get(key);\r\n    if (value) {\r\n        handler(value, key);\r\n    }\r\n}\r\n\r\nexport function filterSet<T>(set: Set<T>, filterFn: (e: T) => boolean): Set<T> {\r\n    const r: T[] = [];\r\n    set.forEach(it => {\r\n        if (filterFn(it)) {\r\n            r.push(it);\r\n        }\r\n    });\r\n    return new Set(r);\r\n}\r\n\r\nexport function equalsArray<T>(a1: Array<T>, a2: Array<T>): boolean {\r\n    if (a1.length !== a2.length) return false;\r\n    for (let index = 0; index < a1.length; index++) {\r\n        if (a1[index] !== a2[index]) return false;\r\n    }\r\n    return true;\r\n}","import { RefObject } from \"react\";\r\nimport { Rect } from \"../interfaces\";\r\nimport { Vec2 } from \"./mathematics\";\r\n\r\nexport function get2dContext(ref: RefObject<HTMLCanvasElement>): [HTMLCanvasElement, CanvasRenderingContext2D] | null {\r\n    const canvas = ref.current;\r\n    if (!canvas) return null;\r\n    const context = canvas.getContext('2d');\r\n    if (!context) return null;\r\n    return [canvas, context];\r\n}\r\n\r\nexport function getRect<T extends HTMLElement>(ref: RefObject<T>): Rect {\r\n    const box = ref.current?.getBoundingClientRect();\r\n    return {\r\n        x: box?.x || 0,\r\n        y: box?.y || 0,\r\n        width: box?.width || 0,\r\n        height: box?.height || 0,\r\n    };\r\n}\r\n\r\nexport function getPosition(rect?: Rect): Vec2 {\r\n    return [rect?.x || 0, rect?.y || 0];\r\n}","import { MouseEvent, ReactNode } from 'react';\r\nimport '../styles/RadioButton.css';\r\nimport { toClassName } from '../util/javascript-extension';\r\n\r\ninterface RadioButtonProps {\r\n    children?: ReactNode;\r\n    border?: boolean;\r\n    value: boolean;\r\n    onChange: (value: boolean) => void;\r\n}\r\n\r\nconst STOP_EVENT = (e: MouseEvent) => e.stopPropagation();\r\n \r\nfunction RadioButton(props: RadioButtonProps) {\r\n    return (\r\n        <div \r\n            className={ toClassName({ \"RadioButton\": true, border: !!props.border, checked: props.value }) }\r\n            onMouseDown={ STOP_EVENT }\r\n            onMouseUp={ STOP_EVENT }\r\n            onClick={ () => props.onChange(!props.value) }    \r\n        >\r\n            { props.children }\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default RadioButton;","\r\ninterface IconProps {\r\n    name: string;\r\n    size?: number | string;\r\n}\r\n \r\nfunction Icon(props: IconProps) { \r\n    const rowSize = props.size || 'auto';\r\n    const size = typeof rowSize === 'number' ? rowSize + 'px' : rowSize;\r\n    return (\r\n        <img \r\n            alt={ props.name }\r\n            src={ 'icons/' + props.name + '.svg' }\r\n            style={{\r\n                width: size,\r\n                height: size,\r\n            }}\r\n        />\r\n    );\r\n}\r\n \r\nexport default Icon;","import React from \"react\";\r\nimport { Component, MouseEvent, RefObject } from \"react\";\r\nimport { Vec2 } from \"../util/mathematics\";\r\nimport \"../styles/MindNodeCard.css\";\r\nimport { MindNode, Rect } from \"../interfaces\";\r\nimport { toClassName } from \"../util/javascript-extension\";\r\nimport { getRect } from \"../util/ui\";\r\nimport RadioButton from \"./RadioButton\";\r\nimport Icon from \"./Icon\";\r\n\r\ninterface MindNodeCardProps {\r\n    anchor: Vec2;\r\n    node: MindNode;\r\n    linking: boolean;\r\n    choosen: boolean;\r\n    onClick: (e: MouseEvent, uid: number) => void;\r\n    onMouseDown: (e: MouseEvent, uid: number) => void;\r\n    onMouseMove: (e: MouseEvent, uid: number) => void;\r\n    onMouseUp: (e: MouseEvent, uid: number) => void;\r\n    onRectUpdate: (uid: number, rect: Rect) => void;\r\n    onClickLinkButton: (uid: number) => void;\r\n    onClickChooseButton: (uid: number, choosen: boolean) => void;\r\n}\r\n \r\nclass MindNodeCard extends Component<MindNodeCardProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    render() { \r\n        const { \r\n            node: { \r\n                uid,\r\n                position: [x, y], \r\n                text,\r\n                background,\r\n                color,\r\n            }, \r\n            anchor: [anchorX, anchorY], \r\n            linking,\r\n            choosen, \r\n        } = this.props;\r\n\r\n        // 实际的坐标\r\n        const fixedX = x + anchorX;\r\n        const fixedY = y + anchorY;\r\n        \r\n        return (\r\n            <div \r\n                className={ toClassName({ \"MindNodeCard\": true, linking, choosen }) } \r\n                ref={ this.selfRef }\r\n                style={{\r\n                    left: `${fixedX}px`,\r\n                    top: `${fixedY}px`,\r\n                }}\r\n                onClick={ e => this.props.onClick(e, uid) }\r\n                onMouseDown={ e => this.props.onMouseDown(e, uid) }\r\n                onMouseMove={ e => this.props.onMouseMove(e, uid) }\r\n                onMouseUp={ e => this.props.onMouseUp(e, uid) }\r\n            >\r\n                <div className=\"frame\" />\r\n\r\n                <div className=\"static\" style={{ background }}>\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"text\" style={{ color }}>\r\n                            { text.split(\"\\n\").map((it, i) => (<p key={ i }>{ it }</p>)) }\r\n                        </div>\r\n                        \r\n                        <div className=\"tool-bar\">\r\n                            <RadioButton\r\n                                key={ linking ? 11 : 10 }\r\n                                value={ linking }\r\n                                onChange={ () => this.props.onClickLinkButton(uid) }\r\n                            >\r\n                                <Icon name=\"link\" size=\"80%\"/>\r\n                            </RadioButton>\r\n                            \r\n                            <RadioButton\r\n                                key={ choosen ? 1 : 0 }\r\n                                value={ choosen }\r\n                                onChange={ it => this.props.onClickChooseButton(uid, it) }\r\n                            >\r\n                                <Icon name=\"checked\" size=\"80%\"/>\r\n                            </RadioButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //#region 拖拽相关\r\n\r\n    private selfRef: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //#endregion\r\n}\r\n \r\nexport default MindNodeCard;","import { Component } from \"react\";\r\nimport { MindNode } from \"../interfaces\";\r\nimport \"../styles/MindNodeInfo.css\";\r\n\r\ninterface MindNodeInfoProps {\r\n    node: MindNode;\r\n    nodes: Map<number, MindNode>;\r\n    onUpdate: (node: MindNode) => void;\r\n}\r\n\r\ninterface MindNodeInfoState {\r\n    inputingBackground: string;\r\n    inputingColor: string;\r\n    inputingText: string;\r\n}\r\n\r\nclass MindNodeInfo extends Component<MindNodeInfoProps, MindNodeInfoState> {\r\n    constructor(props: MindNodeInfoProps) {\r\n        super(props);\r\n        this.state = {\r\n            inputingBackground: props.node.background,\r\n            inputingColor: props.node.color,\r\n            inputingText: props.node.text,\r\n        };\r\n    }\r\n    render() {\r\n        const { uid, position, outPorts, inPorts } = this.props.node;\r\n        return (\r\n            <div className=\"MindNodeInfo\">\r\n                <div className=\"top-bar\"></div>\r\n\r\n                <div className=\"content\">\r\n                    <p>\r\n                        <span className=\"title\">UID：</span>\r\n                        <span className=\"text\">#{uid}</span>\r\n                    </p>\r\n\r\n                    <p>\r\n                        <span className=\"title\">位置：</span>\r\n                        <span className=\"text\">({position.map(it => it.toFixed(1)).join(\", \")})</span>\r\n                    </p>\r\n\r\n                    <p className=\"field-color\">\r\n                        <span className=\"title\">背景样式：</span>\r\n                        <input\r\n                            className=\"color-input\"\r\n                            value={this.state.inputingBackground}\r\n                            onChange={e => this.setBackground(e.target.value)}\r\n                        />\r\n                        <div className=\"color-input-preview\" style={{ background: this.state.inputingBackground }} />\r\n                    </p>\r\n\r\n                    <p className=\"field-color\">\r\n                        <span className=\"title\">文字样式：</span>\r\n                        <input\r\n                            className=\"color-input\"\r\n                            value={this.state.inputingColor}\r\n                            onChange={e => this.setColor(e.target.value)}\r\n                        />\r\n                        <div className=\"color-input-preview\" style={{ background: this.state.inputingColor }} />\r\n                    </p>\r\n\r\n                    <p>\r\n                        <span className=\"title\">内容：</span>\r\n                        <textarea\r\n                            className=\"text-input\"\r\n                            value={this.state.inputingText}\r\n                            onChange={e => this.setText(e.target.value)}\r\n                        />\r\n                    </p>\r\n\r\n                    <p className=\"title\">出线（{outPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        {outPorts.map(uid => (<li key={uid} className=\"snapshot\">{this.getBrief(uid)}</li>))}\r\n                    </ol>\r\n\r\n                    <p className=\"title\">入线（{inPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        {inPorts.map(uid => (<li key={uid} className=\"snapshot\">{this.getBrief(uid)}</li>))}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setText(text: string) {\r\n        this.setState(() => ({ inputingText: text }));\r\n        const node: MindNode = { ...this.props.node, text };\r\n        this.props.onUpdate(node);\r\n    }\r\n\r\n    setBackground(background: string) {\r\n        this.setState(() => ({ inputingBackground: background }));\r\n        const node: MindNode = { ...this.props.node, background };\r\n        this.props.onUpdate(node);\r\n    }\r\n\r\n    setColor(color: string) {\r\n        this.setState(() => ({ inputingColor: color }));\r\n        const node: MindNode = { ...this.props.node, color };\r\n        this.props.onUpdate(node);\r\n    }\r\n\r\n    getBrief = (uid: number) => {\r\n        const node = this.props.nodes.get(uid);\r\n        if (node) {\r\n            return '#' + uid + '：' + node.text;\r\n        } else {\r\n            return '#' + uid;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MindNodeInfo;","import { MindNode, MindNodePool } from \"./interfaces\";\r\nimport { Vec2 } from \"./util/mathematics\";\r\n\r\nexport interface CreateNodeProps {\r\n    uid: number,\r\n    position: Vec2,\r\n}\r\n\r\nexport function createNode({ uid, position }: CreateNodeProps): MindNode {\r\n    return {\r\n        uid,\r\n        position,\r\n        text: `#${uid}`,\r\n        background: '#223344',\r\n        color: '#ffffff',\r\n        outPorts: [],\r\n        inPorts: [],\r\n    };\r\n}\r\n\r\nexport function loadPool(raw: MindNodePool): MindNodePool {\r\n    const pool: MindNodePool = {\r\n        uidCounter: raw.uidCounter || 0,\r\n        offset: raw.offset || [0, 0],\r\n        scale: raw.scale || 1,\r\n        nodes: raw.nodes ? raw.nodes.map(it => Object.assign(createNode(it), it)) : [],\r\n    };\r\n\r\n    return pool;\r\n}","export const MOUSE_BUTTON_LEFT = 0;\r\nexport const MOUSE_BUTTON_MIDDLE = 1;\r\nexport const MOUSE_BUTTON_RIGHT = 2;","import { MindNode, Rect } from \"../interfaces\";\r\nimport { Vec2 } from \"../util/mathematics\";\r\nimport { MouseEvent } from \"react\";\r\n\r\nexport interface ToolEvent {\r\n    mousePosition: Vec2;\r\n    node: MindNode | null;\r\n    nativeEvent: MouseEvent;\r\n}\r\n\r\nexport interface Tool {\r\n    onStart(event: ToolEvent): void;\r\n    onMove(event: ToolEvent): void;\r\n    onEnd(event: ToolEvent): void;\r\n}\r\n\r\nexport interface ToolEnv {\r\n    offset: Vec2;\r\n    scale: number;\r\n    // MindNode 实例可能会改变，所以在其它位置引用其uid较为妥当\r\n    nodes: Map<number, MindNode>;\r\n    getNodeRect(uid: number): Rect | null;\r\n\r\n    selectedNodeUids: Set<number>;\r\n    selectionArea: Rect | null;\r\n    pixel2pool(vec: Vec2): Vec2;\r\n    genUid(): number;\r\n}\r\n\r\nexport abstract class ToolBase implements Tool {\r\n\r\n    protected env: ToolEnv;\r\n    constructor(env: ToolEnv) {\r\n        this.env = env;\r\n    }\r\n\r\n    abstract onStart(event: ToolEvent): void;\r\n\r\n    abstract onMove(event: ToolEvent): void;\r\n\r\n    abstract onEnd(event: ToolEvent): void;\r\n\r\n}","import { createNode } from \"../core\";\r\nimport { MindNode } from \"../interfaces\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class CreateNodeTool extends ToolBase {\r\n\r\n    onStart(): void { }\r\n\r\n    onMove(): void { }\r\n\r\n    onEnd({ mousePosition }: ToolEvent): void {\r\n        const position = this.env.pixel2pool(mousePosition);\r\n        const uid = this.env.genUid();\r\n        const node: MindNode = createNode({ uid, position });\r\n        this.env.nodes.set(uid, node);\r\n    }\r\n\r\n}","\r\nexport type Vec2 = [number, number];\r\nexport const X = 0;\r\nexport const Y = 1;\r\n\r\nexport function vec2FromAngle(angle: number, modulo: number = 1): Vec2 {\r\n    if (Number.isNaN(angle)) return [0, 0];\r\n    return [Math.cos(angle) * modulo, Math.sin(angle) * modulo]; \r\n}\r\n\r\nexport function vec2Add(...vs: Vec2[]): Vec2 {\r\n    return [vs.reduce((p, v) => p + v[0], 0), vs.reduce((p, v) => p + v[1], 0)];\r\n}\r\n\r\nexport function vec2Minus(v1: Vec2, v2: Vec2): Vec2 {\r\n    return [v1[X] - v2[X], v1[Y] - v2[Y]];\r\n}\r\n\r\nexport function vec2Normalize(v: Vec2): Vec2 {\r\n    if (v[0] === 0 && v[1] === 0) return [0, 0];\r\n    const angle = Math.atan2(v[1], v[0]);\r\n    return [Math.cos(angle), Math.sin(angle)];\r\n}\r\n\r\nexport function vec2Modulo(v: Vec2): number {\r\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\r\n}\r\n\r\nexport function vec2Angle(v: Vec2): number {\r\n    return Math.atan2(v[1], v[0]);\r\n}\r\n\r\nexport function vec2Multiply(v: Vec2, n: number): Vec2 {\r\n    return [v[0] * n, v[1] * n];\r\n}\r\n\r\nexport const Vec2Util =  {\r\n    zero(): Vec2 {\r\n        return [0, 0]; \r\n    },\r\n\r\n    unit(): Vec2 {\r\n        return [1, 1]; \r\n    },\r\n\r\n    of(x: number = 0, y: number = 0): Vec2 {\r\n        return [x, y]; \r\n    },\r\n\r\n    fromAngle(angle: number, modulo: number = 1): Vec2 {\r\n        if (Number.isNaN(angle)) return [0, 0];\r\n        return [Math.cos(angle) * modulo, Math.sin(angle) * modulo]; \r\n    },\r\n\r\n    add(...vs: Vec2[]): Vec2 {\r\n        return [vs.reduce((p, v) => p + v[0], 0), vs.reduce((p, v) => p + v[1], 0)];\r\n    },\r\n\r\n    minus(v1: Vec2, v2: Vec2): Vec2 {\r\n        return [v1[X] - v2[X], v1[Y] - v2[Y]];\r\n    },\r\n    \r\n    normalize(v: Vec2): Vec2 {\r\n        if (v[0] === 0 && v[1] === 0) return [0, 0];\r\n        const angle = Math.atan2(v[1], v[0]);\r\n        return [Math.cos(angle), Math.sin(angle)];\r\n    },\r\n    \r\n    modulo(v: Vec2): number {\r\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\r\n    },\r\n    \r\n    angle(v: Vec2): number {\r\n        return Math.atan2(v[1], v[0]);\r\n    },\r\n    \r\n    multiply(v: Vec2, n: number): Vec2 {\r\n        return [v[0] * n, v[1] * n];\r\n    },\r\n};\r\n\r\n\r\nexport class UidGenerator {\r\n\r\n    public uidCounter: number = 0;\r\n\r\n    constructor(uidCounter: number = 0) {\r\n        this.uidCounter = uidCounter;\r\n    }\r\n\r\n    generate() {\r\n        return this.uidCounter++;\r\n    }\r\n\r\n}\r\n\r\n// return [pointPosition, angle]\r\nexport function getBezierPointAndAngle(t: number, ...controlPoints: Vec2[]): [Vec2, number] {\r\n    if (controlPoints.length <= 1) return [controlPoints[0], 0];\r\n\r\n    let cps: Vec2[] = controlPoints;\r\n    while (cps.length > 2) {\r\n        const nextCPs: Vec2[] = [];\r\n        for (let i = 1; i < cps.length; i++) {\r\n            const [p0X, p0Y] = cps[i - 1];\r\n            const [p1X, p1Y] = cps[i];\r\n            nextCPs.push([p0X + (p1X - p0X) * t, p0Y + (p1Y - p0Y) * t]);\r\n        }\r\n        cps = nextCPs;\r\n    }\r\n    const [finalP0X, finalP0Y] = cps[0];\r\n    const [finalP1X, finalP1Y] = cps[1];\r\n    const deltaX = finalP1X - finalP0X;\r\n    const deltaY = finalP1Y - finalP0Y;\r\n    const finalPoint: Vec2 = [finalP0X + deltaX * t, finalP0Y + deltaY * t];\r\n    const finalAngle = Math.atan2(deltaY, deltaX);\r\n    return [finalPoint, finalAngle];\r\n}","import { Vec2Util, Vec2 } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class DragNodeTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n    private startNodePositions: Map<number, Vec2> = new Map();\r\n\r\n    onStart({ mousePosition, node }: ToolEvent): void {\r\n        this.startNodePositions.clear();\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n\r\n        let selectedNodeUids: Array<number> = Array.from(this.env.selectedNodeUids.values());\r\n        // 如果按下去的节点是被选中的，则改为选择当前节点\r\n        if (node && !this.env.selectedNodeUids.has(node.uid)) { \r\n            selectedNodeUids = [node.uid];\r\n            this.env.selectedNodeUids = new Set(selectedNodeUids);\r\n        }\r\n        // 拖动所有选择节点一起移动\r\n        for (const uid of selectedNodeUids) {\r\n            const node = this.env.nodes.get(uid);\r\n            if (!node) continue;\r\n            this.startNodePositions.set(uid, node.position);\r\n        }\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n        \r\n        \r\n        const delta = Vec2Util.minus(mousePosition, this.startMousePosition);\r\n        this.startNodePositions.forEach((startPosition, uid) => {\r\n            const node = this.env.nodes.get(uid);\r\n            if (!node) return;\r\n            node.position = Vec2Util.add(startPosition, delta);\r\n        });\r\n    }\r\n    \r\n    onEnd(): void {\r\n        if (!this.actived) return;\r\n        \r\n        this.startNodePositions.clear();\r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.actived = false;\r\n    }\r\n\r\n}","import { Vec2Util, Vec2 } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class DragPoolTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startPoolOffset: Vec2 = Vec2Util.zero();\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n\r\n    onStart({ mousePosition }: ToolEvent): void {\r\n        this.startPoolOffset = this.env.offset;\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n        \r\n        this.env.offset = Vec2Util.add(this.startPoolOffset, Vec2Util.minus(mousePosition, this.startMousePosition));\r\n    }\r\n    \r\n    onEnd(): void {\r\n        if (!this.actived) return;\r\n        \r\n        this.startPoolOffset = Vec2Util.zero();\r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.actived = false;\r\n    }\r\n\r\n}","import { MindNode } from \"../interfaces\";\r\nimport { equalsArray } from \"../util/javascript-extension\";\r\nimport { Vec2, Vec2Util, X, Y } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n\r\nconst COMPARATOR = (a: number, b: number) => a - b;\r\n\r\n// 拖动整个节点池\r\nexport class SelectTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n\r\n    onStart({ mousePosition }: ToolEvent): void {\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n\r\n        const [width, height] = Vec2Util.minus(mousePosition, this.startMousePosition);\r\n        this.env.selectionArea = {\r\n            x: this.startMousePosition[X],\r\n            y: this.startMousePosition[Y],\r\n            width,\r\n            height,\r\n        };\r\n    }\r\n    \r\n    onEnd({ mousePosition, node, nativeEvent }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n\r\n        let selectedNodeUids: Array<number> = [];\r\n        if (equalsArray(this.startMousePosition, mousePosition)) { // 没有移动，那么就选中当前这个节点\r\n            if (node) {\r\n                selectedNodeUids = [node.uid];\r\n            }\r\n        } else { // 有移动，那么范围选取\r\n            const [left, right] = [this.startMousePosition[X], mousePosition[X]].sort(COMPARATOR);\r\n            const [top, bottom] = [this.startMousePosition[Y], mousePosition[Y]].sort(COMPARATOR);\r\n            selectedNodeUids = Array.from(this.env.nodes.values())\r\n                .filter(node => this.isNodeInRange(node, left, right, top, bottom))\r\n                .map(node => node.uid);\r\n        }\r\n\r\n        if (nativeEvent.ctrlKey) {\r\n            selectedNodeUids.forEach(it => this.env.selectedNodeUids.add(it));\r\n        } else {\r\n            this.env.selectedNodeUids = new Set(selectedNodeUids);\r\n        }\r\n        \r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.env.selectionArea = null;\r\n        this.actived = false;\r\n    }\r\n\r\n    isNodeInRange(node: MindNode, left: number, right: number, top: number, bottom: number) {\r\n        const rect = this.env.getNodeRect(node.uid);\r\n        if (!rect) return false;\r\n        const { x, y, width, height } = rect;\r\n        return (x >= left && y >= top && x + width < right && y + height < bottom);\r\n    }\r\n\r\n}","import { MOUSE_BUTTON_MIDDLE } from \"../constants\";\r\nimport { CreateNodeTool } from \"./CreateNodeTool\";\r\nimport { DragNodeTool } from \"./DragNodeTool\";\r\nimport { DragPoolTool } from \"./DragPoolTool\";\r\nimport { SelectTool } from \"./SelectTool\";\r\nimport { Tool, ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class AutoTool extends ToolBase {\r\n\r\n    private tool: Tool | null = null;\r\n\r\n    onStart(event: ToolEvent): void {\r\n        const { node, nativeEvent } = event;\r\n        if (nativeEvent.button === MOUSE_BUTTON_MIDDLE) {\r\n            this.tool = new DragPoolTool(this.env);\r\n        } else if (nativeEvent.ctrlKey) {\r\n            this.tool = new SelectTool(this.env);\r\n        } else if (nativeEvent.shiftKey) {\r\n            this.tool = new CreateNodeTool(this.env);\r\n        } else if (node) {\r\n            this.tool = new DragNodeTool(this.env);\r\n        } else {\r\n            this.tool = new SelectTool(this.env);\r\n        }\r\n        this.tool.onStart(event);\r\n    }\r\n\r\n    onMove(event: ToolEvent): void {\r\n        this.tool?.onMove(event);\r\n    }\r\n    \r\n    onEnd(event: ToolEvent): void {\r\n        this.tool?.onEnd(event);\r\n    }\r\n\r\n}","import React, { Component, MouseEvent, RefObject } from 'react';\r\nimport './App.css';\r\nimport MindNodeCard from './components/MindNodeCard';\r\nimport MindNodeInfo from './components/MindNodeInfo';\r\nimport { createNode, loadPool } from './core';\r\nimport { MindNode, MindNodePool, Rect } from './interfaces';\r\nimport { AutoTool } from './tools/AutoTool';\r\nimport { CreateNodeTool } from './tools/CreateNodeTool';\r\nimport { DragNodeTool } from './tools/DragNodeTool';\r\nimport { DragPoolTool } from './tools/DragPoolTool';\r\nimport { SelectTool } from './tools/SelectTool';\r\nimport { Tool, ToolEnv, ToolEvent } from './tools/Tool';\r\nimport { getBezierPointAndAngle, Vec2Util, Vec2 } from './util/mathematics';\r\nimport { get2dContext, getPosition, getRect } from './util/ui';\r\n\r\ntype ToolFlag = 'createNode' | 'dragNode' | 'dragPool' | 'select' | 'auto';\r\n\r\nconst TOOL_FLAGS: ToolFlag[] = ['createNode', 'dragNode', 'dragPool', 'select', 'auto'];\r\nconst TOOL_NAMES = {\r\n    'createNode': \"增加\",\r\n    'dragNode': \"移动\",\r\n    'dragPool': \"拖动\",\r\n    'select': \"选择\",\r\n    'auto': \"自动\",\r\n};\r\n\r\nexport interface AppProps {\r\n\r\n}\r\n\r\nexport interface AppState {\r\n    uidCounter: number;\r\n    nodes: Array<MindNode>;\r\n    offset: Vec2;\r\n    scale: number;\r\n    editingNodeUid: number | null;\r\n    toolFlag: ToolFlag | null;\r\n    selectionArea: Rect | null;\r\n    dataString: string;\r\n}\r\n\r\n\r\nclass App extends Component<AppProps, AppState> implements ToolEnv {\r\n\r\n    constructor(props: AppProps) {\r\n        super(props);\r\n        this.state = {\r\n            uidCounter: 0,\r\n            nodes: [],\r\n            offset: [0, 0],\r\n            scale: 1,\r\n            editingNodeUid: null,\r\n            toolFlag: null,\r\n            selectionArea: null,\r\n            dataString: '',\r\n        };\r\n    }\r\n\r\n    private mounted = false;\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n        this.updateStateNodes();\r\n        this.drawLines();\r\n        window.addEventListener('resize', this.resetView);\r\n        window.addEventListener('keyup', this.onkey);\r\n        this.resetView();\r\n        this.setTool('auto');\r\n        requestAnimationFrame(this.update);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.resetView);\r\n        window.removeEventListener('keyup', this.onkey);\r\n        this.mounted = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\" >\r\n                {/* 顶部工具栏 */}\r\n                {this.renderTopBar()}\r\n\r\n                {/* 实际池子 */}\r\n                <div\r\n                    className={\"node-pool\"}\r\n                    ref={this.poolRef}\r\n                    onMouseDown={this.onMouseDown}\r\n                    onMouseMove={this.onMouseMove}\r\n                    onMouseUp={this.onMouseUp}\r\n                    onMouseLeave={this.onMouseLeave}\r\n                >\r\n                    <canvas ref={this.canvasRef} />\r\n\r\n                    {\r\n                        this.state.nodes.map(it => (\r\n                            <MindNodeCard\r\n                                key={it.uid}\r\n                                anchor={this.getAnchor()}\r\n                                node={it}\r\n                                linking={this.linkingNodeUid === it.uid}\r\n                                choosen={this.selectedNodeUids.has(it.uid)}\r\n                                onClick={this.onClickNode}\r\n                                onMouseDown={this.onMouseDown}\r\n                                onMouseMove={this.onMouseMove}\r\n                                onMouseUp={this.onMouseUp}\r\n                                onRectUpdate={(uid, rect) => this.setNodeRect(uid, rect)}\r\n                                onClickLinkButton={(uid) => this.linkNode(uid)}\r\n                                onClickChooseButton={this.setNodeChoosen}\r\n                            />\r\n                        ))\r\n                    }\r\n\r\n                    {this.renderSelectionArea()}\r\n\r\n                    {this.renderNodeInfo()}\r\n                </div>\r\n\r\n                {/* 底部状态栏 */}\r\n                {this.renderBottomBar()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onkey = (e: KeyboardEvent) => {\r\n        if (e.key === 'Delete') {\r\n            this.deleteSelectedNodes();\r\n        }\r\n\r\n    }\r\n\r\n    //#region 渲染\r\n\r\n    // 池子UI组件\r\n    private poolRef: RefObject<HTMLDivElement> = React.createRef();\r\n    // 连接线的画板UI组件\r\n    private canvasRef: RefObject<HTMLCanvasElement> = React.createRef();\r\n\r\n    hideNodeInfoView = () => this.setState(() => ({ editingNodeUid: null }));\r\n\r\n    drawLines() {\r\n        // console.log(\"drawLines\");\r\n        const canvasAndContext = get2dContext(this.canvasRef);\r\n        if (!canvasAndContext) {\r\n            console.log(\"Invalid canvas\");\r\n            return;\r\n        }\r\n        const [canvas, g] = canvasAndContext;\r\n\r\n        g.clearRect(0, 0, canvas.width, canvas.height);\r\n        // 开始画线\r\n        g.strokeStyle = \"#808080\";\r\n        g.fillStyle = \"#808080\";\r\n        g.lineWidth = 1.5;\r\n        // const anchor = this.getAnchor();\r\n        // 修正量，是画布的client位置\r\n        const fix: Vec2 = this.getPoolFix();\r\n\r\n        const pointCache = new Map<number, Vec2>();\r\n        const getPoint: (node: MindNode) => Vec2 = (node: MindNode) => {\r\n            const cachedPoint = pointCache.get(node.uid);\r\n            if (cachedPoint) return cachedPoint;\r\n\r\n            const rect = this.nodeCardRects.get(node.uid);\r\n            if (rect) {\r\n                const point = Vec2Util.add(Vec2Util.minus([rect.x, rect.y], fix), [rect.width / 2, rect.height / 2]);\r\n                pointCache.set(node.uid, point);\r\n                return point;\r\n            }\r\n            return [0, 0];\r\n        };\r\n\r\n        const nodes = this.nodes;\r\n        const angleCache = new Map<number, number>();\r\n        const getAngle: (node: MindNode) => number = (node: MindNode) => {\r\n            if (angleCache.has(node.uid)) return angleCache.get(node.uid) || NaN;\r\n\r\n            const nodePosition = getPoint(node);\r\n\r\n            let inRelative: Vec2 = [0, 0];\r\n            for (const inNodeUid of node.inPorts) {\r\n                const inNode = nodes.get(inNodeUid);\r\n                if (!inNode) continue;\r\n                inRelative = Vec2Util.add(inRelative, Vec2Util.normalize(Vec2Util.minus(nodePosition, getPoint(inNode))));\r\n            }\r\n            inRelative = Vec2Util.normalize(inRelative);\r\n\r\n            let outRelative: Vec2 = [0, 0];\r\n            for (const outNodeUid of node.outPorts) {\r\n                const outNode = nodes.get(outNodeUid);\r\n                if (!outNode) continue;\r\n                outRelative = Vec2Util.add(outRelative, Vec2Util.normalize(Vec2Util.minus(getPoint(outNode), nodePosition)));\r\n            }\r\n            outRelative = Vec2Util.normalize(outRelative);\r\n\r\n            // console.log(\"uid\", node.uid);\r\n            // console.log(\"inRelative\", inRelative);\r\n            // console.log(\"outRelative\", outRelative);\r\n\r\n            const finalPoint = Vec2Util.add(inRelative, outRelative);\r\n            const angle = Math.atan2(finalPoint[1], finalPoint[0]);\r\n\r\n            angleCache.set(node.uid, angle);\r\n            return angle;\r\n        };\r\n\r\n        for (const node of Array.from(this.nodes.values())) {\r\n            const sourcePoint = getPoint(node);\r\n            for (const portUid of node.outPorts) {\r\n                const targetNode = this.nodes.get(portUid);\r\n                if (!targetNode) continue;\r\n\r\n                const targetPoint = getPoint(targetNode);\r\n                const controlHandleLength = Vec2Util.modulo(Vec2Util.minus(targetPoint, sourcePoint)) / 3;\r\n                const sourceAngle = getAngle(node);\r\n                const targetAngle = getAngle(targetNode);\r\n\r\n                const controlPoint1 = Vec2Util.add(sourcePoint, Vec2Util.fromAngle(sourceAngle, controlHandleLength));\r\n                const controlPoint2 = Vec2Util.minus(targetPoint, Vec2Util.fromAngle(targetAngle, controlHandleLength));\r\n\r\n                const controlPoints: Vec2[] = [sourcePoint, controlPoint1, controlPoint2, targetPoint];\r\n\r\n                const [centerPoint, centerAngle] = getBezierPointAndAngle(0.55, ...controlPoints);\r\n\r\n\r\n                g.beginPath();\r\n                g.moveTo(...sourcePoint);\r\n                g.bezierCurveTo(...controlPoint1, ...controlPoint2, ...targetPoint);\r\n                g.stroke();\r\n                g.beginPath();\r\n                g.moveTo(...Vec2Util.add(centerPoint, Vec2Util.fromAngle(centerAngle, g.lineWidth * 3)));\r\n                g.lineTo(...Vec2Util.add(centerPoint, Vec2Util.fromAngle(centerAngle + 0.8 * Math.PI, g.lineWidth * 3)));\r\n                g.lineTo(...Vec2Util.add(centerPoint, Vec2Util.fromAngle(centerAngle - 0.8 * Math.PI, g.lineWidth * 3)));\r\n                g.fill();\r\n\r\n                // g.beginPath();\r\n                // g.moveTo(...sourcePoint);\r\n                // g.lineTo(...targetPoint);\r\n                // g.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    renderTopBar() {\r\n        return (\r\n            <div className=\"top-bar\">\r\n                <button onClick={this.createNode}>新增</button>\r\n                <button onClick={this.save}>保存</button>\r\n                <button onClick={this.load}>载入</button>\r\n                <button onClick={this.unchooseAllNodes}>取消选择</button>\r\n                <button onClick={this.deleteSelectedNodes}>删除所选</button>\r\n                {TOOL_FLAGS.map(f => (\r\n                    <button\r\n                        key={f}\r\n                        onClick={this.setTool.bind(this, f)}\r\n                        disabled={this.state.toolFlag === f}\r\n                    >{TOOL_NAMES[f]}</button>\r\n                ))}\r\n                <textarea\r\n                    value={this.state.dataString}\r\n                    placeholder=\"在此输入/输出数据\"\r\n                    onChange={e => this.setState(() => ({ dataString: e.target.value }))}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderBottomBar() {\r\n        return (\r\n            <div className=\"bottom-bar\">\r\n                <span className=\"piece\">总节点数：{this.state.nodes.length}</span>\r\n                <span className=\"piece\">选中节点数：{this.selectedNodeUids.size}</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderNodeInfo() {\r\n        const editingNode = (this.state.editingNodeUid !== null) ? (this.nodes.get(this.state.editingNodeUid)) : null;\r\n        if (!editingNode) return null;\r\n\r\n        return (\r\n            <div className=\"node-info\">\r\n                <button className=\"icon\" onClick={this.hideNodeInfoView}>&gt;</button>\r\n                <MindNodeInfo\r\n                    key={editingNode.uid}\r\n                    node={editingNode}\r\n                    nodes={this.nodes}\r\n                    onUpdate={node => this.updateNode(node)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSelectionArea() {\r\n        const { selectionArea } = this.state;\r\n        if (!selectionArea) return null;\r\n        let { x, y, width, height } = selectionArea;\r\n        let [left, top] = Vec2Util.minus([x, y], this.getPoolFix());\r\n        if (width < 0) {\r\n            width = -width;\r\n            left = left - width;\r\n        }\r\n        if (height < 0) {\r\n            height = -height;\r\n            top = top - height;\r\n        }\r\n        return (\r\n            <div\r\n                className=\"section\"\r\n                style={{\r\n                    left: left + 'px',\r\n                    top: top + 'px',\r\n                    width: width + 'px',\r\n                    height: height + 'px',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 工具\r\n\r\n    get offset() { return this.state.offset; }\r\n    set offset(o) { this.setState(() => ({ offset: o })) }\r\n\r\n    get scale() { return this.state.scale; }\r\n    set scale(s) { this.setState(() => ({ scale: s })) }\r\n\r\n    get selectionArea() { return this.state.selectionArea; }\r\n    set selectionArea(sa) { this.setState(() => ({ selectionArea: sa })) }\r\n\r\n    private nodeCardRects: Map<number, Rect> = new Map();\r\n    public selectedNodeUids: Set<number> = new Set();\r\n\r\n    getNodeRect(uid: number): Rect | null {\r\n        return this.nodeCardRects.get(uid) || null;\r\n    }\r\n\r\n    setNodeRect(uid: number, rect: Rect) {\r\n        this.nodeCardRects.set(uid, rect);\r\n    }\r\n\r\n    private tool: Tool | null = null;\r\n\r\n    setTool(flag: ToolFlag | null) {\r\n        switch (flag) {\r\n            case 'createNode': this.tool = new CreateNodeTool(this); break;\r\n            case 'dragNode': this.tool = new DragNodeTool(this); break;\r\n            case 'dragPool': this.tool = new DragPoolTool(this); break;\r\n            case 'select': this.tool = new SelectTool(this); break;\r\n            case 'auto': this.tool = new AutoTool(this); break;\r\n            default: this.tool = null; break;\r\n        }\r\n        this.setState(() => ({ toolFlag: flag }));\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region UI相关\r\n\r\n    /*\r\n     * O->A->N\r\n     * ----    :Origin to Anchor: Offset\r\n     *    ---- :Anchor to Node: Position (of node)\r\n     */\r\n\r\n    // 原点，应该是pool组件的中心点\r\n    private origin: Vec2 = [0, 0];\r\n\r\n    resetView = () => {\r\n        const box = this.poolRef.current?.getBoundingClientRect();\r\n        if (!box) return;\r\n\r\n\r\n        this.origin = [box.width / 2, box.height / 2];\r\n        const canvas = this.canvasRef.current;\r\n        if (canvas) {\r\n            canvas.width = box.width;\r\n            canvas.height = box.height;\r\n        }\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    getAnchor(): Vec2 {\r\n        return Vec2Util.add(this.origin, this.state.offset);\r\n    }\r\n\r\n    getPoolFix(): Vec2 {\r\n        return getPosition(getRect(this.poolRef));\r\n    }\r\n\r\n    // 是否需要更新\r\n    private dirty: boolean = true;\r\n\r\n    notifyUpdate() {\r\n        this.dirty = true;\r\n    }\r\n\r\n    update = () => {\r\n        if (!this.mounted) return;\r\n        if (this.dirty) {\r\n            this.updateStateNodes();\r\n            this.drawLines();\r\n            this.dirty = false;\r\n        }\r\n        requestAnimationFrame(this.update);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 数据控制\r\n\r\n    // 所有节点列表，是实际的数据\r\n    public readonly nodes: Map<number, MindNode> = new Map();\r\n\r\n    genUid() {\r\n        const uid = this.state.uidCounter;\r\n        this.setState(s => ({ uidCounter: s.uidCounter + 1 }));\r\n        return uid;\r\n    }\r\n\r\n    createNode = () => {\r\n        const node: MindNode = createNode({ uid: this.genUid(), position: Vec2Util.minus([0, 0], this.state.offset) });\r\n        this.addNode(node);\r\n    }\r\n\r\n    addNode(node: MindNode) {\r\n        this.nodes.set(node.uid, node);\r\n        this.updateStateNodes();\r\n    }\r\n\r\n    updateNode(node: MindNode) {\r\n        this.nodes.set(node.uid, node);\r\n        this.updateStateNodes();\r\n    }\r\n\r\n    removeNode(uid: number) {\r\n        this.nodes.delete(uid);\r\n        this.nodeCardRects.delete(uid);\r\n        this.selectedNodeUids.delete(uid);\r\n        this.updateStateNodes();\r\n    }\r\n\r\n    updateStateNodes() {\r\n        this.setState(() => ({ nodes: Array.from(this.nodes.values()) }));\r\n    }\r\n\r\n    // 正在连接的节点UID\r\n    private linkingNodeUid: number | null = null;\r\n\r\n    linkNode(uid: number) {\r\n        const targetNode = this.nodes.get(uid);\r\n        if (!targetNode) return;\r\n        if (this.linkingNodeUid !== null) {\r\n            if (this.linkingNodeUid !== targetNode.uid) {\r\n                const sourceNode = this.nodes.get(this.linkingNodeUid);\r\n                if (sourceNode && targetNode) {\r\n                    const outPorts = new Set(sourceNode.outPorts);\r\n                    const inPorts = new Set(targetNode.inPorts);\r\n                    if (outPorts.has(targetNode.uid)) {\r\n                        outPorts.delete(targetNode.uid);\r\n                        inPorts.delete(sourceNode.uid);\r\n                    } else {\r\n                        outPorts.add(targetNode.uid);\r\n                        inPorts.add(sourceNode.uid);\r\n                    }\r\n                    sourceNode.outPorts = Array.from(outPorts);\r\n                    targetNode.inPorts = Array.from(inPorts);\r\n                    this.updateStateNodes();\r\n                }\r\n            }\r\n            this.linkingNodeUid = null;\r\n        } else {\r\n            this.linkingNodeUid = targetNode.uid;\r\n        }\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 鼠标事件\r\n\r\n    onClickNode = (event: MouseEvent, uid: number) => {\r\n        this.setState(() => ({ editingNodeUid: uid }));\r\n    }\r\n\r\n    private getToolEvent(e: MouseEvent, uid?: number): ToolEvent {\r\n        if (typeof uid === 'number') {\r\n            e.stopPropagation();\r\n        }\r\n        const node = typeof uid === 'number' ? (this.nodes.get(uid) || null) : null;\r\n        // const mousePosition = Vec2.minus([e.clientX, e.clientY], this.getPoolFix());\r\n        const mousePosition: Vec2 = [e.clientX, e.clientY];\r\n        return {\r\n            mousePosition,\r\n            node,\r\n            nativeEvent: e,\r\n        };\r\n    }\r\n\r\n    onMouseDown = (e: MouseEvent, uid?: number) => {\r\n        this.tool?.onStart(this.getToolEvent(e, uid));\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    onMouseMove = (e: MouseEvent, uid?: number) => {\r\n        this.tool?.onMove(this.getToolEvent(e, uid));\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    onMouseUp = (e: MouseEvent, uid?: number) => {\r\n        const ev = this.getToolEvent(e, uid);\r\n        this.tool?.onMove(ev);\r\n        this.tool?.onEnd(ev);\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    onMouseLeave = (e: MouseEvent, uid?: number) => {\r\n        this.onMouseUp(e, uid);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 坐标变换\r\n\r\n    // 把数据里的坐标转换为在.pool DOM元素种像素为单位的坐标\r\n    pool2pixel(poolCoord: Vec2): Vec2 {\r\n        return Vec2Util.add(poolCoord, this.getAnchor());\r\n    }\r\n\r\n    // 在.pool DOM元素种像素为单位的坐标转换为把数据里的坐标\r\n    pixel2pool(pixelCoord: Vec2): Vec2 {\r\n        return Vec2Util.minus(Vec2Util.minus(pixelCoord, this.getAnchor()), this.getPoolFix());\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 持久化\r\n\r\n    buildPool(): MindNodePool {\r\n        return {\r\n            uidCounter: this.state.uidCounter,\r\n            offset: this.state.offset,\r\n            scale: this.state.scale,\r\n            nodes: Array.from(this.nodes.values()),\r\n        };\r\n    }\r\n\r\n    load = () => {\r\n        try {\r\n            const raw: MindNodePool = JSON.parse(this.state.dataString);\r\n\r\n            const pool: MindNodePool = loadPool(raw);\r\n\r\n            this.nodes.clear();\r\n            this.nodeCardRects.clear();\r\n            this.selectedNodeUids.clear();\r\n            pool.nodes.forEach(it => this.nodes.set(it.uid, it));\r\n\r\n            this.setState(() => ({\r\n                uidCounter: pool.uidCounter,\r\n                offset: pool.offset,\r\n                nodes: pool.nodes,\r\n                scale: pool.scale,\r\n            }));\r\n        } catch (e) {\r\n            alert('解析数据失败！');\r\n        }\r\n    }\r\n\r\n    save = () => {\r\n        const pool: MindNodePool = this.buildPool();\r\n        this.setState(() => ({ dataString: JSON.stringify(pool) }));\r\n        console.log(pool);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 节点选择相关\r\n\r\n    setNodeChoosen = (uid: number, value: boolean) => {\r\n        if (value) {\r\n            this.selectedNodeUids.add(uid);\r\n        } else {\r\n            this.selectedNodeUids.delete(uid);\r\n        }\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    unchooseAllNodes = () => {\r\n        this.selectedNodeUids.clear();\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    deleteSelectedNodes = () => {\r\n        this.selectedNodeUids.forEach(uid => {\r\n            this.nodes.delete(uid);\r\n            this.nodeCardRects.delete(uid);\r\n        });\r\n        this.selectedNodeUids.clear();\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    //#endregion\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}