{"version":3,"sources":["utils/data-manager.ts","utils/FileEncoder.ts","utils/FileDecoder.ts","utils/file-utils.ts","Home.tsx","utils/test-utils.ts","Editor.tsx","utils/math-utils.ts","Excise.tsx","ErrorPanel.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["count","genQuid","uid2str","uid","toString","padStart","KEY_INFO","QNA_SET_MAP","Map","USER_PROGRESS_MAP","addQnaSet","qs","set","qsuid","getQnaSet","result","get","json","localStorage","getItem","JSON","parse","loadQnaSet","getUserProgress","upuid","loadUserProgress","saveQnaSet","qnaSet","setItem","stringify","saveUserProgress","userProgress","extractQnaSetInfo","itemCount","items","length","name","description","version","extractUserProgressInfo","finishedCount","finished","hasWork","work","date","lastModified","Date","now","UTF8_ENCODER","TextEncoder","FileEncoder","data","totalByteLength","value","buf","ArrayBuffer","DataView","setInt16","this","push","Uint8Array","setInt32","encode","writeInt16","byteLength","buf8","pointer","d","i","UTF8_DECODER","TextDecoder","FileDecoder","dv","getUint16","getUint32","strLen","readInt16","decode","buffer","slice","readQnaSet","file","cb","reader","FileReader","onload","r","input","developmentVersion","readInt32","readUTF8","itemLength","quid","question","answer","hint","convertArrayBufferToQnaSet","readAsArrayBuffer","writeQnaSet","output","writeInt32","writeUTF8","item","build","convertQnaSetToArrayBuffer","download","Header","Layout","Footer","Content","Title","Typography","Text","Home","className","level","style","margin","color","TabPane","tab","dataSource","props","progresses","renderItem","renderUserProgress","bind","sets","header","direction","showUploadList","onChange","p","originFileObj","s","dataModifier","type","onClick","toLocaleString","createEmptyQnaSet","renderQnaSet","saveData","setInfo","find","Item","actions","SyncOutlined","resetProgressWork","PlayCircleOutlined","continueProgress","DeleteOutlined","removeProgress","Meta","title","EditOutlined","editQnaSet","addProgress","removeQnaSet","React","Component","Sider","List","TextArea","Input","makePreview","Editor","formRef","createRef","state","Object","assign","currentItem","editMeta","itemPreview","isUpdateItemPreview","findIndex","ci","values","current","getFieldsValue","changeQna","setState","padding","shape","icon","HomeOutlined","gotoHome","e","open","FileOutlined","SaveOutlined","save","width","marginTop","avatar","size","ellipsis","itemLayout","PlusOutlined","addNewQna","renderMetaEdit","renderItemEdit","height","renderPreview","setCurrentItem","setFieldsValue","ref","layout","initialValues","onValuesChange","cv","onFinish","label","rules","required","message","autoSize","htmlType","resetFields","meta","setMeta","placeholder","background","LeftOutlined","children","fontStyle","marginBottom","block","newQna","newItems","concat","index","randomItems","arr","Math","min","j","floor","random","tmp","isToday","today","getFullYear","getMonth","getDate","Excise","progress","newWorkSize","oldWorkSize","map","w","filter","finishedQuids","Set","unfinishedItems","finishedItems","has","oldWork","newWork","decideWork","workCompleteCount","success","prog","allFinished","content","buttonProps","nextQuestion","disabled","danger","nextIndex","add","onComplete","splice","Array","from","ErrorPanel","error","App","forEach","progressInfo","info","obj","uidCounter","loadInfo","runProgress","thenEdit","newState","window","confirm","delete","removeItem","newSets","thenStart","up","pi","newProgresses","contentType","renderError","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ccdf3c58.chunk.js","sourcesContent":["// import Dexie from \"dexie\";\r\nimport { QnaSet, QnaSetInfo, UserProgress, UserProgressInfo } from \"../interfaces\";\r\n\r\n\r\nlet count = 1;\r\nfunction genQuid() {\r\n    return count++;\r\n}\r\n\r\nfunction createEmptyQnaSet(): QnaSet {\r\n    const qsuid = genQuid();\r\n    return {\r\n        developmentVersion: 1,\r\n        qsuid,\r\n        version: \"1.0.0\",\r\n        name: \"未命名题集-\" + qsuid,\r\n        description: \"创建于 \" + new Date().toLocaleString(),\r\n        items: [],\r\n    };\r\n}\r\n\r\nfunction createProgress(qsuid: number): UserProgress {\r\n    return {\r\n        upuid: genQuid(),\r\n        developmentVersion: 1,\r\n        qsuid: qsuid,\r\n        finished: [],\r\n        hasWork: false,\r\n        work: [],\r\n        date: 0,\r\n    };\r\n}\r\n\r\n// const database = new Dexie('custom-qna');\r\n// const databaseVersion = 1;\r\n\r\n// function setupDatabase() {\r\n//     database.version(databaseVersion).stores({\r\n//         qnaSets: \"++qsuid,version,name,description\",\r\n//         userProgresses: \"++upuid,qsuid,\"\r\n//     });\r\n// }\r\n\r\nfunction uid2str(uid: number) {\r\n    return uid.toString(16).padStart(8, '0');\r\n}\r\n\r\nconst KEY_INFO = \"custom-qns-info\";\r\n\r\nconst QNA_SET_MAP: Map<number, QnaSet> = new Map();\r\nconst USER_PROGRESS_MAP: Map<number, UserProgress> = new Map();\r\n\r\nfunction getLoadedQnaSets() {\r\n    return Array.from(QNA_SET_MAP.values());\r\n}\r\n\r\nfunction getLoadedUserProgresses() {\r\n    return Array.from(USER_PROGRESS_MAP.values());\r\n}\r\n\r\nfunction addQnaSet(qs: QnaSet) {\r\n    QNA_SET_MAP.set(qs.qsuid, qs);\r\n}\r\n\r\nfunction addUserProgress(up: UserProgress) {\r\n    USER_PROGRESS_MAP.set(up.upuid, up);\r\n}\r\n\r\nfunction getQnaSet(qsuid: number) {\r\n    let result = QNA_SET_MAP.get(qsuid) || null;\r\n    if (!result) {\r\n        result = loadQnaSet(qsuid);\r\n        if (result) {\r\n            QNA_SET_MAP.set(qsuid, result);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction getUserProgress(upuid: number) {\r\n    let result = USER_PROGRESS_MAP.get(upuid) || null;\r\n    if (!result) {\r\n        result = loadUserProgress(upuid);\r\n        if (result) {\r\n            USER_PROGRESS_MAP.set(upuid, result);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction removeQnaSet(qsuid: number) {\r\n    QNA_SET_MAP.delete(qsuid);\r\n    localStorage.removeItem(\"qs\" + uid2str(qsuid));\r\n}\r\n\r\nfunction removeUserProgress(upuid: number) {\r\n    USER_PROGRESS_MAP.delete(upuid);\r\n    localStorage.removeItem(\"up\" + uid2str(upuid));\r\n}\r\n\r\nfunction saveAll() {\r\n    Array.from(QNA_SET_MAP.values()).forEach(saveQnaSet);\r\n    Array.from(USER_PROGRESS_MAP.values()).forEach(saveUserProgress);\r\n}\r\n\r\nfunction saveInfo(info: Info) {\r\n    localStorage.setItem(KEY_INFO, JSON.stringify(Object.assign(info, { uidCounter: count })));\r\n}\r\n\r\ninterface Info {\r\n    sets: Array<QnaSetInfo>,\r\n    progresses: Array<UserProgressInfo>,\r\n}\r\n\r\nfunction loadInfo(): Info {\r\n    const json = localStorage.getItem(KEY_INFO);\r\n    if (json) {\r\n        const obj = JSON.parse(json);\r\n        count = obj.uidCounter || count;\r\n        return {\r\n            sets: obj.sets,\r\n            progresses: obj.progresses,\r\n        };\r\n    }\r\n\r\n    count = 0;\r\n    let info: Info = {\r\n        sets: [],\r\n        progresses: [],\r\n    };\r\n    return info;\r\n}\r\n\r\nfunction saveQnaSet(qnaSet: QnaSet) {\r\n    localStorage.setItem(\"qs\" + uid2str(qnaSet.qsuid), JSON.stringify(qnaSet));\r\n}\r\n\r\nfunction loadQnaSet(qsuid: number): QnaSet | null {\r\n    const json = localStorage.getItem(\"qs\" + uid2str(qsuid));\r\n    return json ? JSON.parse(json) : null;\r\n}\r\n\r\nfunction saveUserProgress(userProgress: UserProgress) {\r\n    localStorage.setItem(\"up\" + uid2str(userProgress.upuid), JSON.stringify(userProgress));\r\n}\r\n\r\nfunction loadUserProgress(upuid: number): UserProgress | null {\r\n    const json = localStorage.getItem(\"up\" + uid2str(upuid));\r\n    return json ? JSON.parse(json) : null;\r\n}\r\n\r\nfunction extractQnaSetInfo(qnaSet: QnaSet): QnaSetInfo {\r\n    return {\r\n        itemCount: qnaSet.items.length,\r\n        name: qnaSet.name,\r\n        qsuid: qnaSet.qsuid,\r\n        description: qnaSet.description,\r\n        version: qnaSet.version,\r\n    };\r\n}\r\n\r\nfunction extractUserProgressInfo(userProgress: UserProgress): UserProgressInfo {\r\n    return {\r\n        upuid: userProgress.upuid,\r\n        qsuid: userProgress.qsuid,\r\n        finishedCount: userProgress.finished.length,\r\n        hasWork: userProgress.hasWork,\r\n        work: userProgress.work,\r\n        date: userProgress.date,\r\n        lastModified: Date.now(),\r\n    };\r\n}\r\n\r\nexport {\r\n    createEmptyQnaSet,\r\n    createProgress,\r\n    genQuid,\r\n    saveQnaSet,\r\n    loadQnaSet,\r\n    saveUserProgress,\r\n    loadUserProgress,\r\n    extractQnaSetInfo,\r\n    extractUserProgressInfo,\r\n\r\n    getLoadedQnaSets,\r\n    getLoadedUserProgresses,\r\n    addQnaSet,\r\n    addUserProgress,\r\n    getQnaSet,\r\n    getUserProgress,\r\n    removeQnaSet,\r\n    removeUserProgress,\r\n\r\n    uid2str,\r\n\r\n    saveAll,\r\n    saveInfo,\r\n    loadInfo,\r\n}","\r\n\r\nconst UTF8_ENCODER = new TextEncoder();\r\n\r\nexport default class FileEncoder {\r\n    private data: Array<Uint8Array> = [];\r\n    private totalByteLength: number = 0;\r\n\r\n    writeInt16(value: number) {\r\n        const buf: ArrayBuffer = new ArrayBuffer(2);\r\n        const d: DataView = new DataView(buf);\r\n        d.setInt16(0, value);\r\n        this.data.push(new Uint8Array(buf));\r\n        this.totalByteLength += 2;\r\n        return this;\r\n    }\r\n\r\n    writeInt32(value: number) {\r\n        const buf: ArrayBuffer = new ArrayBuffer(4);\r\n        const d: DataView = new DataView(buf);\r\n        d.setInt32(0, value);\r\n        this.data.push(new Uint8Array(buf));\r\n        this.totalByteLength += 4;\r\n        return this;\r\n    }\r\n\r\n    writeUTF8(value: string) {\r\n        const buf: ArrayBuffer = UTF8_ENCODER.encode(value);\r\n        this.writeInt16(buf.byteLength);\r\n        this.data.push(new Uint8Array(buf));\r\n        this.totalByteLength += buf.byteLength;\r\n        return this;\r\n    }\r\n\r\n    build(): Uint8Array {\r\n        const buf: ArrayBuffer = new ArrayBuffer(this.totalByteLength);\r\n        const buf8: Uint8Array = new Uint8Array(buf);\r\n        let pointer = 0;\r\n        for (const d of this.data) {\r\n            for (let i = 0; i < d.byteLength; i++) {\r\n                buf8[pointer + i] = d[i];\r\n            }\r\n            pointer += d.byteLength;\r\n        }\r\n        return buf8;\r\n    }\r\n}","\r\n\r\nconst UTF8_DECODER = new TextDecoder(\"UTF-8\");\r\n\r\nexport default class FileDecoder {\r\n    private dv: DataView;\r\n    private pointer: number = 0;\r\n\r\n    constructor(dv: DataView) {\r\n        this.dv = dv;\r\n    }\r\n\r\n    readInt16(): number {\r\n        const value = this.dv.getUint16(this.pointer);\r\n        this.pointer += 2;\r\n        return value;\r\n    }\r\n\r\n    readInt32(): number {\r\n        const value = this.dv.getUint32(this.pointer);\r\n        this.pointer += 4;\r\n        return value;\r\n    }\r\n\r\n    readUTF8(): string {\r\n        const strLen = this.readInt16();\r\n        const value = UTF8_DECODER.decode(this.dv.buffer.slice(this.pointer, this.pointer + strLen));\r\n        this.pointer += strLen;\r\n        return value;\r\n    }\r\n\r\n}","import { QnaItem, QnaSet } from \"../interfaces\";\r\nimport download from 'downloadjs';\r\nimport FileEncoder from \"./FileEncoder\";\r\nimport FileDecoder from \"./FileDecoder\";\r\nimport { uid2str } from \"./data-manager\";\r\n\r\n// 在浏览器环境中，从文件中读取题集\r\nfunction readQnaSet(file: File, cb: (qnaSet: QnaSet) => void) {\r\n    const reader = new FileReader()\r\n    reader.onload = () => {\r\n        const r: ArrayBuffer = reader.result as ArrayBuffer;\r\n        cb(convertArrayBufferToQnaSet(r));\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n}\r\n\r\n// 在浏览器环境中写入（下载）题集\r\nfunction writeQnaSet(qnaSet: QnaSet, cb?: () => void) {\r\n    const buf: Uint8Array = convertQnaSetToArrayBuffer(qnaSet);\r\n    download(buf, qnaSet.name + \"_\" + qnaSet.version + \"_\" + uid2str(qnaSet.qsuid) + \".bin\");\r\n}\r\n\r\n// 将题集数据转化为题集实例\r\nfunction convertArrayBufferToQnaSet(buf: ArrayBuffer): QnaSet {\r\n    const input: FileDecoder = new FileDecoder(new DataView(buf));\r\n\r\n    const developmentVersion = input.readInt32();\r\n    const qsuid = input.readInt32();\r\n    const version = input.readUTF8();\r\n    const name = input.readUTF8();\r\n    const description = input.readUTF8();\r\n\r\n    const items: Array<QnaItem> = [];\r\n    const itemLength = input.readInt32();\r\n    for (let i = 0; i < itemLength; i++) {\r\n        const quid = input.readInt32();\r\n        const question = input.readUTF8();\r\n        const answer = input.readUTF8();\r\n        const hint = input.readUTF8();\r\n\r\n        items.push({ quid, question, answer, hint });\r\n    }\r\n\r\n    return { developmentVersion, qsuid, version, name, description, items };\r\n}\r\n\r\n// 将题集转化为二进制文件数据\r\n// 顺序为：developmentVersion，qsuid，version，name，description，items\r\nfunction convertQnaSetToArrayBuffer(set: QnaSet): Uint8Array {\r\n    const output: FileEncoder = new FileEncoder();\r\n    output.writeInt32(set.developmentVersion);\r\n    output.writeInt32(set.qsuid);\r\n    output.writeUTF8(set.version);\r\n    output.writeUTF8(set.name);\r\n    output.writeUTF8(set.description);\r\n\r\n    output.writeInt32(set.items.length);\r\n    for (const item of set.items) {\r\n        output.writeInt32(item.quid);\r\n        output.writeUTF8(item.question);\r\n        output.writeUTF8(item.answer);\r\n        output.writeUTF8(item.hint || '');\r\n    }\r\n\r\n    return output.build();\r\n}\r\n\r\nexport {\r\n    readQnaSet,\r\n    writeQnaSet,\r\n    convertArrayBufferToQnaSet,\r\n    convertQnaSetToArrayBuffer,\r\n}","import { Button, Layout, Tabs, List, Typography, Card, Space, Upload } from \"antd\";\r\nimport { QnaSet, QnaSetInfo, UserProgress, UserProgressInfo } from \"./interfaces\";\r\nimport { EditOutlined, DeleteOutlined, PlayCircleOutlined, SyncOutlined } from \"@ant-design/icons\";\r\nimport './Home.css';\r\nimport React from \"react\";\r\nimport { createEmptyQnaSet, createProgress, uid2str } from \"./utils/data-manager\";\r\nimport { readQnaSet } from \"./utils/file-utils\";\r\n\r\nconst { Header, Footer, Content } = Layout;\r\nconst { Title, Text } = Typography;\r\n\r\ninterface HomeProps {\r\n    progresses: Array<UserProgressInfo>;\r\n    sets: Array<QnaSetInfo>;\r\n    dataModifier: DataModifier;\r\n    saveData: () => void;\r\n}\r\n\r\ninterface DataModifier {\r\n    addQnaSet(set: QnaSet, thenEdit?: boolean): void;\r\n    removeQnaSet(set: QnaSetInfo): void;\r\n    editQnaSet(set: QnaSetInfo): void;\r\n    addProgress(progress: UserProgress, thenStart?: boolean): void;\r\n    removeProgress(progress: UserProgressInfo): void;\r\n    continueProgress(progress: UserProgressInfo): void;\r\n    resetProgressWork(progress: UserProgressInfo): void;\r\n}\r\n\r\nexport default class Home extends React.Component<HomeProps> {\r\n\r\n    render() {\r\n        return (\r\n            <Layout className=\"App fill-height\">\r\n                <Header className=\"centerize-container\">\r\n                    <Title level={2} style={{ margin: \"0\", color: '#ffffff' }}>Custom Q&amp;A</Title>\r\n                </Header>\r\n                \r\n                <Content className=\"App-content\">\r\n                    <Tabs className=\"fill\" style={{ margin: \"0 1em\" }}>\r\n                        <Tabs.TabPane\r\n                            className=\"fill scroll-y\"\r\n                            tab=\"进度\"\r\n                            key=\"progresses\"\r\n                        >\r\n                            <List\r\n                                dataSource={ this.props.progresses }\r\n                                renderItem={ this.renderUserProgress.bind(this) }\r\n                            />\r\n                        </Tabs.TabPane>\r\n\r\n                        <Tabs.TabPane\r\n                            className=\"fill scroll-y\"\r\n                            tab=\"题集\"\r\n                            key=\"sets\"\r\n                        >\r\n                            <List\r\n                                dataSource={ this.props.sets }\r\n                                header={ (\r\n                                    <Space direction=\"horizontal\" className=\"centerize-container\">\r\n                                        <Upload \r\n                                            showUploadList={ false } \r\n                                            onChange={ p => readQnaSet(p.file.originFileObj, s => this.props.dataModifier.addQnaSet(s, false)) }\r\n                                        >\r\n                                            <Button type=\"primary\">导入</Button>\r\n                                        </Upload>\r\n                                        \r\n                                        <Button onClick={ () => this.props.dataModifier.addQnaSet(createEmptyQnaSet(), true) }>新建</Button>\r\n                                    </Space>\r\n                                ) }\r\n                                renderItem={ this.renderQnaSet.bind(this) }\r\n                            />\r\n                        </Tabs.TabPane>\r\n                    </Tabs>\r\n                </Content>\r\n\r\n                <Footer>\r\n                    <Space>\r\n                        <Button onClick={ this.props.saveData }>强制保存</Button>\r\n                    </Space>\r\n                </Footer>\r\n            </Layout>\r\n        )\r\n    }\r\n\r\n    renderUserProgress(p: UserProgressInfo) {\r\n        const setInfo = this.props.sets.find(s => s.qsuid === p.qsuid);\r\n        return (\r\n            <List.Item>\r\n                <Card \r\n                    className=\"fill-width\"\r\n                    actions={ [\r\n                        <SyncOutlined onClick={ () => this.props.dataModifier.resetProgressWork(p) }/>,\r\n                        <PlayCircleOutlined onClick={ () => this.props.dataModifier.continueProgress(p) }/>,\r\n                        <DeleteOutlined onClick={ () => this.props.dataModifier.removeProgress(p) }/>,\r\n                    ] }\r\n                >\r\n                    <Card.Meta\r\n                        title={ <Title level={3}>{ setInfo ? setInfo.name : \"未知题集\" }</Title> }\r\n                        description={ \r\n                            <div className=\"qnaset-info-card\">\r\n                                <div>\r\n                                    <Space>\r\n                                        <Text>版本:{ setInfo ? setInfo.version : \"?.?.?\" }</Text>\r\n                                        <Text>完成:{ p.finishedCount } / { setInfo ? setInfo.itemCount : '?' }</Text>\r\n                                    </Space>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <Space>\r\n                                        <Text type=\"secondary\">upuid:{ uid2str(p.upuid) }</Text>\r\n                                        <Text type=\"secondary\">qsuid:{ setInfo ? uid2str(setInfo.qsuid) : \"???\" }</Text>\r\n                                    </Space>\r\n                                </div>\r\n                            </div>\r\n                             \r\n                        }\r\n                    />\r\n                </Card>\r\n            </List.Item>\r\n        );\r\n    }\r\n\r\n    renderQnaSet(s: QnaSetInfo) {\r\n        return (\r\n            <List.Item>\r\n                <Card \r\n                    className=\"fill-width\"\r\n                    actions={ [\r\n                        <EditOutlined onClick={ () => this.props.dataModifier.editQnaSet(s) }/>,\r\n                        <PlayCircleOutlined onClick={ () => this.props.dataModifier.addProgress(createProgress(s.qsuid), true) }/>,\r\n                        <DeleteOutlined onClick={ () => this.props.dataModifier.removeQnaSet(s) }/>,\r\n                    ] }\r\n                >\r\n                    <Card.Meta\r\n                        title={ <Title level={3}>{ s.name }</Title> }\r\n                        description={ \r\n                            <div className=\"qnaset-info-card\">\r\n                                <div>\r\n                                    <Space>\r\n                                        <Text>版本:{ s.version }</Text>\r\n                                        <Text>题数:{ s.itemCount }</Text>\r\n                                        <Text>qsuid:{ uid2str(s.qsuid) }</Text>\r\n                                    </Space>\r\n                                </div>\r\n                                \r\n                                <div>\r\n                                    <Text>{ s.description }</Text>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Card>\r\n            </List.Item>\r\n        );\r\n    }\r\n} \r\n\r\nexport type {\r\n    DataModifier,\r\n}","import { QnaSet } from \"../interfaces\";\r\nimport { genQuid } from \"./data-manager\";\r\n\r\nconst MEANINGFUL = [\r\n    {\r\n        quid: genQuid(),\r\n        question: '翻译：我的父亲做菜真的很好吃。',\r\n        answer: 'Mein Vater kocht sehr gut.',\r\n    },\r\n    {\r\n        quid: genQuid(),\r\n        question: '翻译：Bis später.',\r\n        answer: '待会儿见。',\r\n        hint: 'See you later.',\r\n    },\r\n];\r\n\r\nfunction createTestQnaSet(size: number = 2): QnaSet {\r\n    const qsuid = genQuid();\r\n    return {\r\n        developmentVersion: 1,\r\n        qsuid,\r\n        version: \"1.0.0\",\r\n        name: randomName(),\r\n        description: \"创建于 \" + new Date().toLocaleString(),\r\n        items: size <= 2 \r\n            ? MEANINGFUL.slice(0, size) \r\n            : MEANINGFUL.concat(...Array(size).fill(0).map((v, i) => ({\r\n                quid: genQuid(),\r\n                question: '翻译：' + (i + 2),\r\n                answer: (i + 2) + 'th answer.',\r\n                hint: (i % 2) ? ((i + 2) + 'th hint.') : '',\r\n            }))),\r\n    };\r\n}\r\n\r\nfunction randomName(): string {\r\n    const a = 'a'.charCodeAt(0);\r\n    const r = String.fromCharCode(...Array(2 + Math.floor(Math.random() * 8)).fill(0).map(() => a + Math.floor(Math.random() * 26)));\r\n    return r[0].toUpperCase() + r.slice(1);\r\n}\r\n\r\nexport {\r\n    createTestQnaSet,\r\n    genQuid,\r\n}","import { Avatar, Breadcrumb, Button, Card, Divider, Form, FormInstance, Input, Layout, List, Space, Typography, Upload } from \"antd\";\r\nimport React from \"react\";\r\nimport { PlusOutlined, SaveOutlined, HomeOutlined, FileOutlined, LeftOutlined } from '@ant-design/icons';\r\nimport './Editor.css';\r\nimport { QnaItem, QnaSet } from \"./interfaces\";\r\nimport { readQnaSet, writeQnaSet } from \"./utils/file-utils\";\r\nimport { genQuid } from \"./utils/test-utils\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nconst { Content, Header, Sider } = Layout;\r\nconst { Item } = List;\r\nconst { Meta } = Item;\r\nconst { TextArea } = Input;\r\nconst { Text, Title } = Typography;\r\n\r\ninterface EditorProps {\r\n    set: QnaSet;\r\n    gotoHome: () => void;\r\n}\r\n\r\ninterface EditableQnaSetMeta {\r\n    name: string,\r\n    version: string,\r\n    description: string,\r\n}\r\n\r\ninterface ItemPreview {\r\n    question: string;\r\n    answer: string;\r\n    hint: string;\r\n}\r\n\r\ntype EditorState = QnaSet & {\r\n    currentItem: QnaItem | null;\r\n    editMeta: boolean;\r\n    itemPreview: ItemPreview | null;\r\n    isUpdateItemPreview: boolean,\r\n}\r\n\r\nclass Editor extends React.Component<EditorProps, EditorState> {\r\n\r\n    constructor(props: EditorProps) {\r\n        super(props);\r\n        this.state = Object.assign({}, props.set, {\r\n            currentItem: null,\r\n            editMeta: false,\r\n            itemPreview: null,\r\n            isUpdateItemPreview: false,\r\n        });\r\n    }\r\n\r\n    setCurrentItem(item: QnaItem) {\r\n        if (this.state.items.findIndex(i => i === item || i.quid === item.quid) >= 0) {\r\n            if (this.state.currentItem) {\r\n                const ci = this.state.currentItem;\r\n                const values = this.formRef.current?.getFieldsValue();\r\n                if (values) {\r\n                    this.changeQna({\r\n                        quid: ci.quid,\r\n                        question: values.question || ci.question,\r\n                        answer: values.answer || ci.answer,\r\n                        hint: values.hint || ci.hint || '',\r\n                    });\r\n                }\r\n            }\r\n            this.setState({ currentItem: item, editMeta: false, itemPreview: makePreview(item) });\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Layout className=\"Editor fill-height\">\r\n                <Header className=\"d-flex align-items-center\">\r\n                    <Title level={2} style={{ color: \"#ffffff\", padding: 0 }}>题集编辑器</Title>\r\n\r\n                    <span className=\"flex-1\"/>\r\n\r\n                    <Space>\r\n                        <Button\r\n                            shape=\"round\"\r\n                            icon={ <HomeOutlined /> } \r\n                            onClick={ this.props.gotoHome }\r\n                        >主页</Button>\r\n\r\n                        <Upload \r\n                            showUploadList={false}\r\n                            onChange={ (e) => this.open(e.file.originFileObj) }\r\n                        >\r\n                            <Button\r\n                                shape=\"round\"\r\n                                icon={ <FileOutlined /> } \r\n                            >打开</Button>\r\n                        </Upload>\r\n\r\n                        <Button\r\n                            shape=\"round\"\r\n                            icon={ <SaveOutlined /> } \r\n                            onClick={ this.save.bind(this) }\r\n                        >保存</Button>\r\n                    </Space>\r\n                </Header>\r\n\r\n                <Layout>\r\n                    <Sider className=\"Editor-sider-left fill-height\" width=\"36vh\">\r\n                        <div className=\"Editor-sider-content fill-height d-flex flex-column\">\r\n                            <Card style={{ marginTop: \".5em\" }} onClick={ this.editMeta.bind(this, true) }>\r\n                                <Card.Meta\r\n                                    avatar={ <Avatar size=\"large\">{ (this.state.name || '').slice(0, 2) }</Avatar> }\r\n                                    title={ <Title level={3} ellipsis>{ this.state.name } { this.state.version }</Title> }\r\n                                    description={ <Text ellipsis>{ this.state.description }</Text> }\r\n                                />\r\n                            </Card> \r\n\r\n                            <div className=\"list-content flex-1 scroll-y overflow-x-hidden\">\r\n                                <List\r\n                                    itemLayout=\"vertical\"\r\n                                    dataSource={ this.state.items }\r\n                                    renderItem={ this.renderItem.bind(this) }\r\n                                />\r\n                            </div>\r\n\r\n                            <Divider/>\r\n\r\n                            <div className=\"qna-list-tool-bar\">\r\n                                <Button \r\n                                    icon={ <PlusOutlined/> }\r\n                                    onClick={ this.addNewQna.bind(this) }\r\n                                >新建</Button>\r\n                            </div>\r\n                        </div>\r\n                    </Sider>\r\n\r\n                    <Content className=\"Editor-content fill-height scroll-y\">\r\n                        { this.state.editMeta ? this.renderMetaEdit() : this.renderItemEdit() }\r\n                    </Content>\r\n\r\n                    <Divider style={{ height: \"100%\" }} type=\"vertical\"/>\r\n\r\n                    <Sider className=\"Editor-sider-right fill-height\" width=\"50vh\">\r\n                        { (!this.state.editMeta && this.state.currentItem) \r\n                            ? this.renderPreview() : null }\r\n                    </Sider>\r\n                </Layout>\r\n            </Layout>\r\n        );\r\n    }\r\n\r\n    renderItem(item: QnaItem) {\r\n        return (\r\n            <Item onClick={ this.setCurrentItem.bind(this, item) }>\r\n                <Meta\r\n                    title={ <Text ellipsis>{ item.question || \"无题-\" + item.quid }</Text> }\r\n                    description={ <Text type=\"secondary\" ellipsis>{ item.answer }</Text> }\r\n                />\r\n            </Item>\r\n        );\r\n    }\r\n\r\n    private formRef = React.createRef<FormInstance>();\r\n\r\n    renderItemEdit() {\r\n        const ci = this.state.currentItem;\r\n        if (ci === null) return null;\r\n\r\n        if (!this.state.isUpdateItemPreview) {\r\n            this.formRef.current?.setFieldsValue(ci);\r\n        }\r\n\r\n        return (\r\n            <div className=\"fill-height\">\r\n                <div className=\"d-flex\">\r\n                    <Breadcrumb className=\"flex-1\">\r\n                        <Breadcrumb.Item>\r\n                            <span onClick={ this.editMeta.bind(this, true) }>{ this.state.name }</span>\r\n                        </Breadcrumb.Item>\r\n                        \r\n                        <Breadcrumb.Item>\r\n                            <span>#{ ci.quid }</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n\r\n                    <Text type=\"secondary\">quid: { ci.quid }</Text>\r\n                </div>\r\n\r\n                <Divider/>\r\n\r\n                <Form \r\n                    name=\"item\"\r\n                    ref={ this.formRef } \r\n                    layout=\"vertical\"\r\n                    initialValues={ ci }\r\n                    onValuesChange={ (cv, values) => this.setState({ \r\n                        itemPreview: makePreview(values), \r\n                        isUpdateItemPreview: true,\r\n                    }) }\r\n                    onFinish={ values => \r\n                        this.changeQna({\r\n                            quid: ci.quid,\r\n                            question: values.question || ci.question,\r\n                            answer: values.answer || ci.answer,\r\n                            hint: values.hint || ci.hint || '',\r\n                        })\r\n                    }\r\n                >\r\n                    <Form.Item\r\n                        name=\"question\"\r\n                        label=\"问题\"\r\n                        rules={[{ required: true, message: \"问题是必须的\" }]}\r\n                    >\r\n                        <TextArea autoSize size=\"large\"/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item \r\n                        name=\"answer\"\r\n                        label=\"答案\"\r\n                        rules={[{ required: true, message: \"答案是必须的\" }]}\r\n                    >\r\n                        <TextArea autoSize size=\"large\"/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"hint\"\r\n                        label=\"提示\"\r\n                    >\r\n                        <TextArea autoSize size=\"large\"/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Space className=\"fill-width centerize-container\">\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                提交\r\n                            </Button>\r\n\r\n                            <Button htmlType=\"button\" onClick={ () => this.formRef.current?.resetFields() }>\r\n                                重置\r\n                            </Button>\r\n                        </Space>\r\n                    </Form.Item>\r\n\r\n                    <Text type=\"secondary\">当切换当前编辑词条时会自动提交。</Text>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderMetaEdit() {\r\n        const meta = {\r\n            name: this.state.name,\r\n            version: this.state.version,\r\n            description: this.state.description,\r\n        };\r\n\r\n        this.formRef.current?.setFieldsValue(meta);\r\n\r\n        return (\r\n            <div className=\"fill-height\">\r\n                <div className=\"d-flex\">\r\n                    <Breadcrumb className=\"flex-1\">\r\n                        <Breadcrumb.Item>\r\n                            <span>{ this.state.name }</span>\r\n                        </Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n\r\n                    <Text type=\"secondary\">qsuid: { this.state.qsuid }</Text>\r\n                </div>\r\n\r\n                <Divider/>\r\n\r\n                <Form \r\n                    name=\"meta\"\r\n                    ref={ this.formRef } \r\n                    layout=\"horizontal\"\r\n                    initialValues={ meta }\r\n                    onFinish={ values => \r\n                        this.setMeta({\r\n                            name: values.name,\r\n                            version: values.version,\r\n                            description: values.description,\r\n                        })\r\n                    }\r\n                >\r\n                    <Form.Item\r\n                        name=\"name\"\r\n                        label=\"名称\"\r\n                        rules={[{ required: true, message: \"名称是必须的\" }]}\r\n                    >\r\n                        <Input size=\"large\"/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item \r\n                        name=\"version\"\r\n                        label=\"版本\"\r\n                        rules={[{ required: true, message: \"版本是必须的\" }]}\r\n                    >\r\n                        <Input size=\"large\" placeholder=\"形如 1.16.5 的版本号\"/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        name=\"description\"\r\n                        label=\"描述\"\r\n                    >\r\n                        <TextArea autoSize size=\"large\" placeholder=\"在此输入该题集的描述以及想传达给使用者的信息\"/>\r\n                    </Form.Item>\r\n\r\n                    <Form.Item>\r\n                        <Space className=\"fill-width centerize-container\">\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                提交\r\n                            </Button>\r\n\r\n                            <Button htmlType=\"button\" onClick={ () => this.formRef.current?.resetFields() }>\r\n                                重置\r\n                            </Button>\r\n                        </Space>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderPreview() {\r\n        const ci = this.state.itemPreview;\r\n        if (ci === null) return null;\r\n\r\n        return (\r\n            <div className=\"preview fill-height d-flex flex-column\" >\r\n                <header className=\"d-flex align-items-center\" style={{\r\n                    background: \"#1890ff\",\r\n                    padding: \".5em\",\r\n                }}>\r\n                    <Button \r\n                        type=\"text\" \r\n                        shape=\"circle\" \r\n                        icon={ <LeftOutlined /> }\r\n                        style={{ color: \"#ffffff\" }}\r\n                    />\r\n\r\n                    <Text style={{ color: \"#ffffff\" }}>今日完成：14 / 30</Text>\r\n\r\n                    <span className=\"flex-1\"/>\r\n                </header>\r\n\r\n                <Title className=\"question\" level={3} style={{ color: \"#595959\", marginTop: \".5em\" }}>{ ci.question }</Title>\r\n                    \r\n                <Divider />\r\n\r\n                <div className=\"flex-1 scroll-y\">\r\n                    <ReactMarkdown children={ ci.answer } />\r\n\r\n                    <Text type=\"secondary\" style={{ fontStyle: \"italic\" }}>{ ci.hint }</Text>\r\n                </div>\r\n\r\n                <Space\r\n                    size=\"middle\"\r\n                    direction=\"vertical\"\r\n                    style={{ width: '100%', marginBottom: \"2em\" }}\r\n                >\r\n                    <Button size=\"large\" shape=\"round\" type=\"primary\" block>我知道</Button>\r\n\r\n                    <Button size=\"large\" shape=\"round\" type=\"default\" block>提示一下</Button>\r\n                </Space>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addNewQna() {\r\n        const newQna: QnaItem = {\r\n            quid: genQuid(),\r\n            question: '',\r\n            answer: '',\r\n            hint: '',\r\n        };\r\n        const newItems = this.state.items.slice().concat(newQna);\r\n        this.setState({ \r\n            items: newItems,\r\n            editMeta: false,\r\n            currentItem: newQna,\r\n            itemPreview: makePreview(newQna),\r\n        });\r\n        this.props.set.items = newItems;\r\n    }\r\n\r\n    changeQna(item: QnaItem) {\r\n        const index = this.state.items.findIndex(i => i === item || i.quid === item.quid);\r\n        if (index < 0 || item.quid !== this.state.currentItem?.quid) return;\r\n\r\n        const newItems = this.state.items.slice();\r\n        newItems[index] = item;\r\n        if (this.state.currentItem === item || this.state.currentItem?.quid === item.quid) {\r\n            this.setState({ \r\n                items: newItems, \r\n                currentItem: item, \r\n                itemPreview: makePreview(item),\r\n                isUpdateItemPreview: false,\r\n            });\r\n        } else {\r\n            this.setState({ \r\n                items: newItems,\r\n                isUpdateItemPreview: false,\r\n            });\r\n        }\r\n        this.props.set.items = newItems;\r\n    }\r\n\r\n    editQnaItem(item: QnaItem) {\r\n        this.setState({\r\n            editMeta: false,\r\n            currentItem: item,\r\n            itemPreview: makePreview(item),\r\n        });\r\n    }\r\n\r\n    editMeta(confirm: boolean = true) {\r\n        this.setState({ editMeta: true });\r\n    }\r\n\r\n    setMeta(meta: EditableQnaSetMeta) {\r\n        this.setState(meta);\r\n        Object.assign(this.props.set, meta);\r\n    }\r\n\r\n    save() {\r\n        const s = this.state;\r\n        writeQnaSet({ \r\n            developmentVersion: 1,\r\n            qsuid: s.qsuid,\r\n            version: s.version,\r\n            name: s.name,\r\n            description: s.description,\r\n            items: s.items.slice(),\r\n        });\r\n    }\r\n\r\n    open(file: File) {\r\n        readQnaSet(file, s => this.setState({ \r\n            qsuid: s.qsuid,\r\n            version: s.version,\r\n            name: s.name,\r\n            description: s.description,\r\n            items: s.items, \r\n            currentItem: s.items[0] || null,\r\n            editMeta: false, \r\n        }));\r\n    }\r\n}\r\n\r\nfunction makePreview(item: any): ItemPreview {\r\n    return {\r\n        question: item.question || '',\r\n        answer: item.answer || '',\r\n        hint: item.hint || '',\r\n    };\r\n}\r\n\r\nexport default Editor;\r\n","// 从给定列表中随机选取指定数量不重复的元素，结构列表的长度是指定长度与原始列表长度两者中较小的一个。\r\n// 注：不修改原始列表\r\nfunction randomItems<T>(arr: Array<T>, count: number): Array<T> {\r\n    const items = arr.slice();\r\n    const size = Math.min(count, items.length);\r\n    for (let i = 0; i < size; i++) {\r\n        const j = Math.floor(Math.random() * items.length);\r\n        if (i === j) continue;\r\n        const tmp = items[i];\r\n        items[i] = items[j];\r\n        items[j] = tmp;\r\n    }\r\n    return items.slice(0, size);\r\n}\r\n\r\nexport {\r\n    randomItems,\r\n}","import { Typography, Space, Divider, Button, ButtonProps, Layout } from \"antd\";\r\nimport React, { ReactNode } from \"react\";\r\nimport { QnaItem, QnaSet, UserProgress } from \"./interfaces\";\r\nimport { LeftOutlined } from '@ant-design/icons';\r\nimport { randomItems } from \"./utils/math-utils\";\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\nconst { Text, Title } = Typography;\r\n\r\ninterface ExceiseProps {\r\n    set: QnaSet;\r\n    progress: UserProgress;\r\n    gotoHome: () => void;\r\n}\r\n\r\ninterface ExceiseState {\r\n    finished: Set<number>;\r\n    work: Array<QnaItem>;\r\n    index: number;\r\n    success: boolean,\r\n    prog: number;\r\n    allFinished: boolean,\r\n}\r\n\r\nconst QUESTION_SHOWN = 0;\r\nconst HINT_SHOWN = 1;\r\nconst ANSWER_SHOWN = 2;\r\n\r\nfunction isToday(date: Date) {\r\n    const today = new Date();\r\n    return (\r\n        date.getFullYear() === today.getFullYear() &&\r\n        date.getMonth() === today.getMonth() &&\r\n        date.getDate() === today.getDate()\r\n    );\r\n}\r\n\r\n// 根据当前进度，决定今日任务\r\n// 若有剩余进度则还原，若无则从旧知识点，则分别从已完成与未完成的项目中选取\r\nfunction decideWork(set: QnaSet, progress: UserProgress, newWorkSize: number = 10, oldWorkSize: number = 10): Array<QnaItem> {\r\n    if (progress && \r\n        progress.hasWork && progress.work && progress.work.length > 0 && \r\n        progress.date && isToday(new Date(progress.date))\r\n    ) {\r\n        const map: Map<number, QnaItem> = new Map(set.items.map(item => [item.quid, item]));\r\n        return progress.work.map(w => map.get(w)).filter(w => !!w) as Array<QnaItem>;\r\n    } else {\r\n        const finishedQuids: Set<number> = new Set<number>(progress?.finished || []);\r\n        const unfinishedItems: Array<QnaItem> = [];\r\n        const finishedItems: Array<QnaItem> = [];\r\n        \r\n        for (let item of set.items) {\r\n            (finishedQuids.has(item.quid) ? finishedItems : unfinishedItems).push(item);\r\n        }\r\n\r\n        const oldWork = randomItems(finishedItems, oldWorkSize);\r\n        const newWork = randomItems(unfinishedItems, newWorkSize);\r\n        return oldWork.concat(...newWork);\r\n    }\r\n}\r\n\r\n\r\nexport default class Excise extends React.Component<ExceiseProps, ExceiseState> {\r\n\r\n    constructor(props: ExceiseProps) {\r\n        super(props);\r\n\r\n        const progress = props.progress;\r\n\r\n        const work = decideWork(props.set, progress);\r\n        const index = progress.workCompleteCount || 0;\r\n        \r\n        progress.date = Date.now();\r\n        progress.hasWork = true;\r\n        progress.work = work.map(i => i.quid);\r\n        progress.workCompleteCount = index;\r\n\r\n        this.state = {\r\n            finished: new Set(),\r\n            work,\r\n            index,\r\n            success: false,\r\n            prog: QUESTION_SHOWN,\r\n            allFinished: index >= work.length,\r\n        };\r\n    }\r\n\r\n\r\n    render() {\r\n        let content: ReactNode;\r\n\r\n        const buttonProps: ButtonProps = {\r\n            size: \"large\",\r\n            shape: \"round\",\r\n            block: true,\r\n        };\r\n\r\n        if (this.state.allFinished) {\r\n            content = (\r\n                <div className=\"centerize-container fill-height\">\r\n                    <Space direction=\"vertical\">\r\n                        <Title>{ this.props.progress.finished.length >= this.props.set.items.length ? \"该题集已全部答完\" : \"今日任务完成！\"}</Title>\r\n\r\n                        <Button {...buttonProps} type=\"primary\" onClick={ this.props.gotoHome }>返回</Button>\r\n                    </Space>\r\n                </div>\r\n            )\r\n        } else {\r\n            const ci = this.state.work[this.state.index];\r\n            if (!ci) {\r\n                content = (<div className=\"centerize-container fill-height\">Something goes wrong</div>);\r\n            } else {\r\n\r\n                content = (\r\n                    <div className=\"d-flex flex-column fill-height\">\r\n                        <Title className=\"question\" level={3} style={{ color: \"#595959\", marginTop: \".5em\" }}>{ ci.question }</Title>\r\n                    \r\n                        <Divider />\r\n\r\n                        <div className=\"flex-1 scroll-y\">\r\n                            { this.state.prog >= ANSWER_SHOWN ? (<ReactMarkdown children={ ci.answer } />) : null }\r\n\r\n                            { this.state.prog >= HINT_SHOWN ? (<Text type=\"secondary\" style={{ fontStyle: \"italic\" }}>{ ci.hint }</Text>) : null }\r\n                        </div>\r\n\r\n                        <Space\r\n                            size=\"middle\"\r\n                            direction=\"vertical\"\r\n                            style={{ width: '100%', marginBottom: \"2em\" }}\r\n                        >\r\n                            {\r\n                                (this.state.prog < ANSWER_SHOWN)\r\n                                    ? (<Button {...buttonProps} type=\"primary\" onClick={ () => this.setState({ prog: ANSWER_SHOWN, success: true }) }>我知道</Button>)\r\n                                    : (<Button {...buttonProps} type=\"primary\" onClick={ this.nextQuestion.bind(this) }>下一题</Button>)\r\n                            }\r\n\r\n                            { \r\n                                (this.state.prog < HINT_SHOWN) ? (<Button {...buttonProps} disabled={ !!!ci.hint } onClick={ () => this.setState({ prog: HINT_SHOWN }) }>提示一下</Button>) : \r\n                                (this.state.prog < ANSWER_SHOWN) ? (<Button {...buttonProps} onClick={ () => this.setState({ prog: ANSWER_SHOWN, success: false }) } danger>显示答案</Button>) :\r\n                                (this.state.success) ? (<Button {...buttonProps} onClick={ () => this.setState({ success: false }) }>标为答错</Button>) :\r\n                                null\r\n                            }\r\n                            \r\n                        </Space>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Layout className=\"preview fill-height d-flex flex-column\" >\r\n                <Layout.Header className=\"d-flex align-items-center\" style={{\r\n                    background: \"#1890ff\",\r\n                    padding: \".5em\",\r\n                    height: \"3em\"\r\n                }}>\r\n                    <Button \r\n                        type=\"text\" \r\n                        shape=\"circle\" \r\n                        icon={ <LeftOutlined /> }\r\n                        style={{ color: \"#ffffff\" }}\r\n                        onClick={ this.props.gotoHome }\r\n                    />\r\n\r\n                    <Text style={{ color: \"#ffffff\" }}>\r\n                        今日完成：{ this.state.index + (this.state.success ? 1 : 0) } / { this.state.work.length }\r\n                    </Text>\r\n\r\n                    <span className=\"flex-1\"/>\r\n                </Layout.Header>\r\n\r\n                <Layout.Content className=\"fill-height\">{ content }</Layout.Content>\r\n            </Layout>\r\n        );\r\n    }\r\n\r\n    nextQuestion() {\r\n        const ci = this.state.work[this.state.index];\r\n        if (this.state.success) {\r\n            const nextIndex = this.state.index + 1;\r\n            if (nextIndex >= this.state.work.length) {\r\n                this.setState({\r\n                    finished: this.state.finished.add(ci.quid),\r\n                    success: false,\r\n                    index: nextIndex,\r\n                    prog: QUESTION_SHOWN,\r\n                    allFinished: true,\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    finished: this.state.finished.add(ci.quid),\r\n                    success: false,\r\n                    index: nextIndex,\r\n                    prog: QUESTION_SHOWN,\r\n                });\r\n            }\r\n            this.onComplete(ci, nextIndex);\r\n        } else {\r\n            const newWork = this.state.work.slice();\r\n            newWork.splice(this.state.index, 1);\r\n            newWork.push(ci);\r\n            this.setState({\r\n                work: newWork,\r\n                finished: this.state.finished.add(ci.quid),\r\n                success: false,\r\n                prog: QUESTION_SHOWN,\r\n            });\r\n        }\r\n    }\r\n\r\n    onComplete(item: QnaItem, workCompleteCount: number) {\r\n        const p = this.props.progress;\r\n        p.finished.push(item.quid);\r\n        p.finished = Array.from(new Set<number>(p.finished));\r\n        p.workCompleteCount = workCompleteCount;\r\n    }\r\n}","import { Button, Space, Typography } from 'antd';\r\n\r\nexport default function ErrorPanel({ error, gotoHome }: { error: string, gotoHome: () => void }) {\r\n    return (\r\n        <Space direction=\"vertical\" className=\"fill centerize-container\">\r\n            <Typography.Text type=\"danger\">{ error }</Typography.Text>\r\n\r\n            <Button shape=\"round\" type=\"primary\" onClick={ gotoHome }>返回</Button>\r\n        </Space>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport Home, { DataModifier } from './Home';\nimport Editor from './Editor';\nimport Excise from './Excise';\nimport { QnaSet, QnaSetInfo, UserProgress, UserProgressInfo } from './interfaces';\nimport { \n  extractQnaSetInfo, \n  extractUserProgressInfo,\n  addQnaSet,\n  addUserProgress,\n  getQnaSet,\n  getUserProgress,\n  removeQnaSet,\n  removeUserProgress,\n  getLoadedQnaSets,\n  getLoadedUserProgresses,\n  loadInfo,\n  uid2str,\n  saveInfo,\n  saveAll,\n} from './utils/data-manager';\nimport ErrorPanel from './ErrorPanel';\n\ninterface AppProp { }\n\ntype ContentType = \"home\" | \"editor\" | \"excise\";\n\ninterface AppState {\n  content: ContentType;\n  sets: Array<QnaSetInfo>;\n  progresses: Array<UserProgressInfo>;\n  editQnaSet: QnaSet | null;\n  runProgress: UserProgress | null;\n}\n\n\nclass App extends React.Component<AppProp, AppState> implements DataModifier {\n\n  constructor(props: any) {\n    super(props);\n\n    const info = loadInfo();\n\n    this.state = { \n      content: \"home\",\n      sets: info.sets,\n      progresses: info.progresses,\n      editQnaSet: null,\n      runProgress: null,\n    };\n  }\n\n  addQnaSet(set: QnaSet, thenEdit: boolean = true): void {\n    if (this.state.sets.find(s => s.qsuid === set.qsuid)) return;\n    addQnaSet(set);\n    const newState = { \n      sets: this.state.sets.slice().concat(extractQnaSetInfo(set)),\n      content: thenEdit ? \"editor\" : this.state.content,\n      editQnaSet: thenEdit ? set : null,\n    };\n    this.setState(newState);\n  }\n\n  removeQnaSet(set: QnaSetInfo): void {\n    if (!window.confirm(\"确定删除\" + set.name + \"#\" + uid2str(set.qsuid) + \"的进度？\\n这将导致依赖其的进度失效！\")) return;\n\n    removeQnaSet(set.qsuid);\n    const newSets = this.state.sets.slice();\n    const index = newSets.findIndex(s => s.qsuid === set.qsuid);\n    if (index >= 0) {\n      newSets.splice(index, 1);\n      this.setState({ sets: newSets });\n    }\n  }\n\n  editQnaSet(set: QnaSetInfo): void {\n    if (set) {\n      this.setState({\n        content: \"editor\",\n        editQnaSet: getQnaSet(set.qsuid) || null,\n      });\n    }\n  }\n\n  addProgress(progress: UserProgress, thenStart?: boolean | undefined): void {\n    if (this.state.progresses.find(p => p.upuid === progress.upuid)) return;\n\n    addUserProgress(progress);\n    const pi = extractUserProgressInfo(progress);\n    this.setState({\n      progresses: this.state.progresses.concat(pi),\n      content: thenStart ? \"excise\" : this.state.content,\n      runProgress: thenStart ? progress : null,\n    });\n  }\n  \n  removeProgress(progress: UserProgressInfo): void {\n    if (!window.confirm(\"确定删除\" + uid2str(progress.upuid) + \"的进度？\")) return;\n    removeUserProgress(progress.upuid);\n    const newProgresses = this.state.progresses.slice();\n    const index = newProgresses.findIndex(p => p.upuid === progress.upuid);\n    if (index >= 0) {\n      newProgresses.splice(index, 1);\n      this.setState({ progresses: newProgresses });\n    }\n  }\n\n  continueProgress(progress: UserProgressInfo): void {\n    this.setState({\n      content: \"excise\",\n      runProgress: getUserProgress(progress.upuid),\n    });\n  }\n\n  setContentType(contentType: ContentType) {\n    this.setState({ content: contentType });\n  }\n\n  resetProgressWork(progressInfo: UserProgressInfo): void {\n    const progress = getUserProgress(progressInfo.upuid);\n    \n    if (progress) {\n      progress.hasWork = false;\n      progress.work = [];\n      progress.workCompleteCount = 0;\n\n      progressInfo.qsuid = progress.qsuid;\n      progressInfo.finishedCount = progress.finished.length;\n      progressInfo.hasWork = !!progress.work && progress.work.length > 0;\n      progressInfo.date = progress.date;\n      progressInfo.lastModified = progress.date || 0;\n      progressInfo.workCompleteCount = progress.workCompleteCount;\n\n      this.setState({\n        content: \"excise\",\n        runProgress: progress,\n      });\n    }\n  }\n\n  gotoHome = () => {\n    getLoadedQnaSets().forEach(set => {\n      const setInfo = this.state.sets.find(s => s.qsuid === set.qsuid);\n      if (setInfo) {\n        setInfo.name = set.name;\n        setInfo.version = set.version;\n        setInfo.itemCount = set.items.length;\n        setInfo.description = set.description;\n      } else {\n        this.state.sets.push(extractQnaSetInfo(set));\n      }\n    });\n    getLoadedUserProgresses().forEach(progress => {\n      const progressInfo = this.state.progresses.find(p => p.upuid === progress.upuid);\n      if (progressInfo) {\n        progressInfo.qsuid = progress.qsuid;\n        progressInfo.finishedCount = progress.finished.length;\n        progressInfo.hasWork = !!progress.work && progress.work.length > 0;\n        progressInfo.date = progress.date;\n        progressInfo.lastModified = progress.date || 0;\n        progressInfo.workCompleteCount = progress.workCompleteCount;\n      } else {\n        this.state.progresses.push(extractUserProgressInfo(progress));\n      }\n    });\n    this.setState({ content: \"home\" });\n  };\n\n  render() {\n\n    let content = null;\n    switch(this.state.content) {\n      case \"home\": content = (\n        <Home \n          dataModifier={ this }\n          progresses={ this.state.progresses }\n          sets={ this.state.sets }\n          saveData={ this.saveData.bind(this) }\n        />\n      ); break;\n      case \"editor\": {\n        const set = this.state.editQnaSet;\n        if (!set) return this.renderError(\"未知题集\");\n        content = (\n          <Editor \n            set={ set }\n            gotoHome={ this.gotoHome }\n          />\n        ); \n      }; break;\n      case \"excise\": {\n        const progress = this.state.runProgress;\n        if (!progress) return this.renderError(\"未知进度\");\n        const set = getQnaSet(progress.qsuid);\n        if (!set) return this.renderError(\"未知题集：\" + progress.qsuid);\n\n        content = (\n          <Excise \n            gotoHome={ this.gotoHome } \n            set={ set } \n            progress={ progress }\n          />\n        );\n      }; break;\n    }\n    return content;\n  }\n\n  renderError(error: string) {\n    return (\n      <ErrorPanel \n        error={ error } \n        gotoHome={ this.gotoHome } \n      />\n    );\n  }\n\n  componentWillUnmount() {\n    this.saveData();\n  }\n\n  saveData() {\n    saveInfo({\n      sets: this.state.sets,\n      progresses: this.state.progresses,\n    });\n    saveAll();\n  }\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}