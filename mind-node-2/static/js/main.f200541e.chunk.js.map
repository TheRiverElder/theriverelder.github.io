{"version":3,"sources":["util/javascript-extension.ts","util/ui.ts","components/RadioButton.tsx","components/Icon.tsx","components/MindNodeCard.tsx","constants.ts","components/MindNodeInfo.tsx","util/mathematics.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toClassName","obj","arr","key","Object","prototype","hasOwnProperty","call","element","push","join","getMapValue","map","handler","value","get","getRect","ref","box","current","getBoundingClientRect","x","y","width","height","RadioButton","props","className","border","checked","onClick","onChange","children","Icon","rowSize","size","alt","name","src","style","MindNodeCard","onHandleMouseDown","e","button","stopPropagation","onDragStart","node","uid","selfRef","React","createRef","this","onRectUpdate","position","text","anchor","anchorX","anchorY","dragging","linking","choosen","fixedX","fixedY","left","top","onMouseDown","split","it","i","onClickLinkButton","onClickChooseButton","Component","MindNodeInfo","getBrief","nodes","state","inputingText","outPorts","inPorts","setText","target","length","setState","onUpdate","vec2FromAngle","angle","modulo","Number","isNaN","Math","cos","sin","vec2Add","vs","reduce","p","v","vec2Minus","v1","v2","vec2Normalize","atan2","getBezierPointAndAngle","t","controlPoints","cps","nextCPs","p0X","p0Y","p1X","p1Y","finalP0X","finalP0Y","finalP1X","finalP1Y","deltaX","deltaY","finalPoint","finalAngle","App","mounted","redrawFlag","redrawLoop","drawLines","requestAnimationFrame","nodeCardRects","Map","origin","resetView","poolRef","canvas","canvasRef","forceUpdate","hideNodeInfoView","editingNodeUid","createNode","uidCounter","s","offset","addNode","linkingNodeUid","onClickNode","event","ctrlKey","toggleChooseNode","mouseState","nativeEvent","onSectionChooseStart","onDragPoolStart","onMouseMove","onDragNodeMove","onDragPool","onSectionChooseMove","onMouseUp","onDragNodeEnd","onDragPoolEnd","onSectionChooseEnd","onMouseLeave","draggingNodeStartPositions","dragNodeStartMousePosition","onDragNodeStart","screenX","screenY","Array","from","choosenNodeUids","forEach","set","deltaMousePosition","newNodePosition","updateNode","entries","updateStateNodes","clear","dragPoolStartOffset","dragPoolStartMousePosition","load","pool","JSON","parse","dataString","alert","save","buildPool","stringify","console","log","Set","setNodeChoosen","chooseNode","unchooseNode","unchooseAllNodes","sectionChooseStartMousePosition","section","window","addEventListener","removeEventListener","renderTopBar","getAnchor","has","rect","linkNode","renderSection","renderNodeInfo","renderBottomBar","canvasAndContext","context","getContext","get2dContext","g","clearRect","strokeStyle","fillStyle","lineWidth","fix","getPoolFix","getPoint","angleCache","getAngle","NaN","nodePosition","inRelative","inNodeUid","inNode","outRelative","outNodeUid","outNode","values","sourcePoint","portUid","targetNode","targetPoint","controlHandleLength","sqrt","sourceAngle","targetAngle","controlPoint1","controlPoint2","centerPoint","centerAngle","beginPath","moveTo","bezierCurveTo","stroke","lineTo","PI","fill","placeholder","editingNode","delete","sourceNode","add","deltaOffset","clientX","clientY","mousePosition","sort","sectionLeft","sectionRight","sectionTop","sectionBottom","newChoosenNodeUids","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f200541e.chunk.js","sourcesContent":["// 将一个对象转换成className字符串\r\nexport function toClassName(obj: { [key: string]: (boolean | string) }): string {\r\n    const arr: Array<string> = [];\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            const element = obj[key];\r\n            if (typeof element === 'string') {\r\n                arr.push(element);\r\n            } else {\r\n                if (element) {\r\n                    arr.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return arr.join(' ');\r\n}\r\n\r\nexport function getMapValue<K, V>(map: Map<K, V>, key: K, handler: (value: V, key: K) => void) {\r\n    const value = map.get(key);\r\n    if (value) {\r\n        handler(value, key);\r\n    }\r\n}","import { RefObject } from \"react\";\r\nimport { Rect } from \"../interfaces\";\r\nimport { Vec2 } from \"./mathematics\";\r\n\r\nexport function get2dContext(ref: RefObject<HTMLCanvasElement>): [HTMLCanvasElement, CanvasRenderingContext2D] | null {\r\n    const canvas = ref.current;\r\n    if (!canvas) return null;\r\n    const context = canvas.getContext('2d');\r\n    if (!context) return null;\r\n    return [canvas, context];\r\n}\r\n\r\nexport function getRect<T extends HTMLElement>(ref: RefObject<T>): Rect {\r\n    const box = ref.current?.getBoundingClientRect();\r\n    return {\r\n        x: box?.x || 0,\r\n        y: box?.y || 0,\r\n        width: box?.width || 0,\r\n        height: box?.height || 0,\r\n    };\r\n}\r\n\r\nexport function getPosition(rect?: Rect): Vec2 {\r\n    return [rect?.x || 0, rect?.y || 0];\r\n}","import { ReactNode } from 'react';\r\nimport '../styles/RadioButton.css';\r\nimport { toClassName } from '../util/javascript-extension';\r\n\r\ninterface RadioButtonProps {\r\n    children?: ReactNode;\r\n    border?: boolean;\r\n    value: boolean;\r\n    onChange: (value: boolean) => void;\r\n}\r\n \r\nfunction RadioButton(props: RadioButtonProps) {\r\n    return (\r\n        <div \r\n            className={ toClassName({ \"RadioButton\": true, border: !!props.border, checked: props.value }) }\r\n            onClick={ () => props.onChange(!props.value) }    \r\n        >\r\n            { props.children }\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default RadioButton;","\r\ninterface IconProps {\r\n    name: string;\r\n    size?: number | string;\r\n}\r\n \r\nfunction Icon(props: IconProps) { \r\n    const rowSize = props.size || 'auto';\r\n    const size = typeof rowSize === 'number' ? rowSize + 'px' : rowSize;\r\n    return (\r\n        <img \r\n            alt={ props.name }\r\n            src={ 'icons/' + props.name + '.svg' }\r\n            style={{\r\n                width: size,\r\n                height: size,\r\n            }}\r\n        />\r\n    );\r\n}\r\n \r\nexport default Icon;","import React from \"react\";\r\nimport { Component, MouseEvent, RefObject } from \"react\";\r\nimport { Vec2 } from \"../util/mathematics\";\r\nimport \"../styles/MindNodeCard.css\";\r\nimport { MindNode, Rect } from \"../interfaces\";\r\nimport { MOUSE_BUTTON_LEFT } from \"../constants\";\r\nimport { toClassName } from \"../util/javascript-extension\";\r\nimport { getRect } from \"../util/ui\";\r\nimport RadioButton from \"./RadioButton\";\r\nimport Icon from \"./Icon\";\r\n\r\ninterface MindNodeCardProps {\r\n    anchor: Vec2;\r\n    node: MindNode;\r\n    dragging: boolean;\r\n    linking: boolean;\r\n    choosen: boolean;\r\n    onClick: (uid: number, e: MouseEvent) => void;\r\n    onDragStart: (uid: number, e: MouseEvent) => void;\r\n    onRectUpdate: (uid: number, rect: Rect) => void;\r\n    onClickLinkButton: (uid: number) => void;\r\n    onClickChooseButton: (uid: number, choosen: boolean) => void;\r\n}\r\n \r\nclass MindNodeCard extends Component<MindNodeCardProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    render() { \r\n        const { \r\n            node: { \r\n                position: [x, y], \r\n                text,\r\n            }, \r\n            anchor: [anchorX, anchorY], \r\n            dragging,\r\n            linking,\r\n            choosen, \r\n        } = this.props;\r\n\r\n        // 实际的坐标\r\n        const fixedX = x + anchorX;\r\n        const fixedY = y + anchorY;\r\n        \r\n        return (\r\n            <div \r\n                className={ toClassName({ \"MindNodeCard\": true, linking, dragging, choosen }) } \r\n                ref={ this.selfRef }\r\n                style={{\r\n                    left: `${fixedX}px`,\r\n                    top: `${fixedY}px`,\r\n                }}\r\n                onClick={ e => this.props.onClick(this.props.node.uid, e) }\r\n            >\r\n                <div\r\n                    className=\"handle\"\r\n                    onMouseDown={ this.onHandleMouseDown }\r\n                />\r\n\r\n                <div className=\"wrapper\">\r\n                    <div className=\"text\">\r\n                        { text.split(\"\\n\").map((it, i) => (<p key={ i }>{ it }</p>)) }\r\n                    </div>\r\n                    \r\n                    <div className=\"tool-bar\">\r\n                        <RadioButton\r\n                            key={ linking ? 11 : 10 }\r\n                            value={ linking }\r\n                            onChange={ () => this.props.onClickLinkButton(this.props.node.uid) }\r\n                        >\r\n                            <Icon name=\"link\" size=\"80%\"/>\r\n                        </RadioButton>\r\n                        \r\n                        <RadioButton\r\n                            key={ choosen ? 1 : 0 }\r\n                            value={ choosen }\r\n                            onChange={ it => this.props.onClickChooseButton(this.props.node.uid, it) }\r\n                        >\r\n                            <Icon name=\"checked\" size=\"80%\"/>\r\n                        </RadioButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onHandleMouseDown = (e: MouseEvent) => {\r\n        if (e.button === MOUSE_BUTTON_LEFT) {\r\n            e.stopPropagation();\r\n            this.props.onDragStart(this.props.node.uid, e);\r\n        }\r\n    }\r\n\r\n    //#region 拖拽相关\r\n\r\n    private selfRef: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //#endregion\r\n}\r\n \r\nexport default MindNodeCard;","export const MOUSE_BUTTON_LEFT = 0;\r\nexport const MOUSE_BUTTON_MIDDLE = 1;\r\nexport const MOUSE_BUTTON_RIGHT = 2;","import { Component } from \"react\";\r\nimport { MindNode } from \"../interfaces\";\r\nimport \"../styles/MindNodeInfo.css\";\r\n\r\ninterface MindNodeInfoProps {\r\n    node: MindNode;\r\n    nodes: Map<number, MindNode>;\r\n    onUpdate: (node: MindNode) => void;\r\n}\r\n \r\ninterface MindNodeInfoState {\r\n    inputingText: string;\r\n}\r\n \r\nclass MindNodeInfo extends Component<MindNodeInfoProps, MindNodeInfoState> {\r\n    constructor(props: MindNodeInfoProps) {\r\n        super(props);\r\n        this.state = {\r\n            inputingText: props.node.text,\r\n        };\r\n    }\r\n    render() { \r\n        const { uid, position, outPorts, inPorts } = this.props.node;\r\n        return (\r\n            <div className=\"MindNodeInfo\">\r\n                <div className=\"top-bar\"></div>\r\n\r\n                <div className=\"content\">\r\n                    <p>\r\n                        <span className=\"title\">UID：</span>\r\n                        <span className=\"text\">#{ uid }</span>\r\n                    </p>\r\n                    <p>\r\n                        <span className=\"title\">位置：</span>\r\n                        <span className=\"text\">({ position.join(\", \") })</span>\r\n                    </p>\r\n\r\n                    <p><span className=\"title\">内容：</span></p>\r\n                    <textarea\r\n                        value={ this.state.inputingText }\r\n                        onChange={ e => this.setText(e.target.value) }\r\n                    />\r\n\r\n                    <p className=\"title\">出线（{outPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        { outPorts.map(uid => (<li key={ uid } className=\"snapshot\">{ this.getBrief(uid) }</li>)) }\r\n                    </ol>\r\n\r\n                    <p className=\"title\">入线（{inPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        { inPorts.map(uid => (<li key={ uid } className=\"snapshot\">{ this.getBrief(uid) }</li>)) }\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setText(text: string) {\r\n        this.setState(() => ({ inputingText: text }));\r\n        const node: MindNode = {\r\n            ...this.props.node,\r\n            text,\r\n        };\r\n        this.props.onUpdate(node);\r\n    }\r\n\r\n    getBrief = (uid: number) => {\r\n        const node = this.props.nodes.get(uid);\r\n        if (node) {\r\n            return '#' + uid + '：' + node.text;\r\n        } else {\r\n            return '#' + uid;\r\n        }\r\n    }\r\n}\r\n \r\nexport default MindNodeInfo;","\r\nexport type Vec2 = [number, number];\r\nexport const X = 0;\r\nexport const Y = 1;\r\n\r\nexport function vec2FromAngle(angle: number, modulo: number = 1): Vec2 {\r\n    if (Number.isNaN(angle)) return [0, 0];\r\n    return [Math.cos(angle) * modulo, Math.sin(angle) * modulo]; \r\n}\r\n\r\nexport function vec2Add(...vs: Vec2[]): Vec2 {\r\n    return [vs.reduce((p, v) => p + v[0], 0), vs.reduce((p, v) => p + v[1], 0)];\r\n}\r\n\r\nexport function vec2Minus(v1: Vec2, v2: Vec2): Vec2 {\r\n    return [v1[X] - v2[X], v1[Y] - v2[Y]];\r\n}\r\n\r\nexport function vec2Normalize(v: Vec2): Vec2 {\r\n    if (v[0] === 0 && v[1] === 0) return [0, 0];\r\n    const angle = Math.atan2(v[1], v[0]);\r\n    return [Math.cos(angle), Math.sin(angle)];\r\n}\r\n\r\nexport function vec2Modulo(v: Vec2): number {\r\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\r\n}\r\n\r\nexport function vec2Angle(v: Vec2): number {\r\n    return Math.atan2(v[1], v[0]);\r\n}\r\n\r\nexport function vec2Multiply(v: Vec2, n: number): Vec2 {\r\n    return [v[0] * n, v[1] * n];\r\n}\r\n\r\nexport class UidGenerator {\r\n\r\n    public uidCounter: number = 0;\r\n\r\n    constructor(uidCounter: number = 0) {\r\n        this.uidCounter = uidCounter;\r\n    }\r\n\r\n    generate() {\r\n        return this.uidCounter++;\r\n    }\r\n\r\n}\r\n\r\n// return [pointPosition, angle]\r\nexport function getBezierPointAndAngle(t: number, ...controlPoints: Vec2[]): [Vec2, number] {\r\n    if (controlPoints.length <= 1) return [controlPoints[0], 0];\r\n\r\n    let cps: Vec2[] = controlPoints;\r\n    while (cps.length > 2) {\r\n        const nextCPs: Vec2[] = [];\r\n        for (let i = 1; i < cps.length; i++) {\r\n            const [p0X, p0Y] = cps[i - 1];\r\n            const [p1X, p1Y] = cps[i];\r\n            nextCPs.push([p0X + (p1X - p0X) * t, p0Y + (p1Y - p0Y) * t]);\r\n        }\r\n        cps = nextCPs;\r\n    }\r\n    const [finalP0X, finalP0Y] = cps[0];\r\n    const [finalP1X, finalP1Y] = cps[1];\r\n    const deltaX = finalP1X - finalP0X;\r\n    const deltaY = finalP1Y - finalP0Y;\r\n    const finalPoint: Vec2 = [finalP0X + deltaX * t, finalP0Y + deltaY * t];\r\n    const finalAngle = Math.atan2(deltaY, deltaX);\r\n    return [finalPoint, finalAngle];\r\n}","import React, { Component, MouseEvent, RefObject } from 'react';\nimport './App.css';\nimport MindNodeCard from './components/MindNodeCard';\nimport MindNodeInfo from './components/MindNodeInfo';\nimport { MOUSE_BUTTON_LEFT, MOUSE_BUTTON_MIDDLE } from './constants';\nimport { MindNode, MindNodePool, Rect } from './interfaces';\nimport { getMapValue } from './util/javascript-extension';\nimport { getBezierPointAndAngle, Vec2, vec2Add, vec2FromAngle, vec2Minus, vec2Modulo, vec2Normalize, X, Y } from './util/mathematics';\nimport { get2dContext, getPosition, getRect } from './util/ui';\n\nexport interface AppProps {\n\n}\n\nexport interface AppState {\n    uidCounter: number;\n    nodes: Array<MindNode>;\n    offset: Vec2;\n    editingNodeUid: number | null;\n    mouseState: 'dragNode' | 'dragPool' | 'chooseNodes' | null; \n    section: Rect | null;\n    dataString: string;\n}\n\n\nclass App extends Component<AppProps, AppState> {\n\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            uidCounter: 0,\n            nodes: [],\n            offset: [0, 0],\n            editingNodeUid: null,\n            mouseState: null,\n            section: null,\n            dataString: '',\n        };\n    }\n\n\n    private mounted = false;\n\n    componentDidMount() {\n        this.mounted = true;\n        this.updateStateNodes();\n        this.drawLines();\n        window.addEventListener('resize', this.resetView);\n        this.resetView();\n        this.redrawLoop();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.resetView);\n        this.mounted = false;\n    }\n\n    componentDidUpdate() {\n        this.redrawFlag = true;\n    }\n\n    private redrawFlag = false;\n    redrawLoop = () => {\n        if (this.mounted) { \n            if (this.redrawFlag) {\n                this.drawLines();\n                this.redrawFlag = false;\n            }\n            requestAnimationFrame(this.redrawLoop);\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\" >\n                {/* 顶部工具栏 */}\n                { this.renderTopBar() }\n\n                {/* 实际池子 */}\n                <div \n                    className={ \"node-pool\" + (this.draggingNodeStartPositions.size ? \" dragging\" : \"\")}\n                    ref={ this.poolRef }\n                    onMouseDown={ this.onMouseDown }\n                    onMouseMove={ this.onMouseMove }\n                    onMouseUp={ this.onMouseUp }\n                    onMouseLeave={ this.onMouseLeave }\n                >\n                    <canvas ref={ this.canvasRef } />\n\n                    {\n                        this.state.nodes.map(it => (\n                            <MindNodeCard\n                                key={ it.uid }\n                                anchor={ this.getAnchor() }\n                                node={ it }\n                                linking={ this.linkingNodeUid === it.uid }\n                                choosen={ this.choosenNodeUids.has(it.uid) }\n                                dragging={ this.draggingNodeStartPositions.has(it.uid) }\n                                onClick={ this.onClickNode }\n                                onDragStart={ this.onDragNodeStart }\n                                onRectUpdate={ (uid, rect) => this.nodeCardRects.set(uid, rect) }\n                                onClickLinkButton={ (uid) => this.linkNode(uid) }\n                                onClickChooseButton={ this.setNodeChoosen }\n                            />\n                        ))\n                    }\n\n                    { this.renderSection() }\n                    \n                    { this.renderNodeInfo() }\n                </div>\n\n                {/* 底部状态栏 */}\n                { this.renderBottomBar() }\n            </div>\n        );\n    }\n\n    // 每个节点卡片的矩形信息，仅保存运行时的UI信息，位置与尺寸\n    private readonly nodeCardRects: Map<number, Rect> = new Map();\n    // 所有节点列表，是实际的数据\n    private readonly nodes: Map<number, MindNode> = new Map();\n\n    //#region UI相关\n\n    /*\n     * O->A->N\n     * ----    :Origin to Anchor: Offset\n     *    ---- :Anchor to Node: Position (of node)\n     */\n\n    // 原点，应该是pool组件的中心点\n    private origin: Vec2 = [0, 0];\n\n    resetView = () => {\n        const box = this.poolRef.current?.getBoundingClientRect();\n        if (!box) return;\n        \n\n        this.origin = [box.width / 2, box.height / 2];\n        const canvas = this.canvasRef.current;\n        if (canvas) {\n            canvas.width = box.width;\n            canvas.height = box.height;\n        }\n        this.forceUpdate();\n    }\n\n    getAnchor(): Vec2 {\n        return vec2Add(this.origin, this.state.offset);\n    }\n\n    getPoolFix(): Vec2 {\n        return getPosition(getRect(this.poolRef));\n    }\n    \n    // 池子UI组件\n    private poolRef: RefObject<HTMLDivElement> = React.createRef();\n    // 连接线的画板UI组件\n    private canvasRef: RefObject<HTMLCanvasElement> = React.createRef();\n\n    hideNodeInfoView = () => this.setState(() => ({ editingNodeUid: null }));\n\n    drawLines() {\n        // console.log(\"drawLines\");\n        const canvasAndContext = get2dContext(this.canvasRef);\n        if (!canvasAndContext) {\n            console.log(\"Invalid canvas\");\n            return;\n        }\n        const [canvas, g] = canvasAndContext;\n\n        g.clearRect(0, 0, canvas.width, canvas.height);\n        // 开始画线\n        g.strokeStyle = \"#808080\";\n        g.fillStyle = \"#808080\";\n        g.lineWidth = 3;\n        // const anchor = this.getAnchor();\n        // 修正量，是画布的client位置\n        const fix: Vec2 = this.getPoolFix();\n\n        const getPoint: (node: MindNode) => Vec2 = (node: MindNode) => {\n            const rect = this.nodeCardRects.get(node.uid);\n            if (rect) {\n                const { x, y, width, height } = rect;\n                const primative: Vec2 = [x + width / 2, y + height / 2];\n                return vec2Minus(primative, fix);\n            }\n            return [0, 0];\n        };\n\n        const nodes = this.nodes;\n        const angleCache = new Map<number, number>();\n        const getAngle: (node: MindNode) => number = (node: MindNode) => {\n            if (angleCache.has(node.uid)) return angleCache.get(node.uid) || NaN;\n\n            const nodePosition = getPoint(node);\n\n            let inRelative: Vec2 = [0, 0];\n            for (const inNodeUid of node.inPorts) {\n                const inNode = nodes.get(inNodeUid);\n                if (!inNode) continue;\n                inRelative = vec2Add(inRelative, vec2Normalize(vec2Minus(nodePosition, getPoint(inNode))));\n            }\n            inRelative = vec2Normalize(inRelative);\n\n            let outRelative: Vec2 = [0, 0];\n            for (const outNodeUid of node.outPorts) {\n                const outNode = nodes.get(outNodeUid);\n                if (!outNode) continue;\n                outRelative = vec2Add(outRelative, vec2Normalize(vec2Minus(getPoint(outNode), nodePosition)));\n            }\n            outRelative = vec2Normalize(outRelative);\n\n            // console.log(\"uid\", node.uid);\n            // console.log(\"inRelative\", inRelative);\n            // console.log(\"outRelative\", outRelative);\n\n            const finalPoint = vec2Add(inRelative, outRelative);\n            const angle = Math.atan2(finalPoint[1], finalPoint[0]);\n\n            angleCache.set(node.uid, angle);\n            return angle;\n        };\n\n        for (const node of Array.from(this.nodes.values())) {\n            const sourcePoint = getPoint(node);\n            for (const portUid of node.outPorts) {\n                const targetNode = this.nodes.get(portUid);\n                if (!targetNode) continue;\n\n                const targetPoint = getPoint(targetNode);\n                const controlHandleLength = vec2Modulo(vec2Minus(targetPoint, sourcePoint))/ 3;\n                const sourceAngle = getAngle(node);\n                const targetAngle = getAngle(targetNode);\n\n                const controlPoint1 = vec2Add(sourcePoint, vec2FromAngle(sourceAngle, controlHandleLength));\n                const controlPoint2 = vec2Minus(targetPoint, vec2FromAngle(targetAngle, controlHandleLength));\n\n                const controlPoints: Vec2[] = [sourcePoint, controlPoint1, controlPoint2, targetPoint];\n\n                const [centerPoint, centerAngle] = getBezierPointAndAngle(0.55, ...controlPoints);\n\n\n                g.beginPath();\n                g.moveTo(...sourcePoint);\n                g.bezierCurveTo(...controlPoint1, ...controlPoint2, ...targetPoint);\n                g.stroke();\n                g.beginPath();\n                g.moveTo(...vec2Add(centerPoint, vec2FromAngle(centerAngle, g.lineWidth * 3)));\n                g.lineTo(...vec2Add(centerPoint, vec2FromAngle(centerAngle + 0.8 * Math.PI, g.lineWidth * 3)));\n                g.lineTo(...vec2Add(centerPoint, vec2FromAngle(centerAngle - 0.8 * Math.PI, g.lineWidth * 3)));\n                g.fill();\n\n                // g.beginPath();\n                // g.moveTo(...sourcePoint);\n                // g.lineTo(...targetPoint);\n                // g.stroke();\n            }\n        }\n    }\n\n    renderTopBar() {\n        return (\n            <div className=\"top-bar\">\n                <button onClick={ this.createNode }>新增</button>\n                <button onClick={ this.save }>保存</button>\n                <button onClick={ this.load }>载入</button>\n                <button onClick={ this.unchooseAllNodes }>取消选择</button>\n                <textarea\n                    value={ this.state.dataString }\n                    placeholder=\"在此输入/输出数据\"\n                    onChange={ e => this.setState(() => ({ dataString: e.target.value })) }\n                />\n            </div>\n        )\n    }\n\n    renderBottomBar() {\n        return (\n            <div className=\"bottom-bar\">\n                <span className=\"piece\">总节点数：{ this.state.nodes.length }</span>\n                <span className=\"piece\">选中节点数：{ this.choosenNodeUids.size }</span>\n            </div>\n        )\n    }\n\n    renderNodeInfo() {\n        const editingNode = (this.state.editingNodeUid !== null) ? (this.nodes.get(this.state.editingNodeUid)) : null;\n        if (!editingNode) return null;\n\n        return (\n            <div className=\"node-info\">\n                <button className=\"icon\" onClick={ this.hideNodeInfoView }>&gt;</button>\n                <MindNodeInfo\n                    key={ editingNode.uid }\n                    node={ editingNode }\n                    nodes={ this.nodes }\n                    onUpdate={ node => this.updateNode(node) }\n                />\n            </div>\n        );\n    }\n\n    renderSection() {\n        const { section } = this.state;\n        return section ? (\n            <div \n                className=\"section\"\n                style={{\n                    left: section.x + 'px',\n                    top: section.y + 'px',\n                    width: section.width + 'px',\n                    height: section.height + 'px',\n                }}\n            />\n        ) : null\n    }\n\n    //#endregion\n\n    //#region 数据控制\n\n    createNode = () => {\n        const uid = this.state.uidCounter;\n        this.setState(s => ({ uidCounter: s.uidCounter + 1 }));\n        const node: MindNode = {\n            uid,\n            position: vec2Minus([0, 0], this.state.offset),\n            text: `#${uid}`,\n            outPorts: [],\n            inPorts: [],\n        };\n\n        this.addNode(node);\n    }\n\n    addNode(node: MindNode) {\n        this.nodes.set(node.uid, node);\n        this.updateStateNodes();\n    }\n\n    updateNode(node: MindNode) {\n        this.nodes.set(node.uid, node);\n        this.updateStateNodes();\n    }\n\n    removeNode(uid: number) {\n        this.nodes.delete(uid);\n        this.nodeCardRects.delete(uid);\n        this.choosenNodeUids.delete(uid);\n        this.draggingNodeStartPositions.delete(uid);\n        this.updateStateNodes();\n    }\n\n    updateStateNodes() {\n        this.setState(() => ({ nodes: Array.from(this.nodes.values()) }));\n    }\n\n    // 正在连接的节点UID\n    private linkingNodeUid: number | null = null;\n\n    linkNode(uid: number) {\n        const targetNode = this.nodes.get(uid);\n        if (!targetNode) return;\n        if (this.linkingNodeUid !== null) {\n            if (this.linkingNodeUid !== targetNode.uid) {\n                const sourceNode = this.nodes.get(this.linkingNodeUid);\n                if (sourceNode && targetNode) {\n                    const outPorts = new Set(sourceNode.outPorts);\n                    const inPorts = new Set(targetNode.inPorts);\n                    if (outPorts.has(targetNode.uid)) {\n                        outPorts.delete(targetNode.uid);\n                        inPorts.delete(sourceNode.uid);\n                    } else {\n                        outPorts.add(targetNode.uid);\n                        inPorts.add(sourceNode.uid);\n                    }\n                    sourceNode.outPorts = Array.from(outPorts);\n                    targetNode.inPorts = Array.from(inPorts);\n                    this.updateStateNodes();\n                }\n            }\n            this.linkingNodeUid = null;\n        } else {\n            this.linkingNodeUid = targetNode.uid;\n        }\n    }\n\n    //#endregion\n\n    //#region 鼠标事件\n\n    onClickNode = (uid: number, event: MouseEvent) => {\n        if (event.ctrlKey) {\n            this.toggleChooseNode(uid);\n        } else {\n            this.setState(() => ({ editingNodeUid: uid }));\n        }\n    }\n\n    onMouseDown = (e: MouseEvent) => {\n        if (!!this.state.mouseState) return;\n\n        if (e.nativeEvent.button === MOUSE_BUTTON_LEFT) {\n            this.onSectionChooseStart(e);\n        } else if (e.nativeEvent.button === MOUSE_BUTTON_MIDDLE) {\n            this.onDragPoolStart(e);\n        }\n    }\n\n    onMouseMove = (e: MouseEvent) => {\n        if (!this.state.mouseState) return;\n\n        if (this.state.mouseState === 'dragNode') {\n            this.onDragNodeMove(e);\n        } else if (this.state.mouseState === 'dragPool') {\n            this.onDragPool(e);\n        } else if (this.state.mouseState === 'chooseNodes') {\n            this.onSectionChooseMove(e);\n        }\n    }\n\n    onMouseUp = (e: MouseEvent) => {\n        if (!this.state.mouseState) return;\n\n        if (this.state.mouseState === 'dragNode') {\n            this.onDragNodeMove(e);\n            this.onDragNodeEnd(e);\n        } else if (this.state.mouseState === 'dragPool') {\n            this.onDragPoolEnd(e);\n        } else if (this.state.mouseState === 'chooseNodes') {\n            this.onSectionChooseEnd(e);\n        }\n    }\n\n    onMouseLeave = (e: MouseEvent) => {\n        this.onMouseUp(e);\n    }\n\n    //#endregion\n\n    //#region 拖动节点相关\n\n    // 正在拖动的节点的UID列表\n    private readonly draggingNodeStartPositions: Map<number, Vec2> = new Map();\n    // 开始拖动时的鼠标相对屏幕的绝对位置\n    private dragNodeStartMousePosition: Vec2 = [0, 0];\n\n    onDragNodeStart = (uid: number, e: MouseEvent) => {\n        this.setState(() => ({ mouseState: 'dragNode' }));\n        this.dragNodeStartMousePosition = [e.screenX, e.screenY];\n\n        [\n            uid,\n            ...Array.from(this.choosenNodeUids)\n        ].forEach(uid => getMapValue(this.nodes, uid, node => this.draggingNodeStartPositions.set(uid, node.position)));\n    }\n\n    onDragNodeMove = (e: MouseEvent) => {\n        if (this.draggingNodeStartPositions.size) {\n            // console.log(\"onMouseDrag\")\n            const mousePosition: Vec2 = [e.screenX, e.screenY];\n            const deltaMousePosition: Vec2 = vec2Minus(mousePosition, this.dragNodeStartMousePosition);\n\n            for (const [uid, draggingNodeStartPosition] of Array.from(this.draggingNodeStartPositions.entries())) {\n                const newNodePosition = vec2Add(draggingNodeStartPosition, deltaMousePosition);\n                getMapValue(this.nodes, uid, node => \n                    this.updateNode({ \n                        ...node, \n                        position: newNodePosition,\n                    })\n                );\n            }\n            this.updateStateNodes();\n        }\n    }\n\n    onDragNodeEnd = (e: MouseEvent) => {\n        if (this.draggingNodeStartPositions.size) {\n            // console.log(\"onMouseDrop\")\n            this.draggingNodeStartPositions.clear();\n            this.updateStateNodes();\n        }\n        this.setState(() => ({ mouseState: null }));\n    }\n\n    //#endregion\n\n    //#region 拖动节点池相关\n\n    private dragPoolStartOffset: Vec2 = [0, 0];\n    private dragPoolStartMousePosition: Vec2 = [0, 0];\n    onDragPoolStart(e: MouseEvent) {\n        // console.log(\"onDragPoolStart\");\n        this.setState(() => ({ mouseState: 'dragPool' }));\n        this.dragPoolStartOffset = this.state.offset;\n        this.dragPoolStartMousePosition = [e.screenX, e.screenY];\n    }\n    \n    onDragPool(e: MouseEvent) {\n        e.stopPropagation();\n        const mousePosition: Vec2 = [e.screenX, e.screenY];\n        const deltaOffset = vec2Minus(mousePosition, this.dragPoolStartMousePosition);\n        this.setState(() => ({ offset: vec2Add(this.dragPoolStartOffset, deltaOffset) }));\n    }\n    \n    onDragPoolEnd(e: MouseEvent) {\n        this.onDragPool(e);\n        this.setState(() => ({ mouseState: null }));\n    }\n\n    //#endregion\n\n    //#region 持久化\n\n    buildPool(): MindNodePool {\n        return {\n            uidCounter: this.state.uidCounter,\n            offset: this.state.offset,\n            nodes: Array.from(this.nodes.values()),\n        };\n    }\n\n    load = () => {\n        try {\n            const pool: MindNodePool = JSON.parse(this.state.dataString);\n\n            this.nodes.clear();\n            this.nodeCardRects.clear();\n            this.draggingNodeStartPositions.clear();\n            this.choosenNodeUids.clear();\n            pool.nodes.forEach(it => this.nodes.set(it.uid, it));\n\n            this.setState(() => ({\n                uidCounter: pool.uidCounter,\n                offset: pool.offset,\n                nodes: pool.nodes,\n            }));\n        } catch (e) {\n            alert('解析数据失败！');\n        }\n    }\n\n    save = () => {\n        const pool: MindNodePool = this.buildPool();\n        this.setState(() => ({ dataString: JSON.stringify(pool) }));\n        console.log(pool);\n    }\n\n    //#endregion\n\n    //#region 节点选择相关\n\n    // 被选中的节点UID列表\n    private choosenNodeUids: Set<number> = new Set();\n\n    toggleChooseNode(uid: number) {\n        if (this.choosenNodeUids.has(uid)) {\n            this.unchooseNode(uid);\n        } else {\n            this.chooseNode(uid);\n        }\n    }\n\n    setNodeChoosen = (uid: number, value: boolean) => {\n        console.log(\"setNodeChoosen\", uid, value);\n        \n        if (value) {\n            this.chooseNode(uid);\n        } else {\n            this.unchooseNode(uid);\n        }\n    }\n\n    chooseNode(uid: number) {\n        this.choosenNodeUids.add(uid);\n        this.forceUpdate();\n    }\n\n    unchooseNode(uid: number) {\n        this.choosenNodeUids.delete(uid);\n        this.forceUpdate();\n    }\n\n    unchooseAllNodes = () => {\n        this.choosenNodeUids.clear();\n        this.forceUpdate();\n    }\n\n    // 选取开始时的鼠标位置\n    private sectionChooseStartMousePosition: Vec2 = [0, 0];\n\n    onSectionChooseStart(e: MouseEvent) {\n        this.setState(() => ({ mouseState: 'chooseNodes' }));\n        this.sectionChooseStartMousePosition = [e.clientX, e.clientY];\n    }\n    onSectionChooseMove(e: MouseEvent) {\n        const fix = this.getPoolFix();\n        const mousePosition = vec2Minus([e.clientX, e.clientY], fix);\n        const [x, y] = vec2Minus(this.sectionChooseStartMousePosition, fix);\n        this.setState(() => ({ section: {\n            x,\n            y,\n            width: mousePosition[X] - x,\n            height: mousePosition[Y] - y,\n        } }));\n    }\n    onSectionChooseEnd(e: MouseEvent) {\n        const [sectionLeft, sectionRight] = [this.sectionChooseStartMousePosition[X], e.clientX].sort();\n        const [sectionTop, sectionBottom] = [this.sectionChooseStartMousePosition[Y], e.clientY].sort();\n        const newChoosenNodeUids = Array.from(this.nodeCardRects.entries()).filter(\n            ([, { x, y, width, height }]) => \n                (x >= sectionLeft && y >= sectionTop && x + width <= sectionRight && y + height <= sectionBottom)\n        ).map(([uid]) => uid);\n        if (!e.ctrlKey) {\n            this.choosenNodeUids.clear();\n        }\n        newChoosenNodeUids.forEach(it => this.choosenNodeUids.add(it));\n        this.setState(() => ({ mouseState: null, section: null }));\n    }\n\n    //#endregion\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}