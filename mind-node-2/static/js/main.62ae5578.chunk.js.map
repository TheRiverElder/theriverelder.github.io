{"version":3,"sources":["util/javascript-extension.ts","util/ui.ts","components/RadioButton.tsx","components/MindNodeCard.tsx","constants.ts","components/MindNodeInfo.tsx","util/mathematics.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toClassName","obj","arr","key","Object","prototype","hasOwnProperty","call","element","push","join","getMapValue","map","handler","value","get","getRect","ref","box","current","getBoundingClientRect","x","y","width","height","RadioButton","props","className","checked","onClick","onChange","children","MindNodeCard","onHandleMouseDown","e","button","stopPropagation","onDragStart","node","uid","selfRef","React","createRef","this","onRectUpdate","position","text","anchor","anchorX","anchorY","dragging","linking","choosen","fixedX","fixedY","style","left","top","onMouseDown","split","it","i","onClickLinkButton","onClickChooseButton","Component","MindNodeInfo","getBrief","nodes","state","inputingText","outPorts","inPorts","setText","target","length","setState","onUpdate","vec2Add","v1","v2","vec2Minus","App","nodeCardRects","Map","origin","resetView","poolRef","canvas","canvasRef","forceUpdate","hideNodeInfoView","editingNodeUid","createNode","uidCounter","s","offset","addNode","linkingNodeUid","onClickNode","event","ctrlKey","toggleChooseNode","mouseState","nativeEvent","onSectionChooseStart","onDragPoolStart","onMouseMove","onDragNodeMove","onDragPool","onSectionChooseMove","onMouseUp","onDragNodeEnd","onDragPoolEnd","onSectionChooseEnd","onMouseLeave","draggingNodeStartPositions","dragNodeStartMousePosition","onDragNodeStart","screenX","screenY","Array","from","choosenNodeUids","forEach","set","size","deltaMousePosition","newNodePosition","updateNode","entries","updateStateNodes","clear","dragPoolStartOffset","dragPoolStartMousePosition","load","pool","JSON","parse","dataString","alert","save","buildPool","stringify","console","log","Set","setNodeChoosen","chooseNode","unchooseNode","unchooseAllNodes","sectionChooseStartMousePosition","section","drawLines","window","addEventListener","removeEventListener","renderTopBar","getAnchor","has","rect","linkNode","renderSection","renderNodeInfo","renderBottomBar","canvasAndContext","context","getContext","get2dContext","g","clearRect","strokeStyle","fillStyle","lineWidth","fix","getPoolFix","values","sourcePoint","getPoint","portUid","targetNode","targetPoint","beginPath","moveTo","lineTo","stroke","placeholder","editingNode","delete","sourceNode","add","deltaOffset","clientX","clientY","mousePosition","sort","sectionLeft","sectionRight","sectionTop","sectionBottom","newChoosenNodeUids","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oVACO,SAASA,EAAYC,GACxB,IAAMC,EAAqB,GAC3B,IAAK,IAAMC,KAAOF,EACd,GAAIG,OAAOC,UAAUC,eAAeC,KAAKN,EAAKE,GAAM,CAChD,IAAMK,EAAUP,EAAIE,GACG,kBAAZK,EACPN,EAAIO,KAAKD,GAELA,GACAN,EAAIO,KAAKN,GAKzB,OAAOD,EAAIQ,KAAK,KAGb,SAASC,EAAkBC,EAAgBT,EAAQU,GACtD,IAAMC,EAAQF,EAAIG,IAAIZ,GAClBW,GACAD,EAAQC,EAAOX,GCThB,SAASa,EAA+BC,GAA0B,IAAD,EAC9DC,EAAG,UAAGD,EAAIE,eAAP,aAAG,EAAaC,wBACzB,MAAO,CACHC,GAAM,OAAHH,QAAG,IAAHA,OAAA,EAAAA,EAAKG,IAAK,EACbC,GAAM,OAAHJ,QAAG,IAAHA,OAAA,EAAAA,EAAKI,IAAK,EACbC,OAAU,OAAHL,QAAG,IAAHA,OAAA,EAAAA,EAAKK,QAAS,EACrBC,QAAW,OAAHN,QAAG,IAAHA,OAAA,EAAAA,EAAKM,SAAU,G,iBCGhBC,MAXf,SAAqBC,GACjB,OACI,qBACIC,UAAY3B,EAAY,CAAE,aAAe,EAAM4B,QAASF,EAAMZ,QAC9De,QAAU,kBAAMH,EAAMI,UAAUJ,EAAMZ,QAF1C,SAIMY,EAAMK,YCOdC,E,4MAoEFC,kBAAoB,SAACC,GC3FQ,ID4FrBA,EAAEC,SACFD,EAAEE,kBACF,EAAKV,MAAMW,YAAY,EAAKX,MAAMY,KAAKC,IAAKL,K,EAM5CM,QAAqCC,IAAMC,Y,uDA3EnD,WACIC,KAAKjB,MAAMkB,aAAaD,KAAKjB,MAAMY,KAAKC,IAAKvB,EAAQ2B,KAAKH,Y,gCAG9D,WACIG,KAAKjB,MAAMkB,aAAaD,KAAKjB,MAAMY,KAAKC,IAAKvB,EAAQ2B,KAAKH,Y,oBAG9D,WAAU,IAAD,OACL,EASIG,KAAKjB,MATT,IACIY,KADJ,gBAEQO,SAFR,GAEmBxB,EAFnB,KAEsBC,EAFtB,KAGQwB,EAHR,EAGQA,KAHR,gBAKIC,OALJ,GAKaC,EALb,KAKsBC,EALtB,KAMIC,EANJ,EAMIA,SACAC,EAPJ,EAOIA,QACAC,EARJ,EAQIA,QAIEC,EAAShC,EAAI2B,EACbM,EAAShC,EAAI2B,EAEnB,OACI,sBACItB,UAAY3B,EAAY,CAAE,cAAgB,EAAMmD,UAASD,WAAUE,YACnEnC,IAAM0B,KAAKH,QACXe,MAAO,CACHC,KAAK,GAAD,OAAKH,EAAL,MACJI,IAAI,GAAD,OAAKH,EAAL,OAEPzB,QAAU,SAAAK,GAAC,OAAI,EAAKR,MAAMG,QAAQ,EAAKH,MAAMY,KAAKC,IAAKL,IAP3D,UASI,qBACIP,UAAU,SACV+B,YAAcf,KAAKV,oBAGvB,sBAAKN,UAAU,UAAf,UACI,qBAAKA,UAAU,OAAf,SACMmB,EAAKa,MAAM,MAAM/C,KAAI,SAACgD,EAAIC,GAAL,OAAY,4BAAeD,GAANC,QAGhD,sBAAKlC,UAAU,WAAf,UACI,cAAC,EAAD,CAEIb,MAAQqC,EACRrB,SAAW,kBAAM,EAAKJ,MAAMoC,kBAAkB,EAAKpC,MAAMY,KAAKC,MAHlE,SAKI,iDAJMY,EAAU,GAAK,IAOzB,cAAC,EAAD,CAEIrC,MAAQsC,EACRtB,SAAW,SAAA8B,GAAE,OAAI,EAAKlC,MAAMqC,oBAAoB,EAAKrC,MAAMY,KAAKC,IAAKqB,IAHzE,SAKI,2CAJMR,EAAU,EAAI,gB,GAxDrBY,aAkFZhC,IE7BAiC,G,wDA7DX,WAAYvC,GAA2B,IAAD,8BAClC,cAAMA,IAkDVwC,SAAW,SAAC3B,GACR,IAAMD,EAAO,EAAKZ,MAAMyC,MAAMpD,IAAIwB,GAClC,OAAID,EACO,IAAMC,EAAM,SAAMD,EAAKQ,KAEvB,IAAMP,GAtDjB,EAAK6B,MAAQ,CACTC,aAAc3C,EAAMY,KAAKQ,MAHK,E,0CAMtC,WAAU,IAAD,OACL,EAA6CH,KAAKjB,MAAMY,KAAhDC,EAAR,EAAQA,IAAKM,EAAb,EAAaA,SAAUyB,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,QACjC,OACI,sBAAK5C,UAAU,eAAf,UACI,qBAAKA,UAAU,YAEf,sBAAKA,UAAU,UAAf,UACI,8BACI,sBAAMA,UAAU,QAAhB,uBACA,uBAAMA,UAAU,OAAhB,cAA0BY,QAE9B,8BACI,sBAAMZ,UAAU,QAAhB,gCACA,uBAAMA,UAAU,OAAhB,cAA0BkB,EAASnC,KAAK,MAAxC,UAGJ,4BAAG,sBAAMiB,UAAU,QAAhB,kCACH,0BACIb,MAAQ6B,KAAKyB,MAAMC,aACnBvC,SAAW,SAAAI,GAAC,OAAI,EAAKsC,QAAQtC,EAAEuC,OAAO3D,UAG1C,oBAAGa,UAAU,QAAb,+BAAyB2C,EAASI,OAAlC,wBACA,oBAAI/C,UAAU,OAAd,SACM2C,EAAS1D,KAAI,SAAA2B,GAAG,OAAK,oBAAgBZ,UAAU,WAA1B,SAAuC,EAAKuC,SAAS3B,IAA3CA,QAGrC,oBAAGZ,UAAU,QAAb,+BAAyB4C,EAAQG,OAAjC,wBACA,oBAAI/C,UAAU,OAAd,SACM4C,EAAQ3D,KAAI,SAAA2B,GAAG,OAAK,oBAAgBZ,UAAU,WAA1B,SAAuC,EAAKuC,SAAS3B,IAA3CA,gB,qBAOpD,SAAQO,GACJH,KAAKgC,UAAS,iBAAO,CAAEN,aAAcvB,MACrC,IAAMR,EAAc,2BACbK,KAAKjB,MAAMY,MADE,IAEhBQ,SAEJH,KAAKjB,MAAMkD,SAAStC,O,GAjDD0B,cCTpB,SAASa,EAAQC,EAAUC,GAC9B,MAAO,CAACD,EAJK,GAIGC,EAJH,GAIUD,EAHV,GAGkBC,EAHlB,IAMV,SAASC,EAAUF,EAAUC,GAChC,MAAO,CAACD,EARK,GAQGC,EARH,GAQUD,EAPV,GAOkBC,EAPlB,IAUV,IC0hBQE,E,kDA5gBX,WAAYvD,GAAkB,IAAD,8BACzB,cAAMA,IA0EOwD,cAAmC,IAAIC,IA3E3B,EA6EZhB,MAA+B,IAAIgB,IA7EvB,EAwFrBC,OAAe,CAAC,EAAG,GAxFE,EA0F7BC,UAAY,WAAO,IAAD,EACRnE,EAAG,UAAG,EAAKoE,QAAQnE,eAAhB,aAAG,EAAsBC,wBAClC,GAAKF,EAAL,CAGA,EAAKkE,OAAS,CAAClE,EAAIK,MAAQ,EAAGL,EAAIM,OAAS,GAC3C,IAAM+D,EAAS,EAAKC,UAAUrE,QAC1BoE,IACAA,EAAOhE,MAAQL,EAAIK,MACnBgE,EAAO/D,OAASN,EAAIM,QAExB,EAAKiE,gBArGoB,EAiHrBH,QAAqC7C,IAAMC,YAjHtB,EAmHrB8C,UAA0C/C,IAAMC,YAnH3B,EAqH7BgD,iBAAmB,kBAAM,EAAKf,UAAS,iBAAO,CAAEgB,eAAgB,UArHnC,EA8N7BC,WAAa,WACT,IAAMrD,EAAM,EAAK6B,MAAMyB,WACvB,EAAKlB,UAAS,SAAAmB,GAAC,MAAK,CAAED,WAAYC,EAAED,WAAa,MACjD,IAAMvD,EAAiB,CACnBC,MACAM,SAAUmC,EAAU,CAAC,EAAG,GAAI,EAAKZ,MAAM2B,QACvCjD,KAAK,IAAD,OAAMP,GACV+B,SAAU,GACVC,QAAS,IAGb,EAAKyB,QAAQ1D,IAzOY,EAmQrB2D,eAAgC,KAnQX,EAoS7BC,YAAc,SAAC3D,EAAa4D,GACpBA,EAAMC,QACN,EAAKC,iBAAiB9D,GAEtB,EAAKoC,UAAS,iBAAO,CAAEgB,eAAgBpD,OAxSlB,EA4S7BmB,YAAc,SAACxB,GACL,EAAKkC,MAAMkC,aHxUQ,IG0UrBpE,EAAEqE,YAAYpE,OACd,EAAKqE,qBAAqBtE,GH1UH,IG2UhBA,EAAEqE,YAAYpE,QACrB,EAAKsE,gBAAgBvE,KAlTA,EAsT7BwE,YAAc,SAACxE,GACN,EAAKkC,MAAMkC,aAEc,aAA1B,EAAKlC,MAAMkC,WACX,EAAKK,eAAezE,GACa,aAA1B,EAAKkC,MAAMkC,WAClB,EAAKM,WAAW1E,GACiB,gBAA1B,EAAKkC,MAAMkC,YAClB,EAAKO,oBAAoB3E,KA9TJ,EAkU7B4E,UAAY,SAAC5E,GACJ,EAAKkC,MAAMkC,aAEc,aAA1B,EAAKlC,MAAMkC,YACX,EAAKK,eAAezE,GACpB,EAAK6E,cAAc7E,IACc,aAA1B,EAAKkC,MAAMkC,WAClB,EAAKU,cAAc9E,GACc,gBAA1B,EAAKkC,MAAMkC,YAClB,EAAKW,mBAAmB/E,KA3UH,EA+U7BgF,aAAe,SAAChF,GACZ,EAAK4E,UAAU5E,IAhVU,EAwVZiF,2BAAgD,IAAIhC,IAxVxC,EA0VrBiC,2BAAmC,CAAC,EAAG,GA1VlB,EA4V7BC,gBAAkB,SAAC9E,EAAaL,GAC5B,EAAKyC,UAAS,iBAAO,CAAE2B,WAAY,eACnC,EAAKc,2BAA6B,CAAClF,EAAEoF,QAASpF,EAAEqF,SAEhD,CACIhF,GADJ,mBAEOiF,MAAMC,KAAK,EAAKC,mBACrBC,SAAQ,SAAApF,GAAG,OAAI5B,EAAY,EAAKwD,MAAO5B,GAAK,SAAAD,GAAI,OAAI,EAAK6E,2BAA2BS,IAAIrF,EAAKD,EAAKO,iBAnW3E,EAsW7B8D,eAAiB,SAACzE,GACd,GAAI,EAAKiF,2BAA2BU,KAAM,CAKtC,IAHA,IACMC,EAA2B9C,EADL,CAAC9C,EAAEoF,QAASpF,EAAEqF,SACgB,EAAKH,4BAHzB,aAKjC,0BAAO7E,EAAP,KACKwF,EAAkBlD,EADvB,KAC0DiD,GAC3DnH,EAAY,EAAKwD,MAAO5B,GAAK,SAAAD,GAAI,OAC7B,EAAK0F,WAAL,2BACO1F,GADP,IAEIO,SAAUkF,SALtB,MAA+CP,MAAMC,KAAK,EAAKN,2BAA2Bc,WAA1F,eAAuG,IASvG,EAAKC,qBArXgB,EAyX7BnB,cAAgB,SAAC7E,GACT,EAAKiF,2BAA2BU,OAEhC,EAAKV,2BAA2BgB,QAChC,EAAKD,oBAET,EAAKvD,UAAS,iBAAO,CAAE2B,WAAY,UA/XV,EAsYrB8B,oBAA4B,CAAC,EAAG,GAtYX,EAuYrBC,2BAAmC,CAAC,EAAG,GAvYlB,EAua7BC,KAAO,WACH,IACI,IAAMC,EAAqBC,KAAKC,MAAM,EAAKrE,MAAMsE,YAEjD,EAAKvE,MAAMgE,QACX,EAAKjD,cAAciD,QACnB,EAAKhB,2BAA2BgB,QAChC,EAAKT,gBAAgBS,QACrBI,EAAKpE,MAAMwD,SAAQ,SAAA/D,GAAE,OAAI,EAAKO,MAAMyD,IAAIhE,EAAGrB,IAAKqB,MAEhD,EAAKe,UAAS,iBAAO,CACjBkB,WAAY0C,EAAK1C,WACjBE,OAAQwC,EAAKxC,OACb5B,MAAOoE,EAAKpE,UAElB,MAAOjC,GACLyG,MAAM,gDAvbe,EA2b7BC,KAAO,WACH,IAAML,EAAqB,EAAKM,YAChC,EAAKlE,UAAS,iBAAO,CAAE+D,WAAYF,KAAKM,UAAUP,OAClDQ,QAAQC,IAAIT,IA9ba,EAscrBb,gBAA+B,IAAIuB,IAtcd,EAgd7BC,eAAiB,SAAC3G,EAAazB,GAC3BiI,QAAQC,IAAI,iBAAkBzG,EAAKzB,GAE/BA,EACA,EAAKqI,WAAW5G,GAEhB,EAAK6G,aAAa7G,IAtdG,EAoe7B8G,iBAAmB,WACf,EAAK3B,gBAAgBS,QACrB,EAAK1C,eAteoB,EA0erB6D,gCAAwC,CAAC,EAAG,GAxehD,EAAKlF,MAAQ,CACTyB,WAAY,EACZ1B,MAAO,GACP4B,OAAQ,CAAC,EAAG,GACZJ,eAAgB,KAChBW,WAAY,KACZiD,QAAS,KACTb,WAAY,IATS,E,qDAa7B,WACI/F,KAAKuF,mBACLvF,KAAK6G,YACLC,OAAOC,iBAAiB,SAAU/G,KAAK0C,WACvC1C,KAAK0C,c,kCAGT,WACIoE,OAAOE,oBAAoB,SAAUhH,KAAK0C,a,gCAG9C,WACI1C,KAAK6G,c,oBAGT,WAAU,IAAD,OACL,OACI,sBAAK7H,UAAU,MAAf,UAEMgB,KAAKiH,eAGP,sBACIjI,UAAY,aAAegB,KAAKwE,2BAA2BU,KAAO,YAAc,IAChF5G,IAAM0B,KAAK2C,QACX5B,YAAcf,KAAKe,YACnBgD,YAAc/D,KAAK+D,YACnBI,UAAYnE,KAAKmE,UACjBI,aAAevE,KAAKuE,aANxB,UAQI,wBAAQjG,IAAM0B,KAAK6C,YAGf7C,KAAKyB,MAAMD,MAAMvD,KAAI,SAAAgD,GAAE,OACnB,cAAC,EAAD,CAEIb,OAAS,EAAK8G,YACdvH,KAAOsB,EACPT,QAAU,EAAK8C,iBAAmBrC,EAAGrB,IACrCa,QAAU,EAAKsE,gBAAgBoC,IAAIlG,EAAGrB,KACtCW,SAAW,EAAKiE,2BAA2B2C,IAAIlG,EAAGrB,KAClDV,QAAU,EAAKqE,YACf7D,YAAc,EAAKgF,gBACnBzE,aAAe,SAACL,EAAKwH,GAAN,OAAe,EAAK7E,cAAc0C,IAAIrF,EAAKwH,IAC1DjG,kBAAoB,SAACvB,GAAD,OAAS,EAAKyH,SAASzH,IAC3CwB,oBAAsB,EAAKmF,gBAVrBtF,EAAGrB,QAenBI,KAAKsH,gBAELtH,KAAKuH,oBAITvH,KAAKwH,uB,uBAmCnB,WACI,OAAOtF,EAAQlC,KAAKyC,OAAQzC,KAAKyB,MAAM2B,U,wBAG3C,WACI,MNjHG,EAAK,QADYgE,EMkHD/I,EAAQ2B,KAAK2C,gBNjHxB,IAAJyE,OAAA,EAAAA,EAAM1I,IAAK,GAAO,OAAJ0I,QAAI,IAAJA,OAAA,EAAAA,EAAMzI,IAAK,GAD9B,IAAqByI,I,uBM4HxB,WAEI,IAAMK,ENhJP,SAAsBnJ,GACzB,IAAMsE,EAAStE,EAAIE,QACnB,IAAKoE,EAAQ,OAAO,KACpB,IAAM8E,EAAU9E,EAAO+E,WAAW,MAClC,OAAKD,EACE,CAAC9E,EAAQ8E,GADK,KM4IQE,CAAa5H,KAAK6C,WAC3C,GAAK4E,EAAL,CAIA,kBAAoBA,EAApB,GAAO7E,EAAP,KAAeiF,EAAf,KAEAA,EAAEC,UAAU,EAAG,EAAGlF,EAAOhE,MAAOgE,EAAO/D,QAEvCgJ,EAAEE,YAAc,UAChBF,EAAEG,UAAY,UACdH,EAAEI,UAAY,EAad,IAVA,IAAMC,EAAYlI,KAAKmI,aAUvB,MAAmBtD,MAAMC,KAAK9E,KAAKwB,MAAM4G,UAAzC,eAAoD,CAA/C,IAA+C,EAAzCzI,EAAI,KACL0I,EAAcC,EAAStI,KAAKuC,cAAcnE,IAAIuB,EAAKC,MADT,cAE1BD,EAAKgC,UAFqB,IAEhD,2BAAqC,CAAC,IAA3B4G,EAA0B,QAC3BC,EAAaxI,KAAKwB,MAAMpD,IAAImK,GAClC,GAAKC,EAAL,CAEA,IAAMC,EAAcH,EAAStI,KAAKuC,cAAcnE,IAAIoK,EAAW5I,MAE/DiI,EAAEa,YACFb,EAAEc,OAAF,MAAAd,EAAC,YAAWQ,IACZR,EAAEe,OAAF,MAAAf,EAAC,YAAWY,IACZZ,EAAEgB,WAX0C,qCAtBhDzC,QAAQC,IAAI,kBAchB,SAASiC,EAASlB,GACd,GAAIA,EAAM,CACN,IAAQ1I,EAAwB0I,EAAxB1I,EAAGC,EAAqByI,EAArBzI,EAEX,OAAO0D,EADiB,CAAC3D,EADO0I,EAAlBxI,MACuB,EAAGD,EADRyI,EAAXvI,OACgC,GACzBqJ,GAEhC,MAAO,CAAC,EAAG,M,0BAkBnB,WAAgB,IAAD,OACX,OACI,sBAAKlJ,UAAU,UAAf,UACI,wBAAQE,QAAUc,KAAKiD,WAAvB,0BACA,wBAAQ/D,QAAUc,KAAKiG,KAAvB,0BACA,wBAAQ/G,QAAUc,KAAK2F,KAAvB,0BACA,wBAAQzG,QAAUc,KAAK0G,iBAAvB,sCACA,0BACIvI,MAAQ6B,KAAKyB,MAAMsE,WACnB+C,YAAY,oDACZ3J,SAAW,SAAAI,GAAC,OAAI,EAAKyC,UAAS,iBAAO,CAAE+D,WAAYxG,EAAEuC,OAAO3D,kB,6BAM5E,WACI,OACI,sBAAKa,UAAU,aAAf,UACI,uBAAMA,UAAU,QAAhB,2CAA+BgB,KAAKyB,MAAMD,MAAMO,UAChD,uBAAM/C,UAAU,QAAhB,iDAAgCgB,KAAK+E,gBAAgBG,a,4BAKjE,WAAkB,IAAD,OACP6D,EAA6C,OAA9B/I,KAAKyB,MAAMuB,eAA4BhD,KAAKwB,MAAMpD,IAAI4B,KAAKyB,MAAMuB,gBAAmB,KACzG,OAAK+F,EAGD,sBAAK/J,UAAU,YAAf,UACI,wBAAQA,UAAU,OAAOE,QAAUc,KAAK+C,iBAAxC,eACA,cAAC,EAAD,CAEIpD,KAAOoJ,EACPvH,MAAQxB,KAAKwB,MACbS,SAAW,SAAAtC,GAAI,OAAI,EAAK0F,WAAW1F,KAH7BoJ,EAAYnJ,QANL,O,2BAe7B,WACI,IAAQgH,EAAY5G,KAAKyB,MAAjBmF,QACR,OAAOA,EACH,qBACI5H,UAAU,UACV4B,MAAO,CACHC,KAAM+F,EAAQlI,EAAI,KAClBoC,IAAK8F,EAAQjI,EAAI,KACjBC,MAAOgI,EAAQhI,MAAQ,KACvBC,OAAQ+H,EAAQ/H,OAAS,QAGjC,O,qBAqBR,SAAQc,GACJK,KAAKwB,MAAMyD,IAAItF,EAAKC,IAAKD,GACzBK,KAAKuF,qB,wBAGT,SAAW5F,GACPK,KAAKwB,MAAMyD,IAAItF,EAAKC,IAAKD,GACzBK,KAAKuF,qB,wBAGT,SAAW3F,GACPI,KAAKwB,MAAMwH,OAAOpJ,GAClBI,KAAKuC,cAAcyG,OAAOpJ,GAC1BI,KAAK+E,gBAAgBiE,OAAOpJ,GAC5BI,KAAKwE,2BAA2BwE,OAAOpJ,GACvCI,KAAKuF,qB,8BAGT,WAAoB,IAAD,OACfvF,KAAKgC,UAAS,iBAAO,CAAER,MAAOqD,MAAMC,KAAK,EAAKtD,MAAM4G,gB,sBAMxD,SAASxI,GACL,IAAM4I,EAAaxI,KAAKwB,MAAMpD,IAAIwB,GAClC,GAAK4I,EACL,GAA4B,OAAxBxI,KAAKsD,eAAyB,CAC9B,GAAItD,KAAKsD,iBAAmBkF,EAAW5I,IAAK,CACxC,IAAMqJ,EAAajJ,KAAKwB,MAAMpD,IAAI4B,KAAKsD,gBACvC,GAAI2F,GAAcT,EAAY,CAC1B,IAAM7G,EAAW,IAAI2E,IAAI2C,EAAWtH,UAC9BC,EAAU,IAAI0E,IAAIkC,EAAW5G,SAC/BD,EAASwF,IAAIqB,EAAW5I,MACxB+B,EAASqH,OAAOR,EAAW5I,KAC3BgC,EAAQoH,OAAOC,EAAWrJ,OAE1B+B,EAASuH,IAAIV,EAAW5I,KACxBgC,EAAQsH,IAAID,EAAWrJ,MAE3BqJ,EAAWtH,SAAWkD,MAAMC,KAAKnD,GACjC6G,EAAW5G,QAAUiD,MAAMC,KAAKlD,GAChC5B,KAAKuF,oBAGbvF,KAAKsD,eAAiB,UAEtBtD,KAAKsD,eAAiBkF,EAAW5I,M,6BA4GzC,SAAgBL,GAEZS,KAAKgC,UAAS,iBAAO,CAAE2B,WAAY,eACnC3D,KAAKyF,oBAAsBzF,KAAKyB,MAAM2B,OACtCpD,KAAK0F,2BAA6B,CAACnG,EAAEoF,QAASpF,EAAEqF,W,wBAGpD,SAAWrF,GAAgB,IAAD,OACtBA,EAAEE,kBACF,IACM0J,EAAc9G,EADQ,CAAC9C,EAAEoF,QAASpF,EAAEqF,SACG5E,KAAK0F,4BAClD1F,KAAKgC,UAAS,iBAAO,CAAEoB,OAAQlB,EAAQ,EAAKuD,oBAAqB0D,S,2BAGrE,SAAc5J,GACVS,KAAKiE,WAAW1E,GAChBS,KAAKgC,UAAS,iBAAO,CAAE2B,WAAY,W,uBAOvC,WACI,MAAO,CACHT,WAAYlD,KAAKyB,MAAMyB,WACvBE,OAAQpD,KAAKyB,MAAM2B,OACnB5B,MAAOqD,MAAMC,KAAK9E,KAAKwB,MAAM4G,a,8BAqCrC,SAAiBxI,GACTI,KAAK+E,gBAAgBoC,IAAIvH,GACzBI,KAAKyG,aAAa7G,GAElBI,KAAKwG,WAAW5G,K,wBAcxB,SAAWA,GACPI,KAAK+E,gBAAgBmE,IAAItJ,GACzBI,KAAK8C,gB,0BAGT,SAAalD,GACTI,KAAK+E,gBAAgBiE,OAAOpJ,GAC5BI,KAAK8C,gB,kCAWT,SAAqBvD,GACjBS,KAAKgC,UAAS,iBAAO,CAAE2B,WAAY,kBACnC3D,KAAK2G,gCAAkC,CAACpH,EAAE6J,QAAS7J,EAAE8J,W,iCAEzD,SAAoB9J,GAChB,IAAM2I,EAAMlI,KAAKmI,aACXmB,EAAgBjH,EAAU,CAAC9C,EAAE6J,QAAS7J,EAAE8J,SAAUnB,GACxD,EAAe7F,EAAUrC,KAAK2G,gCAAiCuB,GAA/D,mBAAOxJ,EAAP,KAAUC,EAAV,KACAqB,KAAKgC,UAAS,iBAAO,CAAE4E,QAAS,CAC5BlI,IACAC,IACAC,MAAO0K,EDhhBF,GCghBqB5K,EAC1BG,OAAQyK,EDhhBH,GCghBsB3K,S,gCAGnC,SAAmBY,GAAgB,IAAD,OAC9B,EAAoC,CAACS,KAAK2G,gCDrhBjC,GCqhBqEpH,EAAE6J,SAASG,OAAzF,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAoC,CAACzJ,KAAK2G,gCDrhBjC,GCqhBqEpH,EAAE8J,SAASE,OAAzF,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EAAqB/E,MAAMC,KAAK9E,KAAKuC,cAAc+C,WAAWuE,QAChE,sCAAMnL,EAAN,EAAMA,EAAGC,EAAT,EAASA,EAAGC,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,OAAnB,OACKH,GAAK8K,GAAe7K,GAAK+K,GAAchL,EAAIE,GAAS6K,GAAgB9K,EAAIE,GAAU8K,KACzF1L,KAAI,0CACDsB,EAAEkE,SACHzD,KAAK+E,gBAAgBS,QAEzBoE,EAAmB5E,SAAQ,SAAA/D,GAAE,OAAI,EAAK8D,gBAAgBmE,IAAIjI,MAC1DjB,KAAKgC,UAAS,iBAAO,CAAE2B,WAAY,KAAMiD,QAAS,a,GAxgBxCvF,aCXHyI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.62ae5578.chunk.js","sourcesContent":["// 将一个对象转换成className字符串\r\nexport function toClassName(obj: { [key: string]: (boolean | string) }): string {\r\n    const arr: Array<string> = [];\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            const element = obj[key];\r\n            if (typeof element === 'string') {\r\n                arr.push(element);\r\n            } else {\r\n                if (element) {\r\n                    arr.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return arr.join(' ');\r\n}\r\n\r\nexport function getMapValue<K, V>(map: Map<K, V>, key: K, handler: (value: V, key: K) => void) {\r\n    const value = map.get(key);\r\n    if (value) {\r\n        handler(value, key);\r\n    }\r\n}","import { RefObject } from \"react\";\r\nimport { Rect } from \"../interfaces\";\r\nimport { Vec2 } from \"./mathematics\";\r\n\r\nexport function get2dContext(ref: RefObject<HTMLCanvasElement>): [HTMLCanvasElement, CanvasRenderingContext2D] | null {\r\n    const canvas = ref.current;\r\n    if (!canvas) return null;\r\n    const context = canvas.getContext('2d');\r\n    if (!context) return null;\r\n    return [canvas, context];\r\n}\r\n\r\nexport function getRect<T extends HTMLElement>(ref: RefObject<T>): Rect {\r\n    const box = ref.current?.getBoundingClientRect();\r\n    return {\r\n        x: box?.x || 0,\r\n        y: box?.y || 0,\r\n        width: box?.width || 0,\r\n        height: box?.height || 0,\r\n    };\r\n}\r\n\r\nexport function getPosition(rect?: Rect): Vec2 {\r\n    return [rect?.x || 0, rect?.y || 0];\r\n}","import { ReactNode } from 'react';\r\nimport '../styles/RadioButton.css';\r\nimport { toClassName } from '../util/javascript-extension';\r\n\r\ninterface RadioButtonProps {\r\n    children?: ReactNode;\r\n    value: boolean;\r\n    onChange: (value: boolean) => void;\r\n}\r\n \r\nfunction RadioButton(props: RadioButtonProps) {\r\n    return (\r\n        <div \r\n            className={ toClassName({ \"RadioButton\": true, checked: props.value }) }\r\n            onClick={ () => props.onChange(!props.value) }    \r\n        >\r\n            { props.children }\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default RadioButton;","import React from \"react\";\r\nimport { Component, MouseEvent, RefObject } from \"react\";\r\nimport { Vec2 } from \"../util/mathematics\";\r\nimport \"../styles/MindNodeCard.css\";\r\nimport { MindNode, Rect } from \"../interfaces\";\r\nimport { MOUSE_BUTTON_LEFT } from \"../constants\";\r\nimport { toClassName } from \"../util/javascript-extension\";\r\nimport { getRect } from \"../util/ui\";\r\nimport RadioButton from \"./RadioButton\";\r\n\r\ninterface MindNodeCardProps {\r\n    anchor: Vec2;\r\n    node: MindNode;\r\n    dragging: boolean;\r\n    linking: boolean;\r\n    choosen: boolean;\r\n    onClick: (uid: number, e: MouseEvent) => void;\r\n    onDragStart: (uid: number, e: MouseEvent) => void;\r\n    onRectUpdate: (uid: number, rect: Rect) => void;\r\n    onClickLinkButton: (uid: number) => void;\r\n    onClickChooseButton: (uid: number, choosen: boolean) => void;\r\n}\r\n \r\nclass MindNodeCard extends Component<MindNodeCardProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    render() { \r\n        const { \r\n            node: { \r\n                position: [x, y], \r\n                text,\r\n            }, \r\n            anchor: [anchorX, anchorY], \r\n            dragging,\r\n            linking,\r\n            choosen, \r\n        } = this.props;\r\n\r\n        // 实际的坐标\r\n        const fixedX = x + anchorX;\r\n        const fixedY = y + anchorY;\r\n        \r\n        return (\r\n            <div \r\n                className={ toClassName({ \"MindNodeCard\": true, linking, dragging, choosen }) } \r\n                ref={ this.selfRef }\r\n                style={{\r\n                    left: `${fixedX}px`,\r\n                    top: `${fixedY}px`,\r\n                }}\r\n                onClick={ e => this.props.onClick(this.props.node.uid, e) }\r\n            >\r\n                <div\r\n                    className=\"handle\"\r\n                    onMouseDown={ this.onHandleMouseDown }\r\n                />\r\n\r\n                <div className=\"wrapper\">\r\n                    <div className=\"text\">\r\n                        { text.split(\"\\n\").map((it, i) => (<p key={ i }>{ it }</p>)) }\r\n                    </div>\r\n\r\n                    <div className=\"tool-bar\">\r\n                        <RadioButton\r\n                            key={ linking ? 11 : 10 }\r\n                            value={ linking }\r\n                            onChange={ () => this.props.onClickLinkButton(this.props.node.uid) }\r\n                        >\r\n                            <span>🔗</span>\r\n                        </RadioButton>\r\n\r\n                        <RadioButton\r\n                            key={ choosen ? 1 : 0 }\r\n                            value={ choosen }\r\n                            onChange={ it => this.props.onClickChooseButton(this.props.node.uid, it) }\r\n                        >\r\n                            <span>✔</span>\r\n                        </RadioButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onHandleMouseDown = (e: MouseEvent) => {\r\n        if (e.button === MOUSE_BUTTON_LEFT) {\r\n            e.stopPropagation();\r\n            this.props.onDragStart(this.props.node.uid, e);\r\n        }\r\n    }\r\n\r\n    //#region 拖拽相关\r\n\r\n    private selfRef: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //#endregion\r\n}\r\n \r\nexport default MindNodeCard;","export const MOUSE_BUTTON_LEFT = 0;\r\nexport const MOUSE_BUTTON_MIDDLE = 1;\r\nexport const MOUSE_BUTTON_RIGHT = 2;","import { Component } from \"react\";\r\nimport { MindNode } from \"../interfaces\";\r\nimport \"../styles/MindNodeInfo.css\";\r\n\r\ninterface MindNodeInfoProps {\r\n    node: MindNode;\r\n    nodes: Map<number, MindNode>;\r\n    onUpdate: (node: MindNode) => void;\r\n}\r\n \r\ninterface MindNodeInfoState {\r\n    inputingText: string;\r\n}\r\n \r\nclass MindNodeInfo extends Component<MindNodeInfoProps, MindNodeInfoState> {\r\n    constructor(props: MindNodeInfoProps) {\r\n        super(props);\r\n        this.state = {\r\n            inputingText: props.node.text,\r\n        };\r\n    }\r\n    render() { \r\n        const { uid, position, outPorts, inPorts } = this.props.node;\r\n        return (\r\n            <div className=\"MindNodeInfo\">\r\n                <div className=\"top-bar\"></div>\r\n\r\n                <div className=\"content\">\r\n                    <p>\r\n                        <span className=\"title\">UID：</span>\r\n                        <span className=\"text\">#{ uid }</span>\r\n                    </p>\r\n                    <p>\r\n                        <span className=\"title\">位置：</span>\r\n                        <span className=\"text\">({ position.join(\", \") })</span>\r\n                    </p>\r\n\r\n                    <p><span className=\"title\">内容：</span></p>\r\n                    <textarea\r\n                        value={ this.state.inputingText }\r\n                        onChange={ e => this.setText(e.target.value) }\r\n                    />\r\n\r\n                    <p className=\"title\">出线（{outPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        { outPorts.map(uid => (<li key={ uid } className=\"snapshot\">{ this.getBrief(uid) }</li>)) }\r\n                    </ol>\r\n\r\n                    <p className=\"title\">入线（{inPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        { inPorts.map(uid => (<li key={ uid } className=\"snapshot\">{ this.getBrief(uid) }</li>)) }\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setText(text: string) {\r\n        this.setState(() => ({ inputingText: text }));\r\n        const node: MindNode = {\r\n            ...this.props.node,\r\n            text,\r\n        };\r\n        this.props.onUpdate(node);\r\n    }\r\n\r\n    getBrief = (uid: number) => {\r\n        const node = this.props.nodes.get(uid);\r\n        if (node) {\r\n            return '#' + uid + '：' + node.text;\r\n        } else {\r\n            return '#' + uid;\r\n        }\r\n    }\r\n}\r\n \r\nexport default MindNodeInfo;","\r\nexport type Vec2 = [number, number];\r\nexport const X = 0;\r\nexport const Y = 1;\r\n\r\nexport function vec2Add(v1: Vec2, v2: Vec2): Vec2 {\r\n    return [v1[X] + v2[X], v1[Y] + v2[Y]];\r\n}\r\n\r\nexport function vec2Minus(v1: Vec2, v2: Vec2): Vec2 {\r\n    return [v1[X] - v2[X], v1[Y] - v2[Y]];\r\n}\r\n\r\nexport class UidGenerator {\r\n\r\n    public uidCounter: number = 0;\r\n\r\n    constructor(uidCounter: number = 0) {\r\n        this.uidCounter = uidCounter;\r\n    }\r\n\r\n    generate() {\r\n        return this.uidCounter++;\r\n    }\r\n\r\n}","import React, { Component, MouseEvent, RefObject } from 'react';\nimport './App.css';\nimport MindNodeCard from './components/MindNodeCard';\nimport MindNodeInfo from './components/MindNodeInfo';\nimport { MOUSE_BUTTON_LEFT, MOUSE_BUTTON_MIDDLE } from './constants';\nimport { MindNode, MindNodePool, Rect } from './interfaces';\nimport { getMapValue } from './util/javascript-extension';\nimport { Vec2, vec2Add, vec2Minus, X, Y } from './util/mathematics';\nimport { get2dContext, getPosition, getRect } from './util/ui';\n\nexport interface AppProps {\n\n}\n\nexport interface AppState {\n    uidCounter: number;\n    nodes: Array<MindNode>;\n    offset: Vec2;\n    editingNodeUid: number | null;\n    mouseState: 'dragNode' | 'dragPool' | 'chooseNodes' | null; \n    section: Rect | null;\n    dataString: string;\n}\n\n\nclass App extends Component<AppProps, AppState> {\n\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            uidCounter: 0,\n            nodes: [],\n            offset: [0, 0],\n            editingNodeUid: null,\n            mouseState: null,\n            section: null,\n            dataString: '',\n        };\n    }\n\n    componentDidMount() {\n        this.updateStateNodes();\n        this.drawLines();\n        window.addEventListener('resize', this.resetView);\n        this.resetView();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.resetView);\n    }\n\n    componentDidUpdate() {\n        this.drawLines();\n    }\n\n    render() {\n        return (\n            <div className=\"App\" >\n                {/* 顶部工具栏 */}\n                { this.renderTopBar() }\n\n                {/* 实际池子 */}\n                <div \n                    className={ \"node-pool\" + (this.draggingNodeStartPositions.size ? \" dragging\" : \"\")}\n                    ref={ this.poolRef }\n                    onMouseDown={ this.onMouseDown }\n                    onMouseMove={ this.onMouseMove }\n                    onMouseUp={ this.onMouseUp }\n                    onMouseLeave={ this.onMouseLeave }\n                >\n                    <canvas ref={ this.canvasRef } />\n\n                    {\n                        this.state.nodes.map(it => (\n                            <MindNodeCard\n                                key={ it.uid }\n                                anchor={ this.getAnchor() }\n                                node={ it }\n                                linking={ this.linkingNodeUid === it.uid }\n                                choosen={ this.choosenNodeUids.has(it.uid) }\n                                dragging={ this.draggingNodeStartPositions.has(it.uid) }\n                                onClick={ this.onClickNode }\n                                onDragStart={ this.onDragNodeStart }\n                                onRectUpdate={ (uid, rect) => this.nodeCardRects.set(uid, rect) }\n                                onClickLinkButton={ (uid) => this.linkNode(uid) }\n                                onClickChooseButton={ this.setNodeChoosen }\n                            />\n                        ))\n                    }\n\n                    { this.renderSection() }\n                    \n                    { this.renderNodeInfo() }\n                </div>\n\n                {/* 底部状态栏 */}\n                { this.renderBottomBar() }\n            </div>\n        );\n    }\n\n    // 每个节点卡片的矩形信息，仅保存运行时的UI信息，位置与尺寸\n    private readonly nodeCardRects: Map<number, Rect> = new Map();\n    // 所有节点列表，是实际的数据\n    private readonly nodes: Map<number, MindNode> = new Map();\n\n    //#region UI相关\n\n    /*\n     * O->A->N\n     * ----    :Origin to Anchor: Offset\n     *    ---- :Anchor to Node: Position (of node)\n     */\n\n    // 原点，应该是pool组件的中心点\n    private origin: Vec2 = [0, 0];\n\n    resetView = () => {\n        const box = this.poolRef.current?.getBoundingClientRect();\n        if (!box) return;\n        \n\n        this.origin = [box.width / 2, box.height / 2];\n        const canvas = this.canvasRef.current;\n        if (canvas) {\n            canvas.width = box.width;\n            canvas.height = box.height;\n        }\n        this.forceUpdate();\n    }\n\n    getAnchor(): Vec2 {\n        return vec2Add(this.origin, this.state.offset);\n    }\n\n    getPoolFix(): Vec2 {\n        return getPosition(getRect(this.poolRef));\n    }\n    \n    // 池子UI组件\n    private poolRef: RefObject<HTMLDivElement> = React.createRef();\n    // 连接线的画板UI组件\n    private canvasRef: RefObject<HTMLCanvasElement> = React.createRef();\n\n    hideNodeInfoView = () => this.setState(() => ({ editingNodeUid: null }));\n\n    drawLines() {\n        // console.log(\"drawLines\");\n        const canvasAndContext = get2dContext(this.canvasRef);\n        if (!canvasAndContext) {\n            console.log(\"Invalid canvas\");\n            return;\n        }\n        const [canvas, g] = canvasAndContext;\n\n        g.clearRect(0, 0, canvas.width, canvas.height);\n        // 开始画线\n        g.strokeStyle = \"#808080\";\n        g.fillStyle = \"#000000\";\n        g.lineWidth = 3;\n        // const anchor = this.getAnchor();\n        // 修正量，是画布的client位置\n        const fix: Vec2 = this.getPoolFix();\n\n        function getPoint(rect?: Rect): Vec2 {\n            if (rect) {\n                const { x, y, width, height } = rect;\n                const primative: Vec2 = [x + width / 2, y + height / 2];\n                return vec2Minus(primative, fix);\n            }\n            return [0, 0];\n        }\n        for (const node of Array.from(this.nodes.values())) {\n            const sourcePoint = getPoint(this.nodeCardRects.get(node.uid));\n            for (const portUid of node.outPorts) {\n                const targetNode = this.nodes.get(portUid);\n                if (!targetNode) continue;\n\n                const targetPoint = getPoint(this.nodeCardRects.get(targetNode.uid));\n\n                g.beginPath();\n                g.moveTo(...sourcePoint);\n                g.lineTo(...targetPoint);\n                g.stroke();\n            }\n        }\n    }\n\n    renderTopBar() {\n        return (\n            <div className=\"top-bar\">\n                <button onClick={ this.createNode }>新增</button>\n                <button onClick={ this.save }>保存</button>\n                <button onClick={ this.load }>载入</button>\n                <button onClick={ this.unchooseAllNodes }>取消选择</button>\n                <textarea\n                    value={ this.state.dataString }\n                    placeholder=\"在此输入/输出数据\"\n                    onChange={ e => this.setState(() => ({ dataString: e.target.value })) }\n                />\n            </div>\n        )\n    }\n\n    renderBottomBar() {\n        return (\n            <div className=\"bottom-bar\">\n                <span className=\"piece\">总节点数：{ this.state.nodes.length }</span>\n                <span className=\"piece\">选中节点数：{ this.choosenNodeUids.size }</span>\n            </div>\n        )\n    }\n\n    renderNodeInfo() {\n        const editingNode = (this.state.editingNodeUid !== null) ? (this.nodes.get(this.state.editingNodeUid)) : null;\n        if (!editingNode) return null;\n\n        return (\n            <div className=\"node-info\">\n                <button className=\"icon\" onClick={ this.hideNodeInfoView }>&gt;</button>\n                <MindNodeInfo\n                    key={ editingNode.uid }\n                    node={ editingNode }\n                    nodes={ this.nodes }\n                    onUpdate={ node => this.updateNode(node) }\n                />\n            </div>\n        );\n    }\n\n    renderSection() {\n        const { section } = this.state;\n        return section ? (\n            <div \n                className=\"section\"\n                style={{\n                    left: section.x + 'px',\n                    top: section.y + 'px',\n                    width: section.width + 'px',\n                    height: section.height + 'px',\n                }}\n            />\n        ) : null\n    }\n\n    //#endregion\n\n    //#region 数据控制\n\n    createNode = () => {\n        const uid = this.state.uidCounter;\n        this.setState(s => ({ uidCounter: s.uidCounter + 1 }));\n        const node: MindNode = {\n            uid,\n            position: vec2Minus([0, 0], this.state.offset),\n            text: `#${uid}`,\n            outPorts: [],\n            inPorts: [],\n        };\n\n        this.addNode(node);\n    }\n\n    addNode(node: MindNode) {\n        this.nodes.set(node.uid, node);\n        this.updateStateNodes();\n    }\n\n    updateNode(node: MindNode) {\n        this.nodes.set(node.uid, node);\n        this.updateStateNodes();\n    }\n\n    removeNode(uid: number) {\n        this.nodes.delete(uid);\n        this.nodeCardRects.delete(uid);\n        this.choosenNodeUids.delete(uid);\n        this.draggingNodeStartPositions.delete(uid);\n        this.updateStateNodes();\n    }\n\n    updateStateNodes() {\n        this.setState(() => ({ nodes: Array.from(this.nodes.values()) }));\n    }\n\n    // 正在连接的节点UID\n    private linkingNodeUid: number | null = null;\n\n    linkNode(uid: number) {\n        const targetNode = this.nodes.get(uid);\n        if (!targetNode) return;\n        if (this.linkingNodeUid !== null) {\n            if (this.linkingNodeUid !== targetNode.uid) {\n                const sourceNode = this.nodes.get(this.linkingNodeUid);\n                if (sourceNode && targetNode) {\n                    const outPorts = new Set(sourceNode.outPorts);\n                    const inPorts = new Set(targetNode.inPorts);\n                    if (outPorts.has(targetNode.uid)) {\n                        outPorts.delete(targetNode.uid);\n                        inPorts.delete(sourceNode.uid);\n                    } else {\n                        outPorts.add(targetNode.uid);\n                        inPorts.add(sourceNode.uid);\n                    }\n                    sourceNode.outPorts = Array.from(outPorts);\n                    targetNode.inPorts = Array.from(inPorts);\n                    this.updateStateNodes();\n                }\n            }\n            this.linkingNodeUid = null;\n        } else {\n            this.linkingNodeUid = targetNode.uid;\n        }\n    }\n\n    //#endregion\n\n    //#region 鼠标事件\n\n    onClickNode = (uid: number, event: MouseEvent) => {\n        if (event.ctrlKey) {\n            this.toggleChooseNode(uid);\n        } else {\n            this.setState(() => ({ editingNodeUid: uid }));\n        }\n    }\n\n    onMouseDown = (e: MouseEvent) => {\n        if (!!this.state.mouseState) return;\n\n        if (e.nativeEvent.button === MOUSE_BUTTON_LEFT) {\n            this.onSectionChooseStart(e);\n        } else if (e.nativeEvent.button === MOUSE_BUTTON_MIDDLE) {\n            this.onDragPoolStart(e);\n        }\n    }\n\n    onMouseMove = (e: MouseEvent) => {\n        if (!this.state.mouseState) return;\n\n        if (this.state.mouseState === 'dragNode') {\n            this.onDragNodeMove(e);\n        } else if (this.state.mouseState === 'dragPool') {\n            this.onDragPool(e);\n        } else if (this.state.mouseState === 'chooseNodes') {\n            this.onSectionChooseMove(e);\n        }\n    }\n\n    onMouseUp = (e: MouseEvent) => {\n        if (!this.state.mouseState) return;\n\n        if (this.state.mouseState === 'dragNode') {\n            this.onDragNodeMove(e);\n            this.onDragNodeEnd(e);\n        } else if (this.state.mouseState === 'dragPool') {\n            this.onDragPoolEnd(e);\n        } else if (this.state.mouseState === 'chooseNodes') {\n            this.onSectionChooseEnd(e);\n        }\n    }\n\n    onMouseLeave = (e: MouseEvent) => {\n        this.onMouseUp(e);\n    }\n\n    //#endregion\n\n    //#region 拖动节点相关\n\n    // 正在拖动的节点的UID列表\n    private readonly draggingNodeStartPositions: Map<number, Vec2> = new Map();\n    // 开始拖动时的鼠标相对屏幕的绝对位置\n    private dragNodeStartMousePosition: Vec2 = [0, 0];\n\n    onDragNodeStart = (uid: number, e: MouseEvent) => {\n        this.setState(() => ({ mouseState: 'dragNode' }));\n        this.dragNodeStartMousePosition = [e.screenX, e.screenY];\n\n        [\n            uid,\n            ...Array.from(this.choosenNodeUids)\n        ].forEach(uid => getMapValue(this.nodes, uid, node => this.draggingNodeStartPositions.set(uid, node.position)));\n    }\n\n    onDragNodeMove = (e: MouseEvent) => {\n        if (this.draggingNodeStartPositions.size) {\n            // console.log(\"onMouseDrag\")\n            const mousePosition: Vec2 = [e.screenX, e.screenY];\n            const deltaMousePosition: Vec2 = vec2Minus(mousePosition, this.dragNodeStartMousePosition);\n\n            for (const [uid, draggingNodeStartPosition] of Array.from(this.draggingNodeStartPositions.entries())) {\n                const newNodePosition = vec2Add(draggingNodeStartPosition, deltaMousePosition);\n                getMapValue(this.nodes, uid, node => \n                    this.updateNode({ \n                        ...node, \n                        position: newNodePosition,\n                    })\n                );\n            }\n            this.updateStateNodes();\n        }\n    }\n\n    onDragNodeEnd = (e: MouseEvent) => {\n        if (this.draggingNodeStartPositions.size) {\n            // console.log(\"onMouseDrop\")\n            this.draggingNodeStartPositions.clear();\n            this.updateStateNodes();\n        }\n        this.setState(() => ({ mouseState: null }));\n    }\n\n    //#endregion\n\n    //#region 拖动节点池相关\n\n    private dragPoolStartOffset: Vec2 = [0, 0];\n    private dragPoolStartMousePosition: Vec2 = [0, 0];\n    onDragPoolStart(e: MouseEvent) {\n        // console.log(\"onDragPoolStart\");\n        this.setState(() => ({ mouseState: 'dragPool' }));\n        this.dragPoolStartOffset = this.state.offset;\n        this.dragPoolStartMousePosition = [e.screenX, e.screenY];\n    }\n    \n    onDragPool(e: MouseEvent) {\n        e.stopPropagation();\n        const mousePosition: Vec2 = [e.screenX, e.screenY];\n        const deltaOffset = vec2Minus(mousePosition, this.dragPoolStartMousePosition);\n        this.setState(() => ({ offset: vec2Add(this.dragPoolStartOffset, deltaOffset) }));\n    }\n    \n    onDragPoolEnd(e: MouseEvent) {\n        this.onDragPool(e);\n        this.setState(() => ({ mouseState: null }));\n    }\n\n    //#endregion\n\n    //#region 持久化\n\n    buildPool(): MindNodePool {\n        return {\n            uidCounter: this.state.uidCounter,\n            offset: this.state.offset,\n            nodes: Array.from(this.nodes.values()),\n        };\n    }\n\n    load = () => {\n        try {\n            const pool: MindNodePool = JSON.parse(this.state.dataString);\n\n            this.nodes.clear();\n            this.nodeCardRects.clear();\n            this.draggingNodeStartPositions.clear();\n            this.choosenNodeUids.clear();\n            pool.nodes.forEach(it => this.nodes.set(it.uid, it));\n\n            this.setState(() => ({\n                uidCounter: pool.uidCounter,\n                offset: pool.offset,\n                nodes: pool.nodes,\n            }));\n        } catch (e) {\n            alert('解析数据失败！');\n        }\n    }\n\n    save = () => {\n        const pool: MindNodePool = this.buildPool();\n        this.setState(() => ({ dataString: JSON.stringify(pool) }));\n        console.log(pool);\n    }\n\n    //#endregion\n\n    //#region 节点选择相关\n\n    // 被选中的节点UID列表\n    private choosenNodeUids: Set<number> = new Set();\n\n    toggleChooseNode(uid: number) {\n        if (this.choosenNodeUids.has(uid)) {\n            this.unchooseNode(uid);\n        } else {\n            this.chooseNode(uid);\n        }\n    }\n\n    setNodeChoosen = (uid: number, value: boolean) => {\n        console.log(\"setNodeChoosen\", uid, value);\n        \n        if (value) {\n            this.chooseNode(uid);\n        } else {\n            this.unchooseNode(uid);\n        }\n    }\n\n    chooseNode(uid: number) {\n        this.choosenNodeUids.add(uid);\n        this.forceUpdate();\n    }\n\n    unchooseNode(uid: number) {\n        this.choosenNodeUids.delete(uid);\n        this.forceUpdate();\n    }\n\n    unchooseAllNodes = () => {\n        this.choosenNodeUids.clear();\n        this.forceUpdate();\n    }\n\n    // 选取开始时的鼠标位置\n    private sectionChooseStartMousePosition: Vec2 = [0, 0];\n\n    onSectionChooseStart(e: MouseEvent) {\n        this.setState(() => ({ mouseState: 'chooseNodes' }));\n        this.sectionChooseStartMousePosition = [e.clientX, e.clientY];\n    }\n    onSectionChooseMove(e: MouseEvent) {\n        const fix = this.getPoolFix();\n        const mousePosition = vec2Minus([e.clientX, e.clientY], fix);\n        const [x, y] = vec2Minus(this.sectionChooseStartMousePosition, fix);\n        this.setState(() => ({ section: {\n            x,\n            y,\n            width: mousePosition[X] - x,\n            height: mousePosition[Y] - y,\n        } }));\n    }\n    onSectionChooseEnd(e: MouseEvent) {\n        const [sectionLeft, sectionRight] = [this.sectionChooseStartMousePosition[X], e.clientX].sort();\n        const [sectionTop, sectionBottom] = [this.sectionChooseStartMousePosition[Y], e.clientY].sort();\n        const newChoosenNodeUids = Array.from(this.nodeCardRects.entries()).filter(\n            ([, { x, y, width, height }]) => \n                (x >= sectionLeft && y >= sectionTop && x + width <= sectionRight && y + height <= sectionBottom)\n        ).map(([uid]) => uid);\n        if (!e.ctrlKey) {\n            this.choosenNodeUids.clear();\n        }\n        newChoosenNodeUids.forEach(it => this.choosenNodeUids.add(it));\n        this.setState(() => ({ mouseState: null, section: null }));\n    }\n\n    //#endregion\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}