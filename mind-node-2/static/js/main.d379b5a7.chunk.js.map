{"version":3,"sources":["util/lang.ts","util/ui.ts","components/MindNodeCard.tsx","components/MindNodeInfo.tsx","core.ts","util/mathematics.ts","tools/Tool.ts","tools/CopyNodeTool.ts","tools/CreateNodeTool.ts","tools/DragNodeTool.ts","tools/DragPoolTool.ts","tools/LinkNodeTool.ts","tools/SelectTool.ts","tools/AutoTool.ts","constants.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toClassName","obj","arr","key","Object","prototype","hasOwnProperty","call","element","push","join","arrayFilterNonNull","array","filter","e","undefined","NOP","getRect","ref","box","current","getBoundingClientRect","x","y","width","height","MindNodeCard","selfRef","React","createRef","this","props","onRectUpdate","node","uid","position","text","background","color","anchor","anchorX","anchorY","linking","choosen","fixedX","fixedY","className","style","left","top","onClick","onMouseDown","onMouseMove","onMouseUp","split","map","it","i","Component","MindNodeInfo","getBrief","nodes","get","state","inputingBackground","inputingColor","inputingText","outPorts","inPorts","toFixed","value","onChange","setBackground","target","setColor","setText","length","setState","onUpdate","createNode","unlinkNodes","sourceNode","targetNode","Set","has","delete","Array","from","Vec2Util","angle","modulo","Number","isNaN","Math","cos","sin","vs","reduce","p","v","v1","v2","atan2","sqrt","getBezierPointAndAngle","t","controlPoints","cps","nextCPs","p0X","p0Y","p1X","p1Y","finalP0X","finalP0Y","finalP1X","finalP1Y","deltaX","deltaY","finalPoint","finalAngle","ToolBase","env","CopyNodeTool","actived","startMousePosition","startNodePositions","Map","mousePosition","clear","selectedNodeUids","values","copiedNodes","copyNode","genUid","console","log","forEach","n","set","add","delta","startPosition","CreateNodeTool","pixel2pool","DragNodeTool","DragPoolTool","startPoolOffset","offset","LinkNodeTool","virtualDstPos","dst","src","linkNodes","COMPARATOR","a","b","SelectTool","selectionArea","nativeEvent","a1","a2","index","equalsArray","sort","right","bottom","isNodeInRange","ctrlKey","rect","getNodeRect","AutoTool","tool","event","button","shiftKey","preventDefault","altKey","onStart","onMove","onEnd","TOOL_FLAGS","TOOL_NAMES","App","mounted","onkey","deleteSelectedNodes","poolRef","canvasRef","hideNodeInfoView","editingNodeUid","nodeCardRects","origin","resetView","canvas","notifyUpdate","dirty","update","updateStateNodes","drawLines","requestAnimationFrame","uidCounter","addNode","onClickNode","getToolEvent","ev","onMouseLeave","load","pool","raw","scale","assign","loadPool","JSON","parse","dataString","alert","save","buildPool","stringify","setNodeChoosen","unchooseAllNodes","ou","iu","toolFlag","window","addEventListener","setTool","removeEventListener","onContextMenu","renderTopBar","getAnchor","setNodeRect","onClickLinkButton","onClickChooseButton","renderSelectionArea","renderNodeInfo","renderBottomBar","canvasAndContext","context","getContext","get2dContext","g","clearRect","strokeStyle","fillStyle","lineWidth","fix","getPoolFix","pointCache","getPoint","cachedPoint","point","angleCache","getAngle","NaN","nodePosition","inRelative","inNodeUid","outRelative","outNodeUid","sourcePoint","slice","targetNodeUid","targetPoint","sourceAngle","targetAngle","controlHandleLength","controlPoint1","controlPoint2","centerPoint","centerAngle","beginPath","moveTo","bezierCurveTo","stroke","lineTo","PI","fill","f","bind","disabled","placeholder","size","editingNode","updateNode","o","s","sa","flag","stopPropagation","clientX","clientY","poolCoord","pixelCoord","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d379b5a7.chunk.js","sourcesContent":["// 将一个对象转换成className字符串\r\nexport function toClassName(obj: { [key: string]: (boolean | string) }): string {\r\n    const arr: Array<string> = [];\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            const element = obj[key];\r\n            if (typeof element === 'string') {\r\n                arr.push(element);\r\n            } else {\r\n                if (element) {\r\n                    arr.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return arr.join(' ');\r\n}\r\n\r\nexport function getMapValue<K, V>(map: Map<K, V>, key: K, handler: (value: V, key: K) => void) {\r\n    const value = map.get(key);\r\n    if (value) {\r\n        handler(value, key);\r\n    }\r\n}\r\n\r\nexport function filterSet<T>(set: Set<T>, filterFn: (e: T) => boolean): Set<T> {\r\n    const r: T[] = [];\r\n    set.forEach(it => {\r\n        if (filterFn(it)) {\r\n            r.push(it);\r\n        }\r\n    });\r\n    return new Set(r);\r\n}\r\n\r\nexport function equalsArray<T>(a1: Array<T>, a2: Array<T>): boolean {\r\n    if (a1.length !== a2.length) return false;\r\n    for (let index = 0; index < a1.length; index++) {\r\n        if (a1[index] !== a2[index]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nexport function arrayFilterNonNull<T, E = T | undefined | null>(array: Array<E>): Array<T> {\r\n    return array.filter(e => e || (e !== null && e !== undefined)) as any;\r\n}\r\n\r\nexport const NOP = () => {};","import { RefObject } from \"react\";\r\nimport { Rect } from \"../interfaces\";\r\nimport { Vec2 } from \"./mathematics\";\r\n\r\nexport function get2dContext(ref: RefObject<HTMLCanvasElement>): [HTMLCanvasElement, CanvasRenderingContext2D] | null {\r\n    const canvas = ref.current;\r\n    if (!canvas) return null;\r\n    const context = canvas.getContext('2d');\r\n    if (!context) return null;\r\n    return [canvas, context];\r\n}\r\n\r\nexport function getRect<T extends HTMLElement>(ref: RefObject<T>): Rect {\r\n    const box = ref.current?.getBoundingClientRect();\r\n    return {\r\n        x: box?.x || 0,\r\n        y: box?.y || 0,\r\n        width: box?.width || 0,\r\n        height: box?.height || 0,\r\n    };\r\n}\r\n\r\nexport function getPosition(rect?: Rect): Vec2 {\r\n    return [rect?.x || 0, rect?.y || 0];\r\n}","import React from \"react\";\r\nimport { Component, MouseEvent, RefObject } from \"react\";\r\nimport { Vec2 } from \"../util/mathematics\";\r\nimport \"../styles/MindNodeCard.css\";\r\nimport { MindNode, Rect } from \"../interfaces\";\r\nimport { toClassName } from \"../util/lang\";\r\nimport { getRect } from \"../util/ui\";\r\n\r\ninterface MindNodeCardProps {\r\n    anchor: Vec2;\r\n    node: MindNode;\r\n    linking: boolean;\r\n    choosen: boolean;\r\n    onClick: (e: MouseEvent, uid: number) => void;\r\n    onMouseDown: (e: MouseEvent, uid: number) => void;\r\n    onMouseMove: (e: MouseEvent, uid: number) => void;\r\n    onMouseUp: (e: MouseEvent, uid: number) => void;\r\n    onRectUpdate: (uid: number, rect: Rect) => void;\r\n    onClickLinkButton: (uid: number) => void;\r\n    onClickChooseButton: (uid: number, choosen: boolean) => void;\r\n}\r\n\r\nclass MindNodeCard extends Component<MindNodeCardProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            node: {\r\n                uid,\r\n                position: [x, y],\r\n                text,\r\n                background,\r\n                color,\r\n            },\r\n            anchor: [anchorX, anchorY],\r\n            linking,\r\n            choosen,\r\n        } = this.props;\r\n\r\n        // 实际的坐标\r\n        const fixedX = x + anchorX;\r\n        const fixedY = y + anchorY;\r\n\r\n        return (\r\n            <div\r\n                className={toClassName({ \"MindNodeCard\": true, linking, choosen })}\r\n                ref={this.selfRef}\r\n                style={{\r\n                    left: `${fixedX}px`,\r\n                    top: `${fixedY}px`,\r\n                }}\r\n                onClick={e => this.props.onClick(e, uid)}\r\n                onMouseDown={e => this.props.onMouseDown(e, uid)}\r\n                onMouseMove={e => this.props.onMouseMove(e, uid)}\r\n                onMouseUp={e => this.props.onMouseUp(e, uid)}\r\n            >\r\n                <div className=\"frame\" />\r\n\r\n                <div className=\"static\" style={{ background }}>\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"text\" style={{ color }}>\r\n                            {text.split(\"\\n\").map((it, i) => (<p key={i}>{it}</p>))}\r\n                        </div>\r\n\r\n                        {/* <div className=\"tool-bar\">\r\n                            <RadioButton\r\n                                key={linking ? 11 : 10}\r\n                                value={linking}\r\n                                onChange={() => this.props.onClickLinkButton(uid)}\r\n                            >\r\n                                <Icon name=\"link\" size=\"80%\" />\r\n                            </RadioButton>\r\n\r\n                            <RadioButton\r\n                                key={choosen ? 1 : 0}\r\n                                value={choosen}\r\n                                onChange={it => this.props.onClickChooseButton(uid, it)}\r\n                            >\r\n                                <Icon name=\"checked\" size=\"80%\" />\r\n                            </RadioButton>\r\n                        </div> */}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //#region 拖拽相关\r\n\r\n    private selfRef: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //#endregion\r\n}\r\n\r\nexport default MindNodeCard;","import { Component } from \"react\";\r\nimport { MindNode } from \"../interfaces\";\r\nimport \"../styles/MindNodeInfo.css\";\r\n\r\ninterface MindNodeInfoProps {\r\n    node: MindNode;\r\n    nodes: Map<number, MindNode>;\r\n    onUpdate: (node: MindNode) => void;\r\n}\r\n\r\ninterface MindNodeInfoState {\r\n    inputingBackground: string;\r\n    inputingColor: string;\r\n    inputingText: string;\r\n}\r\n\r\nclass MindNodeInfo extends Component<MindNodeInfoProps, MindNodeInfoState> {\r\n    constructor(props: MindNodeInfoProps) {\r\n        super(props);\r\n        this.state = {\r\n            inputingBackground: props.node.background,\r\n            inputingColor: props.node.color,\r\n            inputingText: props.node.text,\r\n        };\r\n    }\r\n    render() {\r\n        const { uid, position, outPorts, inPorts } = this.props.node;\r\n        return (\r\n            <div className=\"MindNodeInfo\">\r\n                <div className=\"top-bar\"></div>\r\n\r\n                <div className=\"content\">\r\n                    <p>\r\n                        <span className=\"title\">UID：</span>\r\n                        <span className=\"text\">#{uid}</span>\r\n                    </p>\r\n\r\n                    <p>\r\n                        <span className=\"title\">位置：</span>\r\n                        <span className=\"text\">({position.map(it => it.toFixed(1)).join(\", \")})</span>\r\n                    </p>\r\n\r\n                    <p className=\"field-color\">\r\n                        <span className=\"title\">背景样式：</span>\r\n                        <input\r\n                            className=\"color-input\"\r\n                            value={this.state.inputingBackground}\r\n                            onChange={e => this.setBackground(e.target.value)}\r\n                        />\r\n                        <div className=\"color-input-preview\" style={{ background: this.state.inputingBackground }} />\r\n                    </p>\r\n\r\n                    <p className=\"field-color\">\r\n                        <span className=\"title\">文字样式：</span>\r\n                        <input\r\n                            className=\"color-input\"\r\n                            value={this.state.inputingColor}\r\n                            onChange={e => this.setColor(e.target.value)}\r\n                        />\r\n                        <div className=\"color-input-preview\" style={{ background: this.state.inputingColor }} />\r\n                    </p>\r\n\r\n                    <p>\r\n                        <span className=\"title\">内容：</span>\r\n                        <textarea\r\n                            className=\"text-input\"\r\n                            value={this.state.inputingText}\r\n                            onChange={e => this.setText(e.target.value)}\r\n                        />\r\n                    </p>\r\n\r\n                    <p className=\"title\">出线（{outPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        {outPorts.map(uid => (<li key={uid} className=\"snapshot\">{this.getBrief(uid)}</li>))}\r\n                    </ol>\r\n\r\n                    <p className=\"title\">入线（{inPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        {inPorts.map(uid => (<li key={uid} className=\"snapshot\">{this.getBrief(uid)}</li>))}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setText(text: string) {\r\n        this.setState(() => ({ inputingText: text }));\r\n        const node: MindNode = { ...this.props.node, text };\r\n        this.props.onUpdate(node);\r\n    }\r\n\r\n    setBackground(background: string) {\r\n        this.setState(() => ({ inputingBackground: background }));\r\n        const node: MindNode = { ...this.props.node, background };\r\n        this.props.onUpdate(node);\r\n    }\r\n\r\n    setColor(color: string) {\r\n        this.setState(() => ({ inputingColor: color }));\r\n        const node: MindNode = { ...this.props.node, color };\r\n        this.props.onUpdate(node);\r\n    }\r\n\r\n    getBrief = (uid: number) => {\r\n        const node = this.props.nodes.get(uid);\r\n        if (node) {\r\n            return '#' + uid + '：' + node.text;\r\n        } else {\r\n            return '#' + uid;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MindNodeInfo;","import { MindNode, MindNodePool } from \"./interfaces\";\r\nimport { Vec2 } from \"./util/mathematics\";\r\n\r\nexport interface CreateNodeProps {\r\n    uid: number,\r\n    position: Vec2,\r\n}\r\n\r\nexport function copyNode(node: MindNode, { uid, position }: CreateNodeProps): MindNode {\r\n    return {\r\n        ...node,\r\n        uid,\r\n        position,\r\n        inPorts: [],\r\n        outPorts: [],\r\n    };\r\n}\r\n\r\nexport function createNode({ uid, position }: CreateNodeProps): MindNode {\r\n    return {\r\n        uid,\r\n        position,\r\n        text: `#${uid}`,\r\n        background: '#223344',\r\n        color: '#ffffff',\r\n        outPorts: [],\r\n        inPorts: [],\r\n    };\r\n}\r\n\r\nexport function loadPool(raw: MindNodePool): MindNodePool {\r\n    const pool: MindNodePool = {\r\n        uidCounter: raw.uidCounter || 0,\r\n        offset: raw.offset || [0, 0],\r\n        scale: raw.scale || 1,\r\n        nodes: raw.nodes ? raw.nodes.map(it => Object.assign(createNode(it), it)) : [],\r\n    };\r\n\r\n    return pool;\r\n}\r\nexport function linkNodes(sourceNode: MindNode, targetNode: MindNode): boolean {\r\n    if (sourceNode && targetNode && sourceNode.uid !== targetNode.uid) {\r\n        const outPorts = new Set(sourceNode.outPorts);\r\n        const inPorts = new Set(targetNode.inPorts);\r\n        if (outPorts.has(targetNode.uid)) {\r\n            outPorts.delete(targetNode.uid);\r\n            inPorts.delete(sourceNode.uid);\r\n        } else {\r\n            outPorts.add(targetNode.uid);\r\n            inPorts.add(sourceNode.uid);\r\n        }\r\n        sourceNode.outPorts = Array.from(outPorts);\r\n        targetNode.inPorts = Array.from(inPorts);\r\n        return true;\r\n    } else return false;\r\n}\r\n\r\nexport function unlinkNodes(sourceNode: MindNode, targetNode: MindNode) {\r\n    if (sourceNode && targetNode) {\r\n        const outPorts = new Set(sourceNode.outPorts);\r\n        const inPorts = new Set(targetNode.inPorts);\r\n        if (outPorts.has(targetNode.uid)) {\r\n            outPorts.delete(targetNode.uid);\r\n        }\r\n        if (inPorts.has(sourceNode.uid)) {\r\n            inPorts.delete(sourceNode.uid);\r\n        }\r\n        sourceNode.outPorts = Array.from(outPorts);\r\n        targetNode.inPorts = Array.from(inPorts);\r\n    }\r\n}","\r\nexport type Vec2 = [number, number];\r\nexport const X = 0;\r\nexport const Y = 1;\r\n\r\nexport function vec2FromAngle(angle: number, modulo: number = 1): Vec2 {\r\n    if (Number.isNaN(angle)) return [0, 0];\r\n    return [Math.cos(angle) * modulo, Math.sin(angle) * modulo]; \r\n}\r\n\r\nexport function vec2Copy(v: Vec2): Vec2 {\r\n    return [...v];\r\n}\r\n\r\nexport function vec2Add(...vs: Vec2[]): Vec2 {\r\n    return [vs.reduce((p, v) => p + v[0], 0), vs.reduce((p, v) => p + v[1], 0)];\r\n}\r\n\r\nexport function vec2Minus(v1: Vec2, v2: Vec2): Vec2 {\r\n    return [v1[X] - v2[X], v1[Y] - v2[Y]];\r\n}\r\n\r\nexport function vec2Normalize(v: Vec2): Vec2 {\r\n    if (v[0] === 0 && v[1] === 0) return [0, 0];\r\n    const angle = Math.atan2(v[1], v[0]);\r\n    return [Math.cos(angle), Math.sin(angle)];\r\n}\r\n\r\nexport function vec2Modulo(v: Vec2): number {\r\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\r\n}\r\n\r\nexport function vec2Angle(v: Vec2): number {\r\n    return Math.atan2(v[1], v[0]);\r\n}\r\n\r\nexport function vec2Multiply(v: Vec2, n: number): Vec2 {\r\n    return [v[0] * n, v[1] * n];\r\n}\r\n\r\nexport const Vec2Util =  {\r\n    zero(): Vec2 {\r\n        return [0, 0]; \r\n    },\r\n\r\n    unit(): Vec2 {\r\n        return [1, 1]; \r\n    },\r\n\r\n    of(x: number = 0, y: number = 0): Vec2 {\r\n        return [x, y]; \r\n    },\r\n\r\n    fromAngle(angle: number, modulo: number = 1): Vec2 {\r\n        if (Number.isNaN(angle)) return [0, 0];\r\n        return [Math.cos(angle) * modulo, Math.sin(angle) * modulo]; \r\n    },\r\n\r\n    add(...vs: Vec2[]): Vec2 {\r\n        return [vs.reduce((p, v) => p + v[0], 0), vs.reduce((p, v) => p + v[1], 0)];\r\n    },\r\n\r\n    minus(v1: Vec2, v2: Vec2): Vec2 {\r\n        return [v1[X] - v2[X], v1[Y] - v2[Y]];\r\n    },\r\n    \r\n    normalize(v: Vec2): Vec2 {\r\n        if (v[0] === 0 && v[1] === 0) return [0, 0];\r\n        const angle = Math.atan2(v[1], v[0]);\r\n        return [Math.cos(angle), Math.sin(angle)];\r\n    },\r\n    \r\n    modulo(v: Vec2): number {\r\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\r\n    },\r\n    \r\n    angle(v: Vec2): number {\r\n        return Math.atan2(v[1], v[0]);\r\n    },\r\n    \r\n    multiply(v: Vec2, n: number): Vec2 {\r\n        return [v[0] * n, v[1] * n];\r\n    },\r\n};\r\n\r\n\r\nexport class UidGenerator {\r\n\r\n    public uidCounter: number = 0;\r\n\r\n    constructor(uidCounter: number = 0) {\r\n        this.uidCounter = uidCounter;\r\n    }\r\n\r\n    generate() {\r\n        return this.uidCounter++;\r\n    }\r\n\r\n}\r\n\r\n// return [pointPosition, angle]\r\nexport function getBezierPointAndAngle(t: number, ...controlPoints: Vec2[]): [Vec2, number] {\r\n    if (controlPoints.length <= 1) return [controlPoints[0], 0];\r\n\r\n    let cps: Vec2[] = controlPoints;\r\n    while (cps.length > 2) {\r\n        const nextCPs: Vec2[] = [];\r\n        for (let i = 1; i < cps.length; i++) {\r\n            const [p0X, p0Y] = cps[i - 1];\r\n            const [p1X, p1Y] = cps[i];\r\n            nextCPs.push([p0X + (p1X - p0X) * t, p0Y + (p1Y - p0Y) * t]);\r\n        }\r\n        cps = nextCPs;\r\n    }\r\n    const [finalP0X, finalP0Y] = cps[0];\r\n    const [finalP1X, finalP1Y] = cps[1];\r\n    const deltaX = finalP1X - finalP0X;\r\n    const deltaY = finalP1Y - finalP0Y;\r\n    const finalPoint: Vec2 = [finalP0X + deltaX * t, finalP0Y + deltaY * t];\r\n    const finalAngle = Math.atan2(deltaY, deltaX);\r\n    return [finalPoint, finalAngle];\r\n}","import { MindNode, Rect } from \"../interfaces\";\r\nimport { Vec2 } from \"../util/mathematics\";\r\nimport { MouseEvent } from \"react\";\r\n\r\nexport interface ToolEvent {\r\n    mousePosition: Vec2;\r\n    node: MindNode | null;\r\n    nativeEvent: MouseEvent;\r\n}\r\n\r\nexport interface Tool {\r\n    onStart(event: ToolEvent): void;\r\n    onMove(event: ToolEvent): void;\r\n    onEnd(event: ToolEvent): void;\r\n}\r\n\r\nexport interface ToolEnv {\r\n    offset: Vec2;\r\n    scale: number;\r\n    // MindNode 实例可能会改变，所以在其它位置引用其uid较为妥当\r\n    nodes: Map<number, MindNode>;\r\n    getNodeRect(uid: number): Rect | null;\r\n\r\n    virtualDstPos: Vec2 | null;\r\n    selectedNodeUids: Set<number>;\r\n    selectionArea: Rect | null;\r\n    pixel2pool(vec: Vec2): Vec2;\r\n    genUid(): number;\r\n}\r\n\r\nexport abstract class ToolBase implements Tool {\r\n\r\n    protected env: ToolEnv;\r\n    constructor(env: ToolEnv) {\r\n        this.env = env;\r\n    }\r\n\r\n    abstract onStart(event: ToolEvent): void;\r\n\r\n    abstract onMove(event: ToolEvent): void;\r\n\r\n    abstract onEnd(event: ToolEvent): void;\r\n\r\n}","import { copyNode } from \"../core\";\r\nimport { MindNode } from \"../interfaces\";\r\nimport { arrayFilterNonNull } from \"../util/lang\";\r\nimport { Vec2Util, Vec2, vec2Copy } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 复制节点\r\nexport class CopyNodeTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n    private startNodePositions: Map<number, Vec2> = new Map();\r\n\r\n    onStart({ mousePosition, node }: ToolEvent): void {\r\n        this.startNodePositions.clear();\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n\r\n        let selectedNodeUids: Array<number> = Array.from(this.env.selectedNodeUids.values());\r\n\r\n        // 如果按下去的节点是被选中的，则改为选择当前节点\r\n        if (node && !this.env.selectedNodeUids.has(node.uid)) {\r\n            selectedNodeUids = [node.uid];\r\n            this.env.selectedNodeUids = new Set(selectedNodeUids);\r\n        }\r\n        // 复制选中节点\r\n        const copiedNodes = arrayFilterNonNull<MindNode>(Array.from(selectedNodeUids.values()).map(uid => this.env.nodes.get(uid)))\r\n            .map((node: MindNode) => copyNode(node, { uid: this.env.genUid(), position: vec2Copy(node.position) }));\r\n        console.log(\"copiedNodes\", copiedNodes);\r\n        // 清空选中节点\r\n        this.env.selectedNodeUids.clear()\r\n        // 把复制的节点加入节点池中，冰设置为选中\r\n        copiedNodes.forEach(n => {\r\n            this.env.nodes.set(n.uid, n);\r\n            this.env.selectedNodeUids.add(n.uid);\r\n        });\r\n\r\n        // 拖动所有选择节点一起移动\r\n        this.startNodePositions.clear();\r\n        for (const node of copiedNodes) {\r\n            if (!node) continue;\r\n            this.startNodePositions.set(node.uid, node.position);\r\n        }\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n\r\n        const delta = Vec2Util.minus(mousePosition, this.startMousePosition);\r\n        this.startNodePositions.forEach((startPosition, uid) => {\r\n            const node = this.env.nodes.get(uid);\r\n            if (!node) return;\r\n            node.position = Vec2Util.add(startPosition, delta);\r\n        });\r\n    }\r\n\r\n    onEnd(): void {\r\n        if (!this.actived) return;\r\n\r\n        this.startNodePositions.clear();\r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.actived = false;\r\n    }\r\n\r\n}","import { createNode } from \"../core\";\r\nimport { MindNode } from \"../interfaces\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class CreateNodeTool extends ToolBase {\r\n\r\n    onStart(): void { }\r\n\r\n    onMove(): void { }\r\n\r\n    onEnd({ mousePosition }: ToolEvent): void {\r\n        const position = this.env.pixel2pool(mousePosition);\r\n        const uid = this.env.genUid();\r\n        const node: MindNode = createNode({ uid, position });\r\n        this.env.nodes.set(uid, node);\r\n    }\r\n\r\n}","import { Vec2Util, Vec2 } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class DragNodeTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n    private startNodePositions: Map<number, Vec2> = new Map();\r\n\r\n    onStart({ mousePosition, node }: ToolEvent): void {\r\n        this.startNodePositions.clear();\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n\r\n        let selectedNodeUids: Array<number> = Array.from(this.env.selectedNodeUids.values());\r\n        // 如果按下去的节点是被选中的，则改为选择当前节点\r\n        if (node && !this.env.selectedNodeUids.has(node.uid)) { \r\n            selectedNodeUids = [node.uid];\r\n            this.env.selectedNodeUids = new Set(selectedNodeUids);\r\n        }\r\n        // 拖动所有选择节点一起移动\r\n        this.startNodePositions.clear();\r\n        for (const uid of selectedNodeUids) {\r\n            const node = this.env.nodes.get(uid);\r\n            if (!node) continue;\r\n            this.startNodePositions.set(uid, node.position);\r\n        }\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n        \r\n        \r\n        const delta = Vec2Util.minus(mousePosition, this.startMousePosition);\r\n        this.startNodePositions.forEach((startPosition, uid) => {\r\n            const node = this.env.nodes.get(uid);\r\n            if (!node) return;\r\n            node.position = Vec2Util.add(startPosition, delta);\r\n        });\r\n    }\r\n    \r\n    onEnd(): void {\r\n        if (!this.actived) return;\r\n        \r\n        this.startNodePositions.clear();\r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.actived = false;\r\n    }\r\n\r\n}","import { Vec2Util, Vec2 } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class DragPoolTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startPoolOffset: Vec2 = Vec2Util.zero();\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n\r\n    onStart({ mousePosition }: ToolEvent): void {\r\n        this.startPoolOffset = this.env.offset;\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n        \r\n        this.env.offset = Vec2Util.add(this.startPoolOffset, Vec2Util.minus(mousePosition, this.startMousePosition));\r\n    }\r\n    \r\n    onEnd(): void {\r\n        if (!this.actived) return;\r\n        \r\n        this.startPoolOffset = Vec2Util.zero();\r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.actived = false;\r\n    }\r\n\r\n}","import { linkNodes } from \"../core\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class LinkNodeTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n\r\n    onStart({ node }: ToolEvent): void {\r\n        if (!node) return;\r\n\r\n        this.actived = true;\r\n\r\n        // 如果按下去的节点是没被选中的，则改为选择当前节点\r\n        if (node && !this.env.selectedNodeUids.has(node.uid)) {\r\n            this.env.selectedNodeUids = new Set([node.uid]);\r\n        }\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n        this.env.virtualDstPos = mousePosition;\r\n    }\r\n\r\n    onEnd({ node }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n\r\n        this.env.virtualDstPos = null;\r\n\r\n        if (node) {\r\n            const dst = node;\r\n            this.env.selectedNodeUids.forEach(uid => {\r\n                const src = this.env.nodes.get(uid);\r\n                if (src) {\r\n                    linkNodes(src, dst);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.actived = false;\r\n    }\r\n\r\n}","import { MindNode } from \"../interfaces\";\r\nimport { equalsArray } from \"../util/lang\";\r\nimport { Vec2, Vec2Util, X, Y } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n\r\nconst COMPARATOR = (a: number, b: number) => a - b;\r\n\r\n// 拖动整个节点池\r\nexport class SelectTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n\r\n    onStart({ mousePosition }: ToolEvent): void {\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n\r\n        const [width, height] = Vec2Util.minus(mousePosition, this.startMousePosition);\r\n        this.env.selectionArea = {\r\n            x: this.startMousePosition[X],\r\n            y: this.startMousePosition[Y],\r\n            width,\r\n            height,\r\n        };\r\n    }\r\n    \r\n    onEnd({ mousePosition, node, nativeEvent }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n\r\n        let selectedNodeUids: Array<number> = [];\r\n        if (equalsArray(this.startMousePosition, mousePosition)) { // 没有移动，那么就选中当前这个节点\r\n            if (node) {\r\n                selectedNodeUids = [node.uid];\r\n            }\r\n        } else { // 有移动，那么范围选取\r\n            const [left, right] = [this.startMousePosition[X], mousePosition[X]].sort(COMPARATOR);\r\n            const [top, bottom] = [this.startMousePosition[Y], mousePosition[Y]].sort(COMPARATOR);\r\n            selectedNodeUids = Array.from(this.env.nodes.values())\r\n                .filter(node => this.isNodeInRange(node, left, right, top, bottom))\r\n                .map(node => node.uid);\r\n        }\r\n\r\n        if (nativeEvent.ctrlKey) {\r\n            selectedNodeUids.forEach(it => this.env.selectedNodeUids.add(it));\r\n        } else {\r\n            this.env.selectedNodeUids = new Set(selectedNodeUids);\r\n        }\r\n        \r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.env.selectionArea = null;\r\n        this.actived = false;\r\n    }\r\n\r\n    isNodeInRange(node: MindNode, left: number, right: number, top: number, bottom: number) {\r\n        const rect = this.env.getNodeRect(node.uid);\r\n        if (!rect) return false;\r\n        const { x, y, width, height } = rect;\r\n        return (x >= left && y >= top && x + width < right && y + height < bottom);\r\n    }\r\n\r\n}","import { MOUSE_BUTTON_MIDDLE, MOUSE_BUTTON_RIGHT } from \"../constants\";\r\nimport { CopyNodeTool } from \"./CopyNodeTool\";\r\nimport { CreateNodeTool } from \"./CreateNodeTool\";\r\nimport { DragNodeTool } from \"./DragNodeTool\";\r\nimport { DragPoolTool } from \"./DragPoolTool\";\r\nimport { LinkNodeTool } from \"./LinkNodeTool\";\r\nimport { SelectTool } from \"./SelectTool\";\r\nimport { Tool, ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class AutoTool extends ToolBase {\r\n\r\n    private tool: Tool | null = null;\r\n\r\n    onStart(event: ToolEvent): void {\r\n        const { node, nativeEvent } = event;\r\n        if (nativeEvent.button === MOUSE_BUTTON_MIDDLE) {\r\n            this.tool = new DragPoolTool(this.env);\r\n        } else if (nativeEvent.button === MOUSE_BUTTON_RIGHT) {\r\n            this.tool = new LinkNodeTool(this.env);\r\n        } else if (nativeEvent.ctrlKey) {\r\n            this.tool = new SelectTool(this.env);\r\n        } else if (nativeEvent.shiftKey) {\r\n            this.tool = new CreateNodeTool(this.env);\r\n            nativeEvent.preventDefault();\r\n        } else if (nativeEvent.altKey) {\r\n            this.tool = new CopyNodeTool(this.env);\r\n        } else if (node) {\r\n            this.tool = new DragNodeTool(this.env);\r\n        } else {\r\n            this.tool = new SelectTool(this.env);\r\n        }\r\n        this.tool.onStart(event);\r\n    }\r\n\r\n    onMove(event: ToolEvent): void {\r\n        this.tool?.onMove(event);\r\n    }\r\n    \r\n    onEnd(event: ToolEvent): void {\r\n        this.tool?.onEnd(event);\r\n        this.tool = new SelectTool(this.env);\r\n    }\r\n\r\n}","export const MOUSE_BUTTON_LEFT = 0;\r\nexport const MOUSE_BUTTON_MIDDLE = 1;\r\nexport const MOUSE_BUTTON_RIGHT = 2;","import React, { Component, MouseEvent, RefObject } from 'react';\r\nimport './App.css';\r\nimport MindNodeCard from './components/MindNodeCard';\r\nimport MindNodeInfo from './components/MindNodeInfo';\r\nimport { createNode, loadPool, unlinkNodes } from './core';\r\nimport { MindNode, MindNodePool, Rect } from './interfaces';\r\nimport { AutoTool } from './tools/AutoTool';\r\nimport { CopyNodeTool } from './tools/CopyNodeTool';\r\nimport { CreateNodeTool } from './tools/CreateNodeTool';\r\nimport { DragNodeTool } from './tools/DragNodeTool';\r\nimport { DragPoolTool } from './tools/DragPoolTool';\r\nimport { LinkNodeTool } from './tools/LinkNodeTool';\r\nimport { SelectTool } from './tools/SelectTool';\r\nimport { Tool, ToolEnv, ToolEvent } from './tools/Tool';\r\nimport { arrayFilterNonNull, NOP } from './util/lang';\r\nimport { getBezierPointAndAngle, Vec2Util, Vec2 } from './util/mathematics';\r\nimport { get2dContext, getPosition, getRect } from './util/ui';\r\n\r\ntype ToolFlag = 'createNode' | 'linkNode' | 'copyNode' | 'dragNode' | 'dragPool' | 'select' | 'auto';\r\n\r\nconst TOOL_FLAGS: ToolFlag[] = ['createNode', 'linkNode', 'copyNode', 'dragNode', 'dragPool', 'select', 'auto'];\r\nconst TOOL_NAMES = {\r\n    'createNode': \"增加\",\r\n    'linkNode': \"链接\",\r\n    'copyNode': \"复制\",\r\n    'dragNode': \"移动\",\r\n    'dragPool': \"拖动\",\r\n    'select': \"选择\",\r\n    'auto': \"自动\",\r\n};\r\n\r\nexport interface AppProps {\r\n\r\n}\r\n\r\nexport interface AppState {\r\n    uidCounter: number;\r\n    nodes: Array<MindNode>;\r\n    offset: Vec2;\r\n    scale: number;\r\n    editingNodeUid: number | null;\r\n    toolFlag: ToolFlag | null;\r\n    selectionArea: Rect | null;\r\n    dataString: string;\r\n}\r\n\r\n\r\nclass App extends Component<AppProps, AppState> implements ToolEnv {\r\n\r\n    constructor(props: AppProps) {\r\n        super(props);\r\n        this.state = {\r\n            uidCounter: 0,\r\n            nodes: [],\r\n            offset: [0, 0],\r\n            scale: 1,\r\n            editingNodeUid: null,\r\n            toolFlag: null,\r\n            selectionArea: null,\r\n            dataString: '',\r\n        };\r\n    }\r\n\r\n    private mounted = false;\r\n\r\n    componentDidMount() {\r\n        this.mounted = true;\r\n        this.updateStateNodes();\r\n        this.drawLines();\r\n        window.addEventListener('resize', this.resetView);\r\n        window.addEventListener('keyup', this.onkey);\r\n        this.resetView();\r\n        this.setTool('auto');\r\n        requestAnimationFrame(this.update);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.resetView);\r\n        window.removeEventListener('keyup', this.onkey);\r\n        this.mounted = false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\" onContextMenu={e => e.preventDefault()}>\r\n                {/* 顶部工具栏 */}\r\n                {this.renderTopBar()}\r\n\r\n                {/* 实际池子 */}\r\n                <div\r\n                    className={\"node-pool\"}\r\n                    ref={this.poolRef}\r\n                    onMouseDown={this.onMouseDown}\r\n                    onMouseMove={this.onMouseMove}\r\n                    onMouseUp={this.onMouseUp}\r\n                    onMouseLeave={this.onMouseLeave}\r\n                >\r\n                    <canvas ref={this.canvasRef} />\r\n\r\n                    {\r\n                        this.state.nodes.map(it => (\r\n                            <MindNodeCard\r\n                                key={it.uid}\r\n                                anchor={this.getAnchor()}\r\n                                node={it}\r\n                                linking={false}\r\n                                choosen={this.selectedNodeUids.has(it.uid)}\r\n                                onClick={this.onClickNode}\r\n                                onMouseDown={this.onMouseDown}\r\n                                onMouseMove={this.onMouseMove}\r\n                                onMouseUp={this.onMouseUp}\r\n                                onRectUpdate={(uid, rect) => this.setNodeRect(uid, rect)}\r\n                                onClickLinkButton={NOP}\r\n                                onClickChooseButton={NOP}\r\n                            />\r\n                        ))\r\n                    }\r\n\r\n                    {this.renderSelectionArea()}\r\n\r\n                    {this.renderNodeInfo()}\r\n                </div>\r\n\r\n                {/* 底部状态栏 */}\r\n                {this.renderBottomBar()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onkey = (e: KeyboardEvent) => {\r\n        if (e.key === 'Delete') {\r\n            this.deleteSelectedNodes();\r\n        }\r\n    }\r\n\r\n    //#region 渲染\r\n\r\n    // 池子UI组件\r\n    private poolRef: RefObject<HTMLDivElement> = React.createRef();\r\n    // 连接线的画板UI组件\r\n    private canvasRef: RefObject<HTMLCanvasElement> = React.createRef();\r\n\r\n    public virtualDstPos: Vec2 | null = null;\r\n\r\n    hideNodeInfoView = () => this.setState(() => ({ editingNodeUid: null }));\r\n\r\n    drawLines() {\r\n        // console.log(\"this.virtualDstPos\", this.virtualDstPos)\r\n        // console.log(\"drawLines\");\r\n        const canvasAndContext = get2dContext(this.canvasRef);\r\n        if (!canvasAndContext) {\r\n            console.log(\"Invalid canvas\");\r\n            return;\r\n        }\r\n        const [canvas, g] = canvasAndContext;\r\n\r\n        g.clearRect(0, 0, canvas.width, canvas.height);\r\n        // 开始画线\r\n        g.strokeStyle = \"#808080\";\r\n        g.fillStyle = \"#808080\";\r\n        g.lineWidth = 1.5;\r\n        // const anchor = this.getAnchor();\r\n        // 修正量，是画布的client位置\r\n        const fix: Vec2 = this.getPoolFix();\r\n\r\n        const pointCache = new Map<number, Vec2>();\r\n        const getPoint: (uid: number) => Vec2 = (uid: number) => {\r\n            const cachedPoint = pointCache.get(uid);\r\n            if (cachedPoint) return cachedPoint;\r\n\r\n            if (uid === -1) {\r\n                const point = Vec2Util.minus(this.virtualDstPos || [0, 0], fix);\r\n                pointCache.set(uid, point);\r\n                return point;\r\n            }\r\n\r\n            const rect = this.nodeCardRects.get(uid);\r\n            if (rect) {\r\n                const point = Vec2Util.add(Vec2Util.minus([rect.x, rect.y], fix), [rect.width / 2, rect.height / 2]);\r\n                pointCache.set(uid, point);\r\n                return point;\r\n            }\r\n            return [0, 0];\r\n        };\r\n\r\n        const nodes = this.nodes;\r\n        const angleCache = new Map<number, number>();\r\n        const getAngle: (uid: number) => number = (uid: number) => {\r\n\r\n            if (angleCache.has(uid)) return angleCache.get(uid) || NaN;\r\n\r\n            const nodePosition = getPoint(uid);\r\n\r\n            if (uid === -1) {\r\n                let inRelative: Vec2 = [0, 0];\r\n                for (const inNodeUid of Array.from(this.selectedNodeUids.values())) {\r\n                    inRelative = Vec2Util.add(inRelative, Vec2Util.normalize(Vec2Util.minus(nodePosition, getPoint(inNodeUid))));\r\n                }\r\n                inRelative = Vec2Util.normalize(inRelative);\r\n                const angle = Math.atan2(inRelative[1], inRelative[0]);\r\n                angleCache.set(uid, angle);\r\n                return angle;\r\n            }\r\n\r\n            const node = nodes.get(uid);\r\n            if (!node) return NaN;\r\n\r\n            let inRelative: Vec2 = [0, 0];\r\n            for (const inNodeUid of node.inPorts) {\r\n                inRelative = Vec2Util.add(inRelative, Vec2Util.normalize(Vec2Util.minus(nodePosition, getPoint(inNodeUid))));\r\n            }\r\n            inRelative = Vec2Util.normalize(inRelative);\r\n\r\n            let outRelative: Vec2 = [0, 0];\r\n            for (const outNodeUid of node.outPorts) {\r\n                outRelative = Vec2Util.add(outRelative, Vec2Util.normalize(Vec2Util.minus(getPoint(outNodeUid), nodePosition)));\r\n            }\r\n            if (this.selectedNodeUids.has(node.uid) && this.virtualDstPos) {\r\n                outRelative = Vec2Util.add(outRelative, Vec2Util.normalize(Vec2Util.minus(this.virtualDstPos, nodePosition)));\r\n            }\r\n            outRelative = Vec2Util.normalize(outRelative);\r\n\r\n            const finalPoint = Vec2Util.add(inRelative, outRelative);\r\n            const angle = Math.atan2(finalPoint[1], finalPoint[0]);\r\n\r\n            angleCache.set(node.uid, angle);\r\n            return angle;\r\n        };\r\n\r\n        for (const node of Array.from(this.nodes.values())) {\r\n            const sourcePoint = getPoint(node.uid);\r\n            const outPorts = node.outPorts.slice();\r\n            if (this.selectedNodeUids.has(node.uid) && this.virtualDstPos) {\r\n                outPorts.push(-1);\r\n            }\r\n\r\n            for (const targetNodeUid of outPorts) {\r\n\r\n                const targetPoint = getPoint(targetNodeUid);\r\n                const sourceAngle = getAngle(node.uid);\r\n                const targetAngle = getAngle(targetNodeUid);\r\n                if (isNaN(sourceAngle) || isNaN(targetAngle)) continue;\r\n\r\n                const controlHandleLength = Vec2Util.modulo(Vec2Util.minus(targetPoint, sourcePoint)) / 3;\r\n\r\n                const controlPoint1 = Vec2Util.add(sourcePoint, Vec2Util.fromAngle(sourceAngle, controlHandleLength));\r\n                const controlPoint2 = Vec2Util.minus(targetPoint, Vec2Util.fromAngle(targetAngle, controlHandleLength));\r\n\r\n                const controlPoints: Vec2[] = [sourcePoint, controlPoint1, controlPoint2, targetPoint];\r\n\r\n                const [centerPoint, centerAngle] = getBezierPointAndAngle(0.55, ...controlPoints);\r\n\r\n\r\n                g.beginPath();\r\n                g.moveTo(...sourcePoint);\r\n                g.bezierCurveTo(...controlPoint1, ...controlPoint2, ...targetPoint);\r\n                g.stroke();\r\n                g.beginPath();\r\n                g.moveTo(...Vec2Util.add(centerPoint, Vec2Util.fromAngle(centerAngle, g.lineWidth * 3)));\r\n                g.lineTo(...Vec2Util.add(centerPoint, Vec2Util.fromAngle(centerAngle + 0.8 * Math.PI, g.lineWidth * 3)));\r\n                g.lineTo(...Vec2Util.add(centerPoint, Vec2Util.fromAngle(centerAngle - 0.8 * Math.PI, g.lineWidth * 3)));\r\n                g.fill();\r\n            }\r\n        }\r\n    }\r\n\r\n    renderTopBar() {\r\n        return (\r\n            <div className=\"top-bar\">\r\n                <button onClick={this.createNode}>新增</button>\r\n                <button onClick={this.save}>保存</button>\r\n                <button onClick={this.load}>载入</button>\r\n                <button onClick={this.unchooseAllNodes}>取消选择</button>\r\n                <button onClick={this.deleteSelectedNodes}>删除所选</button>\r\n                {TOOL_FLAGS.map(f => (\r\n                    <button\r\n                        key={f}\r\n                        onClick={this.setTool.bind(this, f)}\r\n                        disabled={this.state.toolFlag === f}\r\n                    >{TOOL_NAMES[f]}</button>\r\n                ))}\r\n                <textarea\r\n                    value={this.state.dataString}\r\n                    placeholder=\"在此输入/输出数据\"\r\n                    onChange={e => this.setState(() => ({ dataString: e.target.value }))}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderBottomBar() {\r\n        return (\r\n            <div className=\"bottom-bar\">\r\n                <span className=\"piece\">总节点数：{this.state.nodes.length}</span>\r\n                <span className=\"piece\">选中节点数：{this.selectedNodeUids.size}</span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderNodeInfo() {\r\n        const editingNode = (this.state.editingNodeUid !== null) ? (this.nodes.get(this.state.editingNodeUid)) : null;\r\n        if (!editingNode) return null;\r\n\r\n        return (\r\n            <div className=\"node-info\">\r\n                <button className=\"icon\" onClick={this.hideNodeInfoView}>&gt;</button>\r\n                <MindNodeInfo\r\n                    key={editingNode.uid}\r\n                    node={editingNode}\r\n                    nodes={this.nodes}\r\n                    onUpdate={node => this.updateNode(node)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSelectionArea() {\r\n        const { selectionArea } = this.state;\r\n        if (!selectionArea) return null;\r\n        let { x, y, width, height } = selectionArea;\r\n        let [left, top] = Vec2Util.minus([x, y], this.getPoolFix());\r\n        if (width < 0) {\r\n            width = -width;\r\n            left = left - width;\r\n        }\r\n        if (height < 0) {\r\n            height = -height;\r\n            top = top - height;\r\n        }\r\n        return (\r\n            <div\r\n                className=\"section\"\r\n                style={{\r\n                    left: left + 'px',\r\n                    top: top + 'px',\r\n                    width: width + 'px',\r\n                    height: height + 'px',\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 工具\r\n\r\n    get offset() { return this.state.offset; }\r\n    set offset(o) { this.setState(() => ({ offset: o })) }\r\n\r\n    get scale() { return this.state.scale; }\r\n    set scale(s) { this.setState(() => ({ scale: s })) }\r\n\r\n    get selectionArea() { return this.state.selectionArea; }\r\n    set selectionArea(sa) { this.setState(() => ({ selectionArea: sa })) }\r\n\r\n    private nodeCardRects: Map<number, Rect> = new Map();\r\n    public selectedNodeUids: Set<number> = new Set();\r\n\r\n    getNodeRect(uid: number): Rect | null {\r\n        return this.nodeCardRects.get(uid) || null;\r\n    }\r\n\r\n    setNodeRect(uid: number, rect: Rect) {\r\n        this.nodeCardRects.set(uid, rect);\r\n    }\r\n\r\n    private tool: Tool | null = null;\r\n\r\n    setTool(flag: ToolFlag | null) {\r\n        switch (flag) {\r\n            case 'createNode': this.tool = new CreateNodeTool(this); break;\r\n            case 'linkNode': this.tool = new LinkNodeTool(this); break;\r\n            case 'copyNode': this.tool = new CopyNodeTool(this); break;\r\n            case 'dragNode': this.tool = new DragNodeTool(this); break;\r\n            case 'dragPool': this.tool = new DragPoolTool(this); break;\r\n            case 'select': this.tool = new SelectTool(this); break;\r\n            case 'auto': this.tool = new AutoTool(this); break;\r\n            default: this.tool = null; break;\r\n        }\r\n        this.setState(() => ({ toolFlag: flag }));\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region UI相关\r\n\r\n    /*\r\n     * O->A->N\r\n     * ----    :Origin to Anchor: Offset\r\n     *    ---- :Anchor to Node: Position (of node)\r\n     */\r\n\r\n    // 原点，应该是pool组件的中心点\r\n    private origin: Vec2 = [0, 0];\r\n\r\n    resetView = () => {\r\n        const box = this.poolRef.current?.getBoundingClientRect();\r\n        if (!box) return;\r\n\r\n\r\n        this.origin = [box.width / 2, box.height / 2];\r\n        const canvas = this.canvasRef.current;\r\n        if (canvas) {\r\n            canvas.width = box.width;\r\n            canvas.height = box.height;\r\n        }\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    getAnchor(): Vec2 {\r\n        return Vec2Util.add(this.origin, this.state.offset);\r\n    }\r\n\r\n    getPoolFix(): Vec2 {\r\n        return getPosition(getRect(this.poolRef));\r\n    }\r\n\r\n    // 是否需要更新\r\n    private dirty: boolean = true;\r\n\r\n    notifyUpdate() {\r\n        this.dirty = true;\r\n    }\r\n\r\n    update = () => {\r\n        if (!this.mounted) return;\r\n        if (this.dirty) {\r\n            this.updateStateNodes();\r\n            this.drawLines();\r\n            this.dirty = false;\r\n        }\r\n        requestAnimationFrame(this.update);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 数据控制\r\n\r\n    // 所有节点列表，是实际的数据\r\n    public readonly nodes: Map<number, MindNode> = new Map();\r\n\r\n    private uidCounter: number = 0;\r\n\r\n    genUid() {\r\n        const uid = this.uidCounter++;\r\n        this.setState(() => ({ uidCounter: this.uidCounter }));\r\n        return uid;\r\n    }\r\n\r\n    createNode = () => {\r\n        const node: MindNode = createNode({ uid: this.genUid(), position: Vec2Util.minus([0, 0], this.state.offset) });\r\n        this.addNode(node);\r\n    }\r\n\r\n    addNode(node: MindNode) {\r\n        this.nodes.set(node.uid, node);\r\n        this.updateStateNodes();\r\n    }\r\n\r\n    updateNode(node: MindNode) {\r\n        this.nodes.set(node.uid, node);\r\n        this.updateStateNodes();\r\n    }\r\n\r\n    removeNode(uid: number) {\r\n        this.nodes.delete(uid);\r\n        this.nodeCardRects.delete(uid);\r\n        this.selectedNodeUids.delete(uid);\r\n        this.updateStateNodes();\r\n    }\r\n\r\n    updateStateNodes() {\r\n        this.setState(() => ({ nodes: Array.from(this.nodes.values()) }));\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 鼠标事件\r\n\r\n    onClickNode = (event: MouseEvent, uid: number) => {\r\n        this.setState(() => ({ editingNodeUid: uid }));\r\n    }\r\n\r\n    private getToolEvent(e: MouseEvent, uid?: number): ToolEvent {\r\n        if (typeof uid === 'number') {\r\n            e.stopPropagation();\r\n        }\r\n        const node = typeof uid === 'number' ? (this.nodes.get(uid) || null) : null;\r\n        // const mousePosition = Vec2.minus([e.clientX, e.clientY], this.getPoolFix());\r\n        const mousePosition: Vec2 = [e.clientX, e.clientY];\r\n        return {\r\n            mousePosition,\r\n            node,\r\n            nativeEvent: e,\r\n        };\r\n    }\r\n\r\n    onMouseDown = (e: MouseEvent, uid?: number) => {\r\n        this.tool?.onStart(this.getToolEvent(e, uid));\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    onMouseMove = (e: MouseEvent, uid?: number) => {\r\n        this.tool?.onMove(this.getToolEvent(e, uid));\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    onMouseUp = (e: MouseEvent, uid?: number) => {\r\n        const ev = this.getToolEvent(e, uid);\r\n        this.tool?.onMove(ev);\r\n        this.tool?.onEnd(ev);\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    onMouseLeave = (e: MouseEvent, uid?: number) => {\r\n        this.onMouseUp(e, uid);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 坐标变换\r\n\r\n    // 把数据里的坐标转换为在.pool DOM元素种像素为单位的坐标\r\n    pool2pixel(poolCoord: Vec2): Vec2 {\r\n        return Vec2Util.add(poolCoord, this.getAnchor());\r\n    }\r\n\r\n    // 在.pool DOM元素种像素为单位的坐标转换为把数据里的坐标\r\n    pixel2pool(pixelCoord: Vec2): Vec2 {\r\n        return Vec2Util.minus(Vec2Util.minus(pixelCoord, this.getAnchor()), this.getPoolFix());\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 持久化\r\n\r\n    buildPool(): MindNodePool {\r\n        return {\r\n            uidCounter: this.state.uidCounter,\r\n            offset: this.state.offset,\r\n            scale: this.state.scale,\r\n            nodes: Array.from(this.nodes.values()),\r\n        };\r\n    }\r\n\r\n    load = () => {\r\n        try {\r\n            const raw: MindNodePool = JSON.parse(this.state.dataString);\r\n\r\n            const pool: MindNodePool = loadPool(raw);\r\n\r\n            this.nodes.clear();\r\n            this.nodeCardRects.clear();\r\n            this.selectedNodeUids.clear();\r\n            pool.nodes.forEach(it => this.nodes.set(it.uid, it));\r\n\r\n            this.setState(() => ({\r\n                uidCounter: pool.uidCounter,\r\n                offset: pool.offset,\r\n                nodes: pool.nodes,\r\n                scale: pool.scale,\r\n            }));\r\n            this.uidCounter = pool.uidCounter;\r\n        } catch (e) {\r\n            alert('解析数据失败！');\r\n        }\r\n    }\r\n\r\n    save = () => {\r\n        const pool: MindNodePool = this.buildPool();\r\n        this.setState(() => ({ dataString: JSON.stringify(pool) }));\r\n        console.log(pool);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region 节点选择相关\r\n\r\n    setNodeChoosen = (uid: number, value: boolean) => {\r\n        if (value) {\r\n            this.selectedNodeUids.add(uid);\r\n        } else {\r\n            this.selectedNodeUids.delete(uid);\r\n        }\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    unchooseAllNodes = () => {\r\n        this.selectedNodeUids.clear();\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    deleteSelectedNodes = () => {\r\n        this.selectedNodeUids.forEach(uid => {\r\n            this.nodeCardRects.delete(uid);\r\n            const node = this.nodes.get(uid);\r\n            if (node) {\r\n                this.nodes.delete(uid);\r\n                arrayFilterNonNull<MindNode>(node.outPorts.map(ou => this.nodes.get(ou))).forEach(dst => unlinkNodes(node, dst));\r\n                arrayFilterNonNull<MindNode>(node.inPorts.map(iu => this.nodes.get(iu))).forEach(src => unlinkNodes(src, node));\r\n            }\r\n        });\r\n        this.selectedNodeUids.clear();\r\n        this.notifyUpdate();\r\n    }\r\n\r\n    //#endregion\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}