{"version":3,"sources":["util/javascript-extension.ts","util/ui.ts","components/RadioButton.tsx","components/Icon.tsx","components/MindNodeCard.tsx","components/MindNodeInfo.tsx","tools/Tool.ts","tools/CreateNodeTool.ts","util/mathematics.ts","tools/DragNodeTool.ts","tools/DragPoolTool.ts","tools/SelectTool.ts","tools/AutoTool.ts","constants.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["toClassName","obj","arr","key","Object","prototype","hasOwnProperty","call","element","push","join","getRect","ref","box","current","getBoundingClientRect","x","y","width","height","STOP_EVENT","e","stopPropagation","RadioButton","props","className","border","checked","value","onMouseDown","onMouseUp","onClick","onChange","children","Icon","rowSize","size","alt","name","src","style","MindNodeCard","selfRef","React","createRef","this","onRectUpdate","node","uid","position","text","anchor","anchorX","anchorY","linking","choosen","fixedX","fixedY","left","top","onMouseMove","split","map","it","i","onClickLinkButton","onClickChooseButton","Component","MindNodeInfo","getBrief","nodes","get","state","inputingText","outPorts","inPorts","setText","target","length","setState","onUpdate","ToolBase","env","CreateNodeTool","mousePosition","pixel2pool","genUid","set","Vec2Util","angle","modulo","Number","isNaN","Math","cos","sin","vs","reduce","p","v","v1","v2","atan2","sqrt","getBezierPointAndAngle","t","controlPoints","cps","nextCPs","p0X","p0Y","p1X","p1Y","finalP0X","finalP0Y","finalP1X","finalP1Y","deltaX","deltaY","finalPoint","finalAngle","DragNodeTool","actived","startMousePosition","startNodePositions","Map","clear","selectedNodeUids","Array","from","values","has","Set","delta","forEach","startPosition","DragPoolTool","startPoolOffset","offset","SelectTool","selectionArea","nativeEvent","a1","a2","index","equalsArray","sort","right","bottom","filter","rect","getNodeRect","ctrlKey","add","AutoTool","tool","event","button","shiftKey","onStart","onMove","onEnd","TOOL_FLAGS","TOOL_NAMES","App","mounted","poolRef","canvasRef","hideNodeInfoView","editingNodeUid","nodeCardRects","origin","resetView","canvas","notifyUpdate","dirty","update","updateStateNodes","drawLines","requestAnimationFrame","createNode","addNode","linkingNodeUid","onClickNode","getToolEvent","ev","onMouseLeave","load","pool","JSON","parse","dataString","uidCounter","scale","alert","save","buildPool","stringify","console","log","setNodeChoosen","delete","unchooseAllNodes","deleteSelectedNodes","toolFlag","window","addEventListener","setTool","removeEventListener","renderTopBar","getAnchor","setNodeRect","linkNode","renderSelectionArea","renderNodeInfo","renderBottomBar","canvasAndContext","context","getContext","get2dContext","g","clearRect","strokeStyle","fillStyle","lineWidth","fix","getPoolFix","pointCache","getPoint","cachedPoint","point","angleCache","getAngle","NaN","nodePosition","inRelative","inNodeUid","inNode","outRelative","outNodeUid","outNode","sourcePoint","portUid","targetNode","targetPoint","controlHandleLength","sourceAngle","targetAngle","controlPoint1","controlPoint2","centerPoint","centerAngle","beginPath","moveTo","bezierCurveTo","stroke","lineTo","PI","fill","f","bind","disabled","placeholder","editingNode","updateNode","o","s","sa","flag","sourceNode","clientX","clientY","poolCoord","pixelCoord","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fea3115a.chunk.js","sourcesContent":["// 将一个对象转换成className字符串\r\nexport function toClassName(obj: { [key: string]: (boolean | string) }): string {\r\n    const arr: Array<string> = [];\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            const element = obj[key];\r\n            if (typeof element === 'string') {\r\n                arr.push(element);\r\n            } else {\r\n                if (element) {\r\n                    arr.push(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return arr.join(' ');\r\n}\r\n\r\nexport function getMapValue<K, V>(map: Map<K, V>, key: K, handler: (value: V, key: K) => void) {\r\n    const value = map.get(key);\r\n    if (value) {\r\n        handler(value, key);\r\n    }\r\n}\r\n\r\nexport function filterSet<T>(set: Set<T>, filterFn: (e: T) => boolean): Set<T> {\r\n    const r: T[] = [];\r\n    set.forEach(it => {\r\n        if (filterFn(it)) {\r\n            r.push(it);\r\n        }\r\n    });\r\n    return new Set(r);\r\n}\r\n\r\nexport function equalsArray<T>(a1: Array<T>, a2: Array<T>): boolean {\r\n    if (a1.length !== a2.length) return false;\r\n    for (let index = 0; index < a1.length; index++) {\r\n        if (a1[index] !== a2[index]) return false;\r\n    }\r\n    return true;\r\n}","import { RefObject } from \"react\";\r\nimport { Rect } from \"../interfaces\";\r\nimport { Vec2 } from \"./mathematics\";\r\n\r\nexport function get2dContext(ref: RefObject<HTMLCanvasElement>): [HTMLCanvasElement, CanvasRenderingContext2D] | null {\r\n    const canvas = ref.current;\r\n    if (!canvas) return null;\r\n    const context = canvas.getContext('2d');\r\n    if (!context) return null;\r\n    return [canvas, context];\r\n}\r\n\r\nexport function getRect<T extends HTMLElement>(ref: RefObject<T>): Rect {\r\n    const box = ref.current?.getBoundingClientRect();\r\n    return {\r\n        x: box?.x || 0,\r\n        y: box?.y || 0,\r\n        width: box?.width || 0,\r\n        height: box?.height || 0,\r\n    };\r\n}\r\n\r\nexport function getPosition(rect?: Rect): Vec2 {\r\n    return [rect?.x || 0, rect?.y || 0];\r\n}","import { MouseEvent, ReactNode } from 'react';\r\nimport '../styles/RadioButton.css';\r\nimport { toClassName } from '../util/javascript-extension';\r\n\r\ninterface RadioButtonProps {\r\n    children?: ReactNode;\r\n    border?: boolean;\r\n    value: boolean;\r\n    onChange: (value: boolean) => void;\r\n}\r\n\r\nconst STOP_EVENT = (e: MouseEvent) => e.stopPropagation();\r\n \r\nfunction RadioButton(props: RadioButtonProps) {\r\n    return (\r\n        <div \r\n            className={ toClassName({ \"RadioButton\": true, border: !!props.border, checked: props.value }) }\r\n            onMouseDown={ STOP_EVENT }\r\n            onMouseUp={ STOP_EVENT }\r\n            onClick={ () => props.onChange(!props.value) }    \r\n        >\r\n            { props.children }\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default RadioButton;","\r\ninterface IconProps {\r\n    name: string;\r\n    size?: number | string;\r\n}\r\n \r\nfunction Icon(props: IconProps) { \r\n    const rowSize = props.size || 'auto';\r\n    const size = typeof rowSize === 'number' ? rowSize + 'px' : rowSize;\r\n    return (\r\n        <img \r\n            alt={ props.name }\r\n            src={ 'icons/' + props.name + '.svg' }\r\n            style={{\r\n                width: size,\r\n                height: size,\r\n            }}\r\n        />\r\n    );\r\n}\r\n \r\nexport default Icon;","import React from \"react\";\r\nimport { Component, MouseEvent, RefObject } from \"react\";\r\nimport { Vec2 } from \"../util/mathematics\";\r\nimport \"../styles/MindNodeCard.css\";\r\nimport { MindNode, Rect } from \"../interfaces\";\r\nimport { toClassName } from \"../util/javascript-extension\";\r\nimport { getRect } from \"../util/ui\";\r\nimport RadioButton from \"./RadioButton\";\r\nimport Icon from \"./Icon\";\r\n\r\ninterface MindNodeCardProps {\r\n    anchor: Vec2;\r\n    node: MindNode;\r\n    linking: boolean;\r\n    choosen: boolean;\r\n    onClick: (e: MouseEvent, uid: number) => void;\r\n    onMouseDown: (e: MouseEvent, uid: number) => void;\r\n    onMouseMove: (e: MouseEvent, uid: number) => void;\r\n    onMouseUp: (e: MouseEvent, uid: number) => void;\r\n    onRectUpdate: (uid: number, rect: Rect) => void;\r\n    onClickLinkButton: (uid: number) => void;\r\n    onClickChooseButton: (uid: number, choosen: boolean) => void;\r\n}\r\n \r\nclass MindNodeCard extends Component<MindNodeCardProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.props.onRectUpdate(this.props.node.uid, getRect(this.selfRef));\r\n    }\r\n\r\n    render() { \r\n        const { \r\n            node: { \r\n                uid,\r\n                position: [x, y], \r\n                text,\r\n            }, \r\n            anchor: [anchorX, anchorY], \r\n            linking,\r\n            choosen, \r\n        } = this.props;\r\n\r\n        // 实际的坐标\r\n        const fixedX = x + anchorX;\r\n        const fixedY = y + anchorY;\r\n        \r\n        return (\r\n            <div \r\n                className={ toClassName({ \"MindNodeCard\": true, linking, choosen }) } \r\n                ref={ this.selfRef }\r\n                style={{\r\n                    left: `${fixedX}px`,\r\n                    top: `${fixedY}px`,\r\n                }}\r\n                onClick={ e => this.props.onClick(e, uid) }\r\n                onMouseDown={ e => this.props.onMouseDown(e, uid) }\r\n                onMouseMove={ e => this.props.onMouseMove(e, uid) }\r\n                onMouseUp={ e => this.props.onMouseUp(e, uid) }\r\n            >\r\n                <div className=\"frame\" />\r\n\r\n                <div className=\"static\">\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"text\">\r\n                            { text.split(\"\\n\").map((it, i) => (<p key={ i }>{ it }</p>)) }\r\n                        </div>\r\n                        \r\n                        <div className=\"tool-bar\">\r\n                            <RadioButton\r\n                                key={ linking ? 11 : 10 }\r\n                                value={ linking }\r\n                                onChange={ () => this.props.onClickLinkButton(uid) }\r\n                            >\r\n                                <Icon name=\"link\" size=\"80%\"/>\r\n                            </RadioButton>\r\n                            \r\n                            <RadioButton\r\n                                key={ choosen ? 1 : 0 }\r\n                                value={ choosen }\r\n                                onChange={ it => this.props.onClickChooseButton(uid, it) }\r\n                            >\r\n                                <Icon name=\"checked\" size=\"80%\"/>\r\n                            </RadioButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    //#region 拖拽相关\r\n\r\n    private selfRef: RefObject<HTMLDivElement> = React.createRef();\r\n\r\n    //#endregion\r\n}\r\n \r\nexport default MindNodeCard;","import { Component } from \"react\";\r\nimport { MindNode } from \"../interfaces\";\r\nimport \"../styles/MindNodeInfo.css\";\r\n\r\ninterface MindNodeInfoProps {\r\n    node: MindNode;\r\n    nodes: Map<number, MindNode>;\r\n    onUpdate: (node: MindNode) => void;\r\n}\r\n \r\ninterface MindNodeInfoState {\r\n    inputingText: string;\r\n}\r\n \r\nclass MindNodeInfo extends Component<MindNodeInfoProps, MindNodeInfoState> {\r\n    constructor(props: MindNodeInfoProps) {\r\n        super(props);\r\n        this.state = {\r\n            inputingText: props.node.text,\r\n        };\r\n    }\r\n    render() { \r\n        const { uid, position, outPorts, inPorts } = this.props.node;\r\n        return (\r\n            <div className=\"MindNodeInfo\">\r\n                <div className=\"top-bar\"></div>\r\n\r\n                <div className=\"content\">\r\n                    <p>\r\n                        <span className=\"title\">UID：</span>\r\n                        <span className=\"text\">#{ uid }</span>\r\n                    </p>\r\n                    <p>\r\n                        <span className=\"title\">位置：</span>\r\n                        <span className=\"text\">({ position.join(\", \") })</span>\r\n                    </p>\r\n\r\n                    <p><span className=\"title\">内容：</span></p>\r\n                    <textarea\r\n                        value={ this.state.inputingText }\r\n                        onChange={ e => this.setText(e.target.value) }\r\n                    />\r\n\r\n                    <p className=\"title\">出线（{outPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        { outPorts.map(uid => (<li key={ uid } className=\"snapshot\">{ this.getBrief(uid) }</li>)) }\r\n                    </ol>\r\n\r\n                    <p className=\"title\">入线（{inPorts.length}个）：</p>\r\n                    <ol className=\"text\">\r\n                        { inPorts.map(uid => (<li key={ uid } className=\"snapshot\">{ this.getBrief(uid) }</li>)) }\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    setText(text: string) {\r\n        this.setState(() => ({ inputingText: text }));\r\n        const node: MindNode = {\r\n            ...this.props.node,\r\n            text,\r\n        };\r\n        this.props.onUpdate(node);\r\n    }\r\n\r\n    getBrief = (uid: number) => {\r\n        const node = this.props.nodes.get(uid);\r\n        if (node) {\r\n            return '#' + uid + '：' + node.text;\r\n        } else {\r\n            return '#' + uid;\r\n        }\r\n    }\r\n}\r\n \r\nexport default MindNodeInfo;","import { MindNode, Rect } from \"../interfaces\";\r\nimport { Vec2 } from \"../util/mathematics\";\r\nimport { MouseEvent } from \"react\";\r\n\r\nexport interface ToolEvent {\r\n    mousePosition: Vec2;\r\n    node: MindNode | null;\r\n    nativeEvent: MouseEvent;\r\n}\r\n\r\nexport interface Tool {\r\n    onStart(event: ToolEvent): void;\r\n    onMove(event: ToolEvent): void;\r\n    onEnd(event: ToolEvent): void;\r\n}\r\n\r\nexport interface ToolEnv {\r\n    offset: Vec2;\r\n    scale: number;\r\n    // MindNode 实例可能会改变，所以在其它位置引用其uid较为妥当\r\n    nodes: Map<number, MindNode>;\r\n    getNodeRect(uid: number): Rect | null;\r\n\r\n    selectedNodeUids: Set<number>;\r\n    selectionArea: Rect | null;\r\n    pixel2pool(vec: Vec2): Vec2;\r\n    genUid(): number;\r\n}\r\n\r\nexport abstract class ToolBase implements Tool {\r\n\r\n    protected env: ToolEnv;\r\n    constructor(env: ToolEnv) {\r\n        this.env = env;\r\n    }\r\n\r\n    abstract onStart(event: ToolEvent): void;\r\n\r\n    abstract onMove(event: ToolEvent): void;\r\n\r\n    abstract onEnd(event: ToolEvent): void;\r\n\r\n}","import { MindNode } from \"../interfaces\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class CreateNodeTool extends ToolBase {\r\n\r\n    onStart(): void { }\r\n\r\n    onMove(): void { }\r\n    \r\n    onEnd({ mousePosition }: ToolEvent): void {\r\n        const position = this.env.pixel2pool(mousePosition);\r\n        const uid = this.env.genUid();\r\n        const node: MindNode = {\r\n            uid,\r\n            position,\r\n            text: `#${uid}`,\r\n            outPorts: [],\r\n            inPorts: [],\r\n        };\r\n        this.env.nodes.set(uid, node);\r\n    }\r\n\r\n}","\r\nexport type Vec2 = [number, number];\r\nexport const X = 0;\r\nexport const Y = 1;\r\n\r\nexport function vec2FromAngle(angle: number, modulo: number = 1): Vec2 {\r\n    if (Number.isNaN(angle)) return [0, 0];\r\n    return [Math.cos(angle) * modulo, Math.sin(angle) * modulo]; \r\n}\r\n\r\nexport function vec2Add(...vs: Vec2[]): Vec2 {\r\n    return [vs.reduce((p, v) => p + v[0], 0), vs.reduce((p, v) => p + v[1], 0)];\r\n}\r\n\r\nexport function vec2Minus(v1: Vec2, v2: Vec2): Vec2 {\r\n    return [v1[X] - v2[X], v1[Y] - v2[Y]];\r\n}\r\n\r\nexport function vec2Normalize(v: Vec2): Vec2 {\r\n    if (v[0] === 0 && v[1] === 0) return [0, 0];\r\n    const angle = Math.atan2(v[1], v[0]);\r\n    return [Math.cos(angle), Math.sin(angle)];\r\n}\r\n\r\nexport function vec2Modulo(v: Vec2): number {\r\n    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\r\n}\r\n\r\nexport function vec2Angle(v: Vec2): number {\r\n    return Math.atan2(v[1], v[0]);\r\n}\r\n\r\nexport function vec2Multiply(v: Vec2, n: number): Vec2 {\r\n    return [v[0] * n, v[1] * n];\r\n}\r\n\r\nexport const Vec2Util =  {\r\n    zero(): Vec2 {\r\n        return [0, 0]; \r\n    },\r\n\r\n    unit(): Vec2 {\r\n        return [1, 1]; \r\n    },\r\n\r\n    of(x: number = 0, y: number = 0): Vec2 {\r\n        return [x, y]; \r\n    },\r\n\r\n    fromAngle(angle: number, modulo: number = 1): Vec2 {\r\n        if (Number.isNaN(angle)) return [0, 0];\r\n        return [Math.cos(angle) * modulo, Math.sin(angle) * modulo]; \r\n    },\r\n\r\n    add(...vs: Vec2[]): Vec2 {\r\n        return [vs.reduce((p, v) => p + v[0], 0), vs.reduce((p, v) => p + v[1], 0)];\r\n    },\r\n\r\n    minus(v1: Vec2, v2: Vec2): Vec2 {\r\n        return [v1[X] - v2[X], v1[Y] - v2[Y]];\r\n    },\r\n    \r\n    normalize(v: Vec2): Vec2 {\r\n        if (v[0] === 0 && v[1] === 0) return [0, 0];\r\n        const angle = Math.atan2(v[1], v[0]);\r\n        return [Math.cos(angle), Math.sin(angle)];\r\n    },\r\n    \r\n    modulo(v: Vec2): number {\r\n        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);\r\n    },\r\n    \r\n    angle(v: Vec2): number {\r\n        return Math.atan2(v[1], v[0]);\r\n    },\r\n    \r\n    multiply(v: Vec2, n: number): Vec2 {\r\n        return [v[0] * n, v[1] * n];\r\n    },\r\n};\r\n\r\n\r\nexport class UidGenerator {\r\n\r\n    public uidCounter: number = 0;\r\n\r\n    constructor(uidCounter: number = 0) {\r\n        this.uidCounter = uidCounter;\r\n    }\r\n\r\n    generate() {\r\n        return this.uidCounter++;\r\n    }\r\n\r\n}\r\n\r\n// return [pointPosition, angle]\r\nexport function getBezierPointAndAngle(t: number, ...controlPoints: Vec2[]): [Vec2, number] {\r\n    if (controlPoints.length <= 1) return [controlPoints[0], 0];\r\n\r\n    let cps: Vec2[] = controlPoints;\r\n    while (cps.length > 2) {\r\n        const nextCPs: Vec2[] = [];\r\n        for (let i = 1; i < cps.length; i++) {\r\n            const [p0X, p0Y] = cps[i - 1];\r\n            const [p1X, p1Y] = cps[i];\r\n            nextCPs.push([p0X + (p1X - p0X) * t, p0Y + (p1Y - p0Y) * t]);\r\n        }\r\n        cps = nextCPs;\r\n    }\r\n    const [finalP0X, finalP0Y] = cps[0];\r\n    const [finalP1X, finalP1Y] = cps[1];\r\n    const deltaX = finalP1X - finalP0X;\r\n    const deltaY = finalP1Y - finalP0Y;\r\n    const finalPoint: Vec2 = [finalP0X + deltaX * t, finalP0Y + deltaY * t];\r\n    const finalAngle = Math.atan2(deltaY, deltaX);\r\n    return [finalPoint, finalAngle];\r\n}","import { Vec2Util, Vec2 } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class DragNodeTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n    private startNodePositions: Map<number, Vec2> = new Map();\r\n\r\n    onStart({ mousePosition, node }: ToolEvent): void {\r\n        this.startNodePositions.clear();\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n\r\n        let selectedNodeUids: Array<number> = Array.from(this.env.selectedNodeUids.values());\r\n        // 如果按下去的节点是被选中的，则改为选择当前节点\r\n        if (node && !this.env.selectedNodeUids.has(node.uid)) { \r\n            selectedNodeUids = [node.uid];\r\n            this.env.selectedNodeUids = new Set(selectedNodeUids);\r\n        }\r\n        // 拖动所有选择节点一起移动\r\n        for (const uid of selectedNodeUids) {\r\n            const node = this.env.nodes.get(uid);\r\n            if (!node) continue;\r\n            this.startNodePositions.set(uid, node.position);\r\n        }\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n        \r\n        \r\n        const delta = Vec2Util.minus(mousePosition, this.startMousePosition);\r\n        this.startNodePositions.forEach((startPosition, uid) => {\r\n            const node = this.env.nodes.get(uid);\r\n            if (!node) return;\r\n            node.position = Vec2Util.add(startPosition, delta);\r\n        });\r\n    }\r\n    \r\n    onEnd(): void {\r\n        if (!this.actived) return;\r\n        \r\n        this.startNodePositions.clear();\r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.actived = false;\r\n    }\r\n\r\n}","import { Vec2Util, Vec2 } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class DragPoolTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startPoolOffset: Vec2 = Vec2Util.zero();\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n\r\n    onStart({ mousePosition }: ToolEvent): void {\r\n        this.startPoolOffset = this.env.offset;\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n        \r\n        this.env.offset = Vec2Util.add(this.startPoolOffset, Vec2Util.minus(mousePosition, this.startMousePosition));\r\n    }\r\n    \r\n    onEnd(): void {\r\n        if (!this.actived) return;\r\n        \r\n        this.startPoolOffset = Vec2Util.zero();\r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.actived = false;\r\n    }\r\n\r\n}","import { equalsArray } from \"../util/javascript-extension\";\r\nimport { Vec2, Vec2Util, X, Y } from \"../util/mathematics\";\r\nimport { ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class SelectTool extends ToolBase {\r\n\r\n    private actived: boolean = false;\r\n    private startMousePosition: Vec2 = Vec2Util.zero();\r\n\r\n    onStart({ mousePosition }: ToolEvent): void {\r\n        this.startMousePosition = mousePosition;\r\n        this.actived = true;\r\n    }\r\n\r\n    onMove({ mousePosition }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n\r\n        const [width, height] = Vec2Util.minus(mousePosition, this.startMousePosition);\r\n        this.env.selectionArea = {\r\n            x: this.startMousePosition[X],\r\n            y: this.startMousePosition[Y],\r\n            width,\r\n            height,\r\n        };\r\n    }\r\n    \r\n    onEnd({ mousePosition, node, nativeEvent }: ToolEvent): void {\r\n        if (!this.actived) return;\r\n\r\n        let selectedNodeUids: Array<number> = [];\r\n        if (equalsArray(this.startMousePosition, mousePosition)) { // 没有移动，那么就选中当前这个节点\r\n            if (node) {\r\n                selectedNodeUids = [node.uid];\r\n            }\r\n        } else { // 有移动，那么范围选取\r\n            const [left, right] = [this.startMousePosition[X], mousePosition[X]].sort();\r\n            const [top, bottom] = [this.startMousePosition[Y], mousePosition[Y]].sort();\r\n            selectedNodeUids = Array.from(this.env.nodes.values()).filter((node) => {\r\n                const rect = this.env.getNodeRect(node.uid);\r\n                if (!rect) return false;\r\n                const { x, y, width, height } = rect;\r\n                return (x >= left && y >= top && x + width < right && y + height < bottom);\r\n            }).map(node => node.uid);\r\n        }\r\n\r\n        if (nativeEvent.ctrlKey) {\r\n            selectedNodeUids.forEach(it => this.env.selectedNodeUids.add(it));\r\n        } else {\r\n            this.env.selectedNodeUids = new Set(selectedNodeUids);\r\n        }\r\n        \r\n        this.startMousePosition = Vec2Util.zero();\r\n        this.env.selectionArea = null;\r\n        this.actived = false;\r\n    }\r\n\r\n}","import { MOUSE_BUTTON_MIDDLE } from \"../constants\";\r\nimport { CreateNodeTool } from \"./CreateNodeTool\";\r\nimport { DragNodeTool } from \"./DragNodeTool\";\r\nimport { DragPoolTool } from \"./DragPoolTool\";\r\nimport { SelectTool } from \"./SelectTool\";\r\nimport { Tool, ToolBase, ToolEvent } from \"./Tool\";\r\n\r\n// 拖动整个节点池\r\nexport class AutoTool extends ToolBase {\r\n\r\n    private tool: Tool | null = null;\r\n\r\n    onStart(event: ToolEvent): void {\r\n        const { node, nativeEvent } = event;\r\n        if (nativeEvent.button === MOUSE_BUTTON_MIDDLE) {\r\n            this.tool = new DragPoolTool(this.env);\r\n        } else if (nativeEvent.ctrlKey) {\r\n            this.tool = new SelectTool(this.env);\r\n        } else if (nativeEvent.shiftKey) {\r\n            this.tool = new CreateNodeTool(this.env);\r\n        } else if (node) {\r\n            this.tool = new DragNodeTool(this.env);\r\n        } else {\r\n            this.tool = new SelectTool(this.env);\r\n        }\r\n        this.tool.onStart(event);\r\n    }\r\n\r\n    onMove(event: ToolEvent): void {\r\n        this.tool?.onMove(event);\r\n    }\r\n    \r\n    onEnd(event: ToolEvent): void {\r\n        this.tool?.onEnd(event);\r\n    }\r\n\r\n}","export const MOUSE_BUTTON_LEFT = 0;\r\nexport const MOUSE_BUTTON_MIDDLE = 1;\r\nexport const MOUSE_BUTTON_RIGHT = 2;","import React, { Component, MouseEvent, RefObject } from 'react';\nimport './App.css';\nimport MindNodeCard from './components/MindNodeCard';\nimport MindNodeInfo from './components/MindNodeInfo';\nimport { MindNode, MindNodePool, Rect } from './interfaces';\nimport { AutoTool } from './tools/AutoTool';\nimport { CreateNodeTool } from './tools/CreateNodeTool';\nimport { DragNodeTool } from './tools/DragNodeTool';\nimport { DragPoolTool } from './tools/DragPoolTool';\nimport { SelectTool } from './tools/SelectTool';\nimport { Tool, ToolEnv, ToolEvent } from './tools/Tool';\nimport { getBezierPointAndAngle, Vec2Util, Vec2 } from './util/mathematics';\nimport { get2dContext, getPosition, getRect } from './util/ui';\n\ntype ToolFlag = 'createNode' | 'dragNode' | 'dragPool' | 'select' | 'auto';\n\nconst TOOL_FLAGS: ToolFlag[] = ['createNode', 'dragNode', 'dragPool', 'select', 'auto'];\nconst TOOL_NAMES = {\n    'createNode': \"增加\", \n    'dragNode': \"移动\", \n    'dragPool': \"拖动\", \n    'select': \"选择\", \n    'auto': \"自动\",\n};\n\nexport interface AppProps {\n\n}\n\nexport interface AppState {\n    uidCounter: number;\n    nodes: Array<MindNode>;\n    offset: Vec2;\n    scale: number;\n    editingNodeUid: number | null;\n    toolFlag: ToolFlag | null; \n    selectionArea: Rect | null;\n    dataString: string;\n}\n\n\nclass App extends Component<AppProps, AppState> implements ToolEnv {\n\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            uidCounter: 0,\n            nodes: [],\n            offset: [0, 0],\n            scale: 1,\n            editingNodeUid: null,\n            toolFlag: null,\n            selectionArea: null,\n            dataString: '',\n        };\n    }\n\n    private mounted = false;\n\n    componentDidMount() {\n        this.mounted = true;\n        this.updateStateNodes();\n        this.drawLines();\n        window.addEventListener('resize', this.resetView);\n        this.resetView();\n        this.setTool('auto');\n        requestAnimationFrame(this.update);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.resetView);\n        this.mounted = false;\n    }\n\n    render() {\n        return (\n            <div className=\"App\" >\n                {/* 顶部工具栏 */}\n                { this.renderTopBar() }\n\n                {/* 实际池子 */}\n                <div \n                    className={ \"node-pool\" }\n                    ref={ this.poolRef }\n                    onMouseDown={ this.onMouseDown }\n                    onMouseMove={ this.onMouseMove }\n                    onMouseUp={ this.onMouseUp }\n                    onMouseLeave={ this.onMouseLeave }\n                >\n                    <canvas ref={ this.canvasRef } />\n\n                    {\n                        this.state.nodes.map(it => (\n                            <MindNodeCard\n                                key={ it.uid }\n                                anchor={ this.getAnchor() }\n                                node={ it }\n                                linking={ this.linkingNodeUid === it.uid }\n                                choosen={ this.selectedNodeUids.has(it.uid) }\n                                onClick={ this.onClickNode }\n                                onMouseDown={ this.onMouseDown }\n                                onMouseMove={ this.onMouseMove }\n                                onMouseUp={ this.onMouseUp }\n                                onRectUpdate={ (uid, rect) => this.setNodeRect(uid, rect) }\n                                onClickLinkButton={ (uid) => this.linkNode(uid) }\n                                onClickChooseButton={ this.setNodeChoosen }\n                            />\n                        ))\n                    }\n\n                    { this.renderSelectionArea() }\n                    \n                    { this.renderNodeInfo() }\n                </div>\n\n                {/* 底部状态栏 */}\n                { this.renderBottomBar() }\n            </div>\n        );\n    }\n\n    //#region 渲染\n    \n    // 池子UI组件\n    private poolRef: RefObject<HTMLDivElement> = React.createRef();\n    // 连接线的画板UI组件\n    private canvasRef: RefObject<HTMLCanvasElement> = React.createRef();\n\n    hideNodeInfoView = () => this.setState(() => ({ editingNodeUid: null }));\n\n    drawLines() {\n        // console.log(\"drawLines\");\n        const canvasAndContext = get2dContext(this.canvasRef);\n        if (!canvasAndContext) {\n            console.log(\"Invalid canvas\");\n            return;\n        }\n        const [canvas, g] = canvasAndContext;\n\n        g.clearRect(0, 0, canvas.width, canvas.height);\n        // 开始画线\n        g.strokeStyle = \"#808080\";\n        g.fillStyle = \"#808080\";\n        g.lineWidth = 1.5;\n        // const anchor = this.getAnchor();\n        // 修正量，是画布的client位置\n        const fix: Vec2 = this.getPoolFix();\n\n        const pointCache = new Map<number, Vec2>();\n        const getPoint: (node: MindNode) => Vec2 = (node: MindNode) => {\n            const cachedPoint = pointCache.get(node.uid);\n            if (cachedPoint) return cachedPoint;\n\n            const rect = this.nodeCardRects.get(node.uid);\n            if (rect) {\n                const point = Vec2Util.add(Vec2Util.minus([rect.x, rect.y], fix), [rect.width / 2, rect.height / 2]);\n                pointCache.set(node.uid, point);\n                return point;\n            }\n            return [0, 0];\n        };\n\n        const nodes = this.nodes;\n        const angleCache = new Map<number, number>();\n        const getAngle: (node: MindNode) => number = (node: MindNode) => {\n            if (angleCache.has(node.uid)) return angleCache.get(node.uid) || NaN;\n\n            const nodePosition = getPoint(node);\n\n            let inRelative: Vec2 = [0, 0];\n            for (const inNodeUid of node.inPorts) {\n                const inNode = nodes.get(inNodeUid);\n                if (!inNode) continue;\n                inRelative = Vec2Util.add(inRelative, Vec2Util.normalize(Vec2Util.minus(nodePosition, getPoint(inNode))));\n            }\n            inRelative = Vec2Util.normalize(inRelative);\n\n            let outRelative: Vec2 = [0, 0];\n            for (const outNodeUid of node.outPorts) {\n                const outNode = nodes.get(outNodeUid);\n                if (!outNode) continue;\n                outRelative = Vec2Util.add(outRelative, Vec2Util.normalize(Vec2Util.minus(getPoint(outNode), nodePosition)));\n            }\n            outRelative = Vec2Util.normalize(outRelative);\n\n            // console.log(\"uid\", node.uid);\n            // console.log(\"inRelative\", inRelative);\n            // console.log(\"outRelative\", outRelative);\n\n            const finalPoint = Vec2Util.add(inRelative, outRelative);\n            const angle = Math.atan2(finalPoint[1], finalPoint[0]);\n\n            angleCache.set(node.uid, angle);\n            return angle;\n        };\n\n        for (const node of Array.from(this.nodes.values())) {\n            const sourcePoint = getPoint(node);\n            for (const portUid of node.outPorts) {\n                const targetNode = this.nodes.get(portUid);\n                if (!targetNode) continue;\n\n                const targetPoint = getPoint(targetNode);\n                const controlHandleLength = Vec2Util.modulo(Vec2Util.minus(targetPoint, sourcePoint))/ 3;\n                const sourceAngle = getAngle(node);\n                const targetAngle = getAngle(targetNode);\n\n                const controlPoint1 = Vec2Util.add(sourcePoint, Vec2Util.fromAngle(sourceAngle, controlHandleLength));\n                const controlPoint2 = Vec2Util.minus(targetPoint, Vec2Util.fromAngle(targetAngle, controlHandleLength));\n\n                const controlPoints: Vec2[] = [sourcePoint, controlPoint1, controlPoint2, targetPoint];\n\n                const [centerPoint, centerAngle] = getBezierPointAndAngle(0.55, ...controlPoints);\n\n\n                g.beginPath();\n                g.moveTo(...sourcePoint);\n                g.bezierCurveTo(...controlPoint1, ...controlPoint2, ...targetPoint);\n                g.stroke();\n                g.beginPath();\n                g.moveTo(...Vec2Util.add(centerPoint, Vec2Util.fromAngle(centerAngle, g.lineWidth * 3)));\n                g.lineTo(...Vec2Util.add(centerPoint, Vec2Util.fromAngle(centerAngle + 0.8 * Math.PI, g.lineWidth * 3)));\n                g.lineTo(...Vec2Util.add(centerPoint, Vec2Util.fromAngle(centerAngle - 0.8 * Math.PI, g.lineWidth * 3)));\n                g.fill();\n\n                // g.beginPath();\n                // g.moveTo(...sourcePoint);\n                // g.lineTo(...targetPoint);\n                // g.stroke();\n            }\n        }\n    }\n\n    renderTopBar() {\n        return (\n            <div className=\"top-bar\">\n                <button onClick={ this.createNode }>新增</button>\n                <button onClick={ this.save }>保存</button>\n                <button onClick={ this.load }>载入</button>\n                <button onClick={ this.unchooseAllNodes }>取消选择</button>\n                <button onClick={ this.deleteSelectedNodes }>删除所选</button>\n                { TOOL_FLAGS.map(f => (\n                    <button \n                        onClick={ this.setTool.bind(this, f) } \n                        disabled={ this.state.toolFlag === f }\n                    >{ TOOL_NAMES[f] }</button>\n                )) }\n                <textarea\n                    value={ this.state.dataString }\n                    placeholder=\"在此输入/输出数据\"\n                    onChange={ e => this.setState(() => ({ dataString: e.target.value })) }\n                />\n            </div>\n        )\n    }\n\n    renderBottomBar() {\n        return (\n            <div className=\"bottom-bar\">\n                <span className=\"piece\">总节点数：{ this.state.nodes.length }</span>\n                <span className=\"piece\">选中节点数：{ this.selectedNodeUids.size }</span>\n            </div>\n        )\n    }\n\n    renderNodeInfo() {\n        const editingNode = (this.state.editingNodeUid !== null) ? (this.nodes.get(this.state.editingNodeUid)) : null;\n        if (!editingNode) return null;\n\n        return (\n            <div className=\"node-info\">\n                <button className=\"icon\" onClick={ this.hideNodeInfoView }>&gt;</button>\n                <MindNodeInfo\n                    key={ editingNode.uid }\n                    node={ editingNode }\n                    nodes={ this.nodes }\n                    onUpdate={ node => this.updateNode(node) }\n                />\n            </div>\n        );\n    }\n\n    renderSelectionArea() {\n        const { selectionArea } = this.state;\n        if (!selectionArea) return null;\n        let { x, y, width, height } = selectionArea;\n        let [left, top] = Vec2Util.minus([x, y], this.getPoolFix());\n        if (width < 0) {\n            width = -width;\n            left = left - width;\n        }\n        if (height < 0) {\n            height = -height;\n            top = top - height;\n        }\n        return (\n            <div \n                className=\"section\"\n                style={{\n                    left: left + 'px',\n                    top: top + 'px',\n                    width: width + 'px',\n                    height: height + 'px',\n                }}\n            />\n        );\n    }\n\n    //#endregion\n\n    //#region 工具\n\n    get offset() { return this.state.offset; }\n    set offset(o) { this.setState(() => ({ offset: o })) }\n\n    get scale() { return this.state.scale; }\n    set scale(s) { this.setState(() => ({ scale: s })) }\n\n    get selectionArea() { return this.state.selectionArea; }\n    set selectionArea(sa) { this.setState(() => ({ selectionArea: sa })) }\n\n    private nodeCardRects: Map<number, Rect> = new Map();\n    public selectedNodeUids: Set<number> = new Set();\n\n    getNodeRect(uid: number): Rect | null {\n        return this.nodeCardRects.get(uid) || null;\n    }\n\n    setNodeRect(uid: number, rect: Rect) {\n        this.nodeCardRects.set(uid, rect);\n    }\n\n    private tool: Tool | null = null;\n\n    setTool(flag: ToolFlag | null) {\n        switch (flag) {\n            case 'createNode': this.tool = new CreateNodeTool(this); break;\n            case 'dragNode': this.tool = new DragNodeTool(this); break;\n            case 'dragPool': this.tool = new DragPoolTool(this); break;\n            case 'select': this.tool = new SelectTool(this); break;\n            case 'auto': this.tool = new AutoTool(this); break;\n            default: this.tool = null; break;\n        }\n        this.setState(() => ({ toolFlag: flag }));\n    }\n\n    //#endregion\n\n    //#region UI相关\n\n    /*\n     * O->A->N\n     * ----    :Origin to Anchor: Offset\n     *    ---- :Anchor to Node: Position (of node)\n     */\n\n    // 原点，应该是pool组件的中心点\n    private origin: Vec2 = [0, 0];\n\n    resetView = () => {\n        const box = this.poolRef.current?.getBoundingClientRect();\n        if (!box) return;\n        \n\n        this.origin = [box.width / 2, box.height / 2];\n        const canvas = this.canvasRef.current;\n        if (canvas) {\n            canvas.width = box.width;\n            canvas.height = box.height;\n        }\n        this.notifyUpdate();\n    }\n\n    getAnchor(): Vec2 {\n        return Vec2Util.add(this.origin, this.state.offset);\n    }\n\n    getPoolFix(): Vec2 {\n        return getPosition(getRect(this.poolRef));\n    }\n\n    // 是否需要更新\n    private dirty: boolean = true;\n    \n    notifyUpdate() {\n        this.dirty = true;\n    }\n\n    update = () => {\n        if (!this.mounted) return;\n        if (this.dirty) {\n            this.updateStateNodes();\n            this.drawLines();\n            this.dirty = false;\n        }\n        requestAnimationFrame(this.update);\n    }\n\n    //#endregion\n\n    //#region 数据控制\n\n    // 所有节点列表，是实际的数据\n    public readonly nodes: Map<number, MindNode> = new Map();\n\n    genUid() {\n        const uid = this.state.uidCounter;\n        this.setState(s => ({ uidCounter: s.uidCounter + 1 }));\n        return uid;\n    }\n\n    createNode = () => {\n        const uid = this.genUid();\n        const node: MindNode = {\n            uid,\n            position: Vec2Util.minus([0, 0], this.state.offset),\n            text: `#${uid}`,\n            outPorts: [],\n            inPorts: [],\n        };\n\n        this.addNode(node);\n    }\n\n    addNode(node: MindNode) {\n        this.nodes.set(node.uid, node);\n        this.updateStateNodes();\n    }\n\n    updateNode(node: MindNode) {\n        this.nodes.set(node.uid, node);\n        this.updateStateNodes();\n    }\n\n    removeNode(uid: number) {\n        this.nodes.delete(uid);\n        this.nodeCardRects.delete(uid);\n        this.selectedNodeUids.delete(uid);\n        this.updateStateNodes();\n    }\n\n    updateStateNodes() {\n        this.setState(() => ({ nodes: Array.from(this.nodes.values()) }));\n    }\n\n    // 正在连接的节点UID\n    private linkingNodeUid: number | null = null;\n\n    linkNode(uid: number) {\n        const targetNode = this.nodes.get(uid);\n        if (!targetNode) return;\n        if (this.linkingNodeUid !== null) {\n            if (this.linkingNodeUid !== targetNode.uid) {\n                const sourceNode = this.nodes.get(this.linkingNodeUid);\n                if (sourceNode && targetNode) {\n                    const outPorts = new Set(sourceNode.outPorts);\n                    const inPorts = new Set(targetNode.inPorts);\n                    if (outPorts.has(targetNode.uid)) {\n                        outPorts.delete(targetNode.uid);\n                        inPorts.delete(sourceNode.uid);\n                    } else {\n                        outPorts.add(targetNode.uid);\n                        inPorts.add(sourceNode.uid);\n                    }\n                    sourceNode.outPorts = Array.from(outPorts);\n                    targetNode.inPorts = Array.from(inPorts);\n                    this.updateStateNodes();\n                }\n            }\n            this.linkingNodeUid = null;\n        } else {\n            this.linkingNodeUid = targetNode.uid;\n        }\n    }\n\n    //#endregion\n\n    //#region 鼠标事件\n\n    onClickNode = (event: MouseEvent, uid: number) => {\n        this.setState(() => ({ editingNodeUid: uid }));\n    }\n\n    private getToolEvent(e: MouseEvent, uid?: number): ToolEvent {\n        if (typeof uid === 'number') {\n            e.stopPropagation();\n        }\n        const node = typeof uid === 'number' ? (this.nodes.get(uid) || null) : null;\n        // const mousePosition = Vec2.minus([e.clientX, e.clientY], this.getPoolFix());\n        const mousePosition: Vec2 = [e.clientX, e.clientY];\n        return {\n            mousePosition,\n            node,\n            nativeEvent: e,\n        };\n    }\n\n    onMouseDown = (e: MouseEvent, uid?: number) => {\n        this.tool?.onStart(this.getToolEvent(e, uid));\n        this.notifyUpdate();\n    }\n\n    onMouseMove = (e: MouseEvent, uid?: number) => {\n        this.tool?.onMove(this.getToolEvent(e, uid));\n        this.notifyUpdate();\n    }\n\n    onMouseUp = (e: MouseEvent, uid?: number) => {\n        const ev = this.getToolEvent(e, uid);\n        this.tool?.onMove(ev);\n        this.tool?.onEnd(ev);\n        this.notifyUpdate();\n    }\n\n    onMouseLeave = (e: MouseEvent, uid?: number) => {\n        this.onMouseUp(e, uid);\n    }\n\n    //#endregion\n\n    //#region 坐标变换\n\n    // 把数据里的坐标转换为在.pool DOM元素种像素为单位的坐标\n    pool2pixel(poolCoord: Vec2): Vec2 {\n        return Vec2Util.add(poolCoord, this.getAnchor());\n    }\n    \n    // 在.pool DOM元素种像素为单位的坐标转换为把数据里的坐标\n    pixel2pool(pixelCoord: Vec2): Vec2 {\n        return Vec2Util.minus(Vec2Util.minus(pixelCoord, this.getAnchor()), this.getPoolFix());\n    }\n\n    //#endregion\n\n    //#region 持久化\n\n    buildPool(): MindNodePool {\n        return {\n            uidCounter: this.state.uidCounter,\n            offset: this.state.offset,\n            scale: this.state.scale,\n            nodes: Array.from(this.nodes.values()),\n        };\n    }\n\n    load = () => {\n        try {\n            const pool: MindNodePool = JSON.parse(this.state.dataString);\n\n            this.nodes.clear();\n            this.nodeCardRects.clear();\n            this.selectedNodeUids.clear();\n            pool.nodes.forEach(it => this.nodes.set(it.uid, it));\n\n            this.setState(() => ({\n                uidCounter: pool.uidCounter || 0,\n                offset: pool.offset || [0, 0],\n                nodes: pool.nodes || [],\n                scale: pool.scale || 0,\n            }));\n        } catch (e) {\n            alert('解析数据失败！');\n        }\n    }\n\n    save = () => {\n        const pool: MindNodePool = this.buildPool();\n        this.setState(() => ({ dataString: JSON.stringify(pool) }));\n        console.log(pool);\n    }\n\n    //#endregion\n\n    //#region 节点选择相关\n\n    setNodeChoosen = (uid: number, value: boolean) => {\n        if (value) {\n            this.selectedNodeUids.add(uid);\n        } else {\n            this.selectedNodeUids.delete(uid);\n        }\n        this.notifyUpdate();\n    }\n\n    unchooseAllNodes = () => {\n        this.selectedNodeUids.clear();\n        this.notifyUpdate();\n    }\n\n    deleteSelectedNodes = () => {\n        this.selectedNodeUids.forEach(uid => {\n            this.nodes.delete(uid);\n            this.nodeCardRects.delete(uid);\n        });\n        this.selectedNodeUids.clear();\n        this.notifyUpdate();\n    }\n\n    //#endregion\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}