{"version":3,"sources":["utils/math.ts","buildin/UniqueMap.ts","buildin/Site.ts","buildin/entities/Entity.ts","buildin/GameEvent.ts","buildin/items/Item.ts","buildin/items/MeleeWeapon.ts","buildin/entities/ItemEntity.ts","buildin/entities/PortEntity.ts","utils/strings.ts","buildin/entities/LivingEntity.ts","buildin/entities/PlayerEntity.ts","buildin/events/CombatEvent.ts","buildin/events/InventoryEvent.ts","utils/objects.ts","App.tsx","reportWebVitals.ts","buildin/entities/MonsterEntity.ts","buildin/entities/InvestigationEntity.ts","buildin/entities/EventTriggerEntity.ts","buildin/events/TextDisplayEvent.ts","buildin/events/SequenceEvent.ts","buildin/events/GameOverEvent.ts","data.ts","utils/polyfill.ts","index.tsx"],"names":["randInt","max","min","times","Array","from","Math","floor","random","reduce","s","n","test","possibility","uidc","Date","now","genUid","UniqueMap","data","map","Map","this","add","count","elems","forEach","e","has","uid","set","delete","get","keys","values","size","Site","id","name","entities","onEnterFn","onEnter","site","game","triggerEvent","entity","silent","onDetect","addEntity","remove","FAKE_SITE","removeEntity","Entity","newSite","silient","option","GameEvent","priority","appendText","Item","MeleeWeapon","damage","dice","dmg","faces","factor","fix","mutateValue","String","str","ItemEntity","item","autoEquip","text","leftText","tag","getPlayer","holdItem","addItemToInventory","showPortOptions","PortEntity","target","timeCost","getMap","prevSite","goToSite","timePass","num2strWithSign","num","LivingEntity","health","maxHealth","strength","dexterity","baseDamage","baseWeaponName","loots","key","delta","reason","translate","isAlive","addEntities","PlayerEntity","money","magic","insight","holdingItem","inventory","gameOver","replaceOption","prevItem","i","CombatEvent","enemy","player","previewDamage","getWeapon","rightText","escaped","p","onAttack","endEvent","InventoryEvent","setOptions","concat","options","splice","copy","ori","shallow","isArray","Object","fromEntries","entries","k","v","OptionBtn","props","className","onClick","App","textListEl","resetting","textBuffer","pid","gameOverMessage","currentState","React","createRef","initialize","state","assign","textList","showOptions","showInventory","start","time","ref","t","types","join","o","handleClickOption","bind","flushText","all","list","length","setState","slice","current","scrollTo","top","scrollHeight","behavior","isInInterval","setInterval","flushLoop","clearInterval","translated","lines","split","trim","filter","packs","push","change","isInNextDay","refreshOptions","applyChange","ss","index","reset","events","onInput","entityUid","onInteract","execCmd","cmd","path","params","w","result","thisArg","findByPath","apply","event","sort","a","b","onStart","findIndex","onRender","getInteractions","flat","itemCount","inventoryOption","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","MonsterEntity","InvestigationEntity","results","counter","chances","EventTriggerEntity","once","TextDisplayEvent","texts","SequenceEvent","joints","pointer","fill","_","ce","nextEvent","GameOverEvent","randValue","d","sites","playerMaxHealth","translation","end_text","entry","prototype","depth","arr","polyfill","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEA,SAASA,EAAQC,GAA0D,IAA7CC,EAA4C,uDAA9B,EAAGC,EAA2B,uDAAX,EAC3D,OAAOC,MAAMC,KAAKD,MAAMD,IAAQ,kBAAMG,KAAKC,MAAMD,KAAKE,UAAYP,EAAMC,GAAOA,MAAMO,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,IAAG,GAQjH,SAASC,EAAKC,GACV,OAAQP,KAAKE,UAAYK,EAAc,EAAIA,EAAc,IAAMA,GAGnE,IAAIC,EAAOC,KAAKC,MAChB,SAASC,IACL,OAAOH,I,IC4BII,E,WAxCX,WAAYC,GAAkB,yBAFtBC,IAAsB,IAAIC,IAG1BF,GACAG,KAAKC,IAAL,MAAAD,KAAA,YAAYH,I,kDAIY,IAAC,IAAD,OACxBK,EAAQ,EADgB,mBAAzBC,EAAyB,yBAAzBA,EAAyB,gBAQ5B,OANAA,EAAMC,SAAQ,SAAAC,GACL,EAAKP,IAAIQ,IAAID,EAAEE,OAChB,EAAKT,IAAIU,IAAIH,EAAEE,IAAKF,GACpBH,QAGDA,I,+BAGiC,IAAC,IAAD,OACpCA,EAAQ,EAD4B,mBAAlCC,EAAkC,yBAAlCA,EAAkC,gBAGxC,OADAA,EAAMC,SAAQ,SAAAC,GAAC,OAAIH,GAAS,EAAKJ,IAAIW,OAAoB,kBAANJ,EAAiBA,EAAIA,EAAEE,KAAO,EAAI,KAC9EL,I,0BAGPK,GACA,OAAOP,KAAKF,IAAIY,IAAIH,K,6BAIpB,OAAOzB,MAAMC,KAAKiB,KAAKF,IAAIa,U,+BAI3B,OAAO7B,MAAMC,KAAKiB,KAAKF,IAAIc,Y,2BAI3B,OAAOZ,KAAKF,IAAIe,S,KC/BlBC,E,WAcF,WAAYjB,GAAiB,IAAD,kCAN5BkB,QAM4B,OAL5BC,UAK4B,OAJ5BC,SAA8B,IAAIrB,EAIN,KAFpBsB,eAEoB,EACxBlB,KAAKe,GAAKlB,EAAKkB,GACff,KAAKgB,KAAOnB,EAAKmB,KACjBhB,KAAKkB,UAAYrB,EAAKsB,SAAW,KACjC,UAAAtB,EAAKoB,gBAAL,SAAeb,SAAQ,SAAAC,GACnB,EAAKY,SAAShB,IAAII,GAClBA,EAAEe,KAAO,K,oDAITC,GACArB,KAAKkB,YACyB,oBAAnBlB,KAAKkB,UACZlB,KAAKkB,UAAUG,GAEfA,EAAKC,aAAatB,KAAKkB,c,gCAKzBG,EAAYE,GAAgD,IAAD,OAA/BC,EAA+B,wDAQjE,OAPAxB,KAAKiB,SAAShB,IAAIsB,GACdA,EAAOH,OAASpB,OAChBuB,EAAOH,KAAOpB,KACTwB,GACDxB,KAAKiB,SAASL,SAASR,SAAQ,SAAAC,GAAC,OAAIA,EAAEoB,SAASJ,EAAME,EAAQ,OAG9DvB,O,kCAGCqB,EAAYJ,GAAyD,IAAD,OAA/BO,EAA+B,wDAE5E,OADAP,EAASb,SAAQ,SAAAC,GAAC,OAAI,EAAKqB,UAAUL,EAAMhB,EAAGmB,MACvCxB,O,mCAGEqB,EAAYE,GAGrB,OAFAvB,KAAKiB,SAASU,OAAOJ,EAAOhB,KAC5BgB,EAAOH,KAAON,EAAKc,UACZ5B,O,qCAGIqB,EAAYJ,GAAgC,IAAD,OAEtD,OADAA,EAASb,SAAQ,SAAAC,GAAC,OAAI,EAAKwB,aAAaR,EAAMhB,MACvCL,S,KA1DTc,EAEKc,UAAY,IAAId,EAAK,CACxBC,GAAI,gBACJC,KAAM,YACNC,SAAU,KA0DHH,QCnBAgB,E,WApCX,WAAYjC,GAAmB,yBAL/BkB,QAK8B,OAJ9BR,SAI8B,OAH9BS,UAG8B,OAF9BI,UAE8B,EAC1BpB,KAAKe,GAAKlB,EAAKkB,IAAM,SACrBf,KAAKO,IAAMV,EAAKU,KAAOZ,IACvBK,KAAKgB,KAAOnB,EAAKmB,KACjBhB,KAAKoB,KAAOvB,EAAKuB,MAAQN,EAAKc,U,qDAGzBP,EAAYE,EAAgBH,M,+BAI5BC,EAAYU,GAAgD,IAAjCC,EAAgC,wDAChEhC,KAAKoB,KAAKS,aAAaR,EAAMrB,MACzBgC,EACAD,EAAQd,SAAShB,IAAID,MAErB+B,EAAQL,UAAUL,EAAMrB,MAE5BA,KAAKoB,KAAOW,I,sCAGAV,GAKZ,MAAO,K,iCAGAA,EAAYY,Q,KCbZC,E,WAnBX,WAAYrC,GAAkB,yBAJ9BkB,QAI6B,OAH7BoB,cAG6B,OAF7B5B,SAE6B,EACzBP,KAAKe,GAAKlB,EAAKkB,GACff,KAAKmC,SAAWtC,EAAKsC,UAAY,EACjCnC,KAAKO,IAAMV,EAAKU,KAAOZ,I,oDAGnB0B,GACJA,EAAKe,WAAL,uBAAsBpC,KAAKe,GAA3B,0B,+BAGKM,GACL,MAAO,K,8BAGHA,EAAYY,GAChBZ,EAAKe,WAAL,mCAAwBpC,KAAKe,GAA7B,U,KCCOsB,E,WAfX,WAAYxC,GAAiB,yBAJ7BkB,QAI4B,OAH5BR,SAG4B,OAF5BS,UAE4B,EACxBhB,KAAKe,GAAKlB,EAAKkB,IAAM,OACrBf,KAAKO,IAAMV,EAAKU,KAAOZ,IACvBK,KAAKgB,KAAOnB,EAAKmB,K,qDAGZK,EAAYE,M,oCAIPF,EAAYE,GACtB,MAAO,O,YCgBAe,E,kDA9BX,WAAYzC,GAAwB,IAAD,8BAC/B,yCACOA,GADP,IAEIkB,GAAIlB,EAAKkB,IAAM,mBALvBwB,YAEmC,EAK/B,EAAKA,OAAS1C,EAAK0C,OALY,E,qDAQ1BlB,EAAYE,GACjB,INhBUiB,EMgBJC,ENfU,kBADND,EMgBWxC,KAAKuC,QNfOC,EAC9B9D,EAAQ8D,EAAKE,MAAQ,EAAG,EAAGF,EAAK3D,QAAU2D,EAAKG,QAAU,IAAMH,EAAKI,KAAO,GMe9ErB,EAAOsB,YAAYxB,EAAM,UAAWoB,EAApC,sBAA8CzC,KAAKgB,KAAnD,mB,oCAGUK,EAAYE,GACtB,GAA2B,kBAAhBvB,KAAKuC,OACZ,OAAOO,OAAO9C,KAAKuC,QACf,IAAD,EACmCvC,KAAKuC,OAAnCG,EADL,EACKA,MAAO7D,EADZ,EACYA,MAAO+D,EADnB,EACmBA,IAAKD,EADxB,EACwBA,OACvBI,EAAG,UAAMlE,GAAS,EAAf,YAAoB6D,GAO3B,OANIC,GAAqB,IAAXA,IACVI,EAAG,UAAMJ,EAAN,aAAiBI,EAAjB,MAEHH,IACAG,GAAOH,GAAO,EAAI,IAAMA,EAAME,OAAOF,IAElCG,M,GA5BOV,GCiCXW,E,kDA7BX,cAAwD,IAAD,EAAzCC,EAAyC,EAAzCA,KAAM7B,EAAmC,EAAnCA,KAAM8B,EAA6B,EAA7BA,UAA6B,4BACnD,cAAM,CACFnC,GAAI,OACJC,KAAMiC,EAAKjC,KACXI,UAPR6B,UAGuD,IAFvDC,eAEuD,EAMnD,EAAKD,KAAOA,EACZ,EAAKC,UAAYA,IAAa,EAPqB,E,8DAWnD,MAAO,CAAC,CACJC,KAAM,eAAOnD,KAAKiD,KAAKjC,KACvBoC,SAAU,eACVC,IAAK,O,iCAIFhC,EAAYY,GACfjC,KAAKkD,UACL7B,EAAKiC,YAAYC,SAASlC,EAAMrB,KAAKiD,MAErC5B,EAAKiC,YAAYE,mBAAmBnC,EAAMrB,KAAKiD,MAEnDjD,KAAKoB,KAAKS,aAAaR,EAAMrB,MAC7BqB,EAAKoC,sB,GA7BY3B,GCiCV4B,E,kDA7BX,cAAyD,IAAD,EAA1CC,EAA0C,EAA1CA,OAAQvC,EAAkC,EAAlCA,KAAMwC,EAA4B,EAA5BA,SAA4B,4BACpD,cAAM,CACF7C,GAAI,OACJC,KAAM2C,EACNvC,UAPRuC,YAGwD,IAFxDC,cAEwD,EAMpD,EAAKD,OAASA,EACd,EAAKC,SAAWA,GAAY,EAPwB,E,4DAUxCvC,GAAa,IAAD,IACxB,MAAO,CAAC,CACJ8B,KAAM,iBAAQ,UAAA9B,EAAKwC,SAASnD,IAAIV,KAAK2D,eAAvB,eAAgC3C,OAAQ,WACtDoC,UAAW,UAAA/B,EAAKiC,YAAYQ,gBAAjB,eAA2B/C,MAAOf,KAAK2D,OAAU,SAAM,SAClEN,IAAKrD,KAAKO,Q,iCAIPc,EAAYY,GACnB,GAAIA,EAAOoB,MAAQrD,KAAKO,IAAK,CACzB,IAAMa,EAAOC,EAAKwC,SAASnD,IAAIV,KAAK2D,QAChCvC,IACAC,EAAKiC,YAAYS,SAAS1C,EAAMD,GAChCC,EAAK2C,SAAShE,KAAK4D,gB,GA3BV9B,G,eCVzB,SAASmC,EAAgBC,GACrB,OAAOA,GAAO,EAAI,IAAMA,EAAMpB,OAAOoB,G,ICkE1BC,E,kDA3CX,WAAYtE,GAAyB,IAAD,gCAChC,cAAMA,IATVuE,YAQoC,IAPpCC,eAOoC,IANpCC,cAMoC,IALpCC,eAKoC,IAJpCC,gBAIoC,IAHpCC,oBAGoC,IAFpCC,WAEoC,EAEhC,EAAKN,OAASvE,EAAKuE,OACnB,EAAKC,UAAYxE,EAAKwE,UACtB,EAAKC,SAAWzE,EAAKyE,SACrB,EAAKC,UAAY1E,EAAK0E,UACtB,EAAKC,WAAa3E,EAAK2E,WACvB,EAAKC,eAAiB5E,EAAK4E,eAC3B,EAAKC,OAAQ,UAAA7E,EAAK6E,aAAL,eAAY5E,KAAI,SAAAO,GAAC,OAAIA,aAAagC,EAAO,IAAIW,EAAW,CAAEC,KAAM5C,IAAOA,OAAM,GAR1D,E,wDAWxBgB,EAAYsD,EAAaC,EAAeC,GAChD,OAAOF,GACH,IAAK,SAAU3E,KAAKoE,QAAUQ,EAAO,MACrC,IAAK,WAAY5E,KAAKsE,UAAYM,EAAO,MACzC,IAAK,YAAa5E,KAAKuE,WAAaK,EAExCvD,EAAKe,WAAL,UAAmBpC,KAAKgB,KAAxB,YAAgC6D,GAAU,GAA1C,YAAgDxD,EAAKyD,UAAUH,GAA/D,YAAuEV,EAAgBW,KAClF5E,KAAK+E,YACN1D,EAAKe,WAAL,UAAmBpC,KAAKgB,KAAxB,iBACAhB,KAAKoB,KAAK4D,YAAY3D,EAAMrB,KAAK0E,OACjC1E,KAAKoB,KAAKS,aAAaR,EAAMrB,S,+BAI5BqB,EAAYU,GACjBV,EAAKe,WAAL,UAAmBpC,KAAKgB,KAAxB,6BAAkCe,EAAQf,MAAQ,UAClD,gEAAeK,EAAMU,K,kCAIrB,OAAO,IAAIO,EAAY,CACnBvB,GAAI,QACJC,KAAMhB,KAAKyE,eACXlC,OAAQvC,KAAKwE,e,gCAKjB,OAAOxE,KAAKoE,OAAS,M,GAjDFtC,GCyFZmD,E,kDA/EX,WAAYpF,GAAyB,IAAD,8BAChC,yCAAUA,GAAV,IAAgBkB,GAAI,aARxBmE,WAOoC,IANpCC,WAMoC,IALpCC,aAKoC,IAJpCC,iBAIoC,IAHpCC,UAA6B,IAAI1F,EAGG,EAFpCkE,cAEoC,EAEhC,EAAKoB,MAAQrF,EAAKqF,MAClB,EAAKC,MAAQtF,EAAKsF,MAClB,EAAKC,QAAUvF,EAAKuF,QACpB,EAAKC,YAAcxF,EAAKwF,YACxBxF,EAAKyF,UAAUlF,SAAQ,SAAAC,GAAC,OAAI,EAAKiF,UAAUrF,IAAII,MAC/C,EAAKyD,SAAWjE,EAAKiE,SAPW,E,wDAUxBzC,EAAYsD,EAAaC,EAAeC,GAChD,OAAOF,GACH,IAAK,SAAU3E,KAAKoE,QAAUQ,EAAO,MACrC,IAAK,QAAS5E,KAAKmF,OAASP,EAAO,MACnC,IAAK,QAAS5E,KAAKkF,OAASN,EAAO,MACnC,IAAK,WAAY5E,KAAKsE,UAAYM,EAAO,MACzC,IAAK,UAAW5E,KAAKoF,SAAWR,EAAO,MACvC,IAAK,YAAa5E,KAAKuE,WAAaK,EAExCvD,EAAKe,WAAL,UAAmBpC,KAAKgB,KAAxB,YAAgC6D,GAAU,GAA1C,YAAgDxD,EAAKyD,UAAUH,GAA/D,YAAuEV,EAAgBW,KAClF5E,KAAK+E,WACN1D,EAAKkE,SAAS,8B,+BAIblE,EAAY4B,GAAoF,IAAjEuC,EAAgE,uDAAjB,UAC7EC,EAAWzF,KAAKqF,YAQtB,GAPArF,KAAKqF,YAAcpC,EACfA,GACAjD,KAAKsF,UAAU3D,OAAOsB,GACtB5B,EAAKe,WAAL,UAAmBpC,KAAKgB,KAAxB,6BAAkCiC,EAAKjC,MAAQ,WACxCyE,GACPpE,EAAKe,WAAL,UAAmBpC,KAAKgB,KAAxB,6BAAkCyE,EAASzE,MAAQ,UAElDyE,EACL,OAAQD,GACJ,IAAK,OAAQxF,KAAKoB,KAAKM,UAAUL,EAAM,IAAI2B,EAAW,CAAEC,KAAMwC,KAAc,MAC5E,IAAK,UAAWzF,KAAKsF,UAAUrF,IAAIwF,M,+BAKlCpE,EAAYU,GACjB/B,KAAK8D,SAAW9D,KAAKoB,KACrB,gEAAeC,EAAMU,K,yCAGNV,EAAY4B,GAC3B,QAAIjD,KAAKsF,UAAUrF,IAAIgD,KACnB5B,EAAKe,WAAL,UAAmBpC,KAAKgB,KAAxB,6BAAkCiC,EAAKjC,MAAQ,WACxC,K,8CAKSK,EAAY4B,GAA0E,IAArDuC,EAAoD,uDAAjB,OACxF,GAAoB,kBAATvC,EAAmB,CAC1B,IAAMyC,EAAI1F,KAAKsF,UAAU5E,IAAIuC,GAC7B,IAAKyC,EAAG,OAAO,EACfzC,EAAOyC,EAEX,IAAK1F,KAAKsF,UAAU3D,OAAOsB,GAAO,OAAO,EACzC,OAAQuC,GACJ,IAAK,OAAQxF,KAAKoB,KAAKM,UAAUL,EAAM,IAAI2B,EAAW,CAAEC,OAAM7B,KAAMpB,KAAKoB,QAI7E,OADAC,EAAKe,WAAL,UAAmBpC,KAAKgB,KAAxB,6BAAkCiC,EAAKjC,MAAQ,WACxC,I,kCAIP,OAAOhB,KAAKqF,aAAL,iDAAArF,MAAA,KAAAA,Q,wCAIP,MAAO,O,GAnFYmE,GC0EZwB,E,kDA/EX,WAAY9F,GAAwB,IAAD,8BAC/B,yCACOA,GADP,IAEIsC,SAAU,OALlByD,WAEmC,EAK/B,EAAKA,MAAQ/F,EAAK+F,MALa,E,oDAQ3BvE,GACJA,EAAKe,WAAL,4HAAsCpC,KAAK4F,MAAM5E,KAAjD,YAAyDhB,KAAK4F,MAAMxB,OAApE,YAA8EpE,KAAK4F,MAAMvB,UAAzF,Q,+BAGKhD,GACL,IAAMwE,EAASxE,EAAKiC,YACdwC,EAAgBD,EAAOE,YAAYD,cAAczE,EAAMrB,KAAK4F,OAClE,MAAO,CACH,CACIzC,KAAK,eACLC,SAAU,eACV4C,UAAU,GAAD,OAAKF,EAAL,UACTzC,IAAK,UAET,CACIF,KAAK,eACLC,SAAU,qBACV4C,UAAU,GAAD,OAAKH,EAAOtB,UAAZ,KACTlB,IAAK,a,8BAKThC,EAAYY,GAChB,IAAIgE,GAAmB,EACjBC,EAAI7E,EAAKiC,YACTjD,EAAIL,KAAK4F,MACI,WAAf3D,EAAOoB,IACH/D,EAAKU,KAAK4F,MAAMrB,YAChBlD,EAAKe,WAAWpC,KAAK4F,MAAM5E,KAAO,8CAC9B1B,EAAKU,KAAK4F,MAAMrB,aAChBlD,EAAKe,WAAW,wCAChB/B,EAAE0F,YAAYI,SAAS9E,EAAM6E,KAGlBA,EAAEH,YACVI,SAAS9E,EAAMhB,GAEJ,WAAf4B,EAAOoB,MACX/D,EAAK4G,EAAE3B,aAAejF,EAAKe,EAAEkE,YAC5B0B,GAAU,EACV5E,EAAKe,WAAW,kCAChBf,EAAK+E,SAASpG,QAEdqB,EAAKe,WAAW,8CACZ9C,EAAKU,KAAK4F,MAAMtB,YAChBjD,EAAKe,WAAW,oDAChB/B,EAAE0F,YAAYI,SAAS9E,EAAM6E,MAKrClG,KAAK4F,MAAMxB,QAAU,GACrB/C,EAAKe,WAAW,2BAASpC,KAAK4F,MAAM5E,MACpCK,EAAK+E,SAASpG,OAEPiG,EACP5E,EAAKe,WAAL,8CAAyBpC,KAAK4F,MAAM5E,KAApC,wBAEAK,EAAKe,WAAL,UAAmBpC,KAAK4F,MAAM5E,KAA9B,oCAA0ChB,KAAK4F,MAAMxB,OAArD,YAA+DpE,KAAK4F,MAAMvB,UAA1E,MACAhD,EAAKe,WAAL,sBAAqBpC,KAAK4F,MAAM5E,KAAhC,uBACI1B,EAAK+B,EAAKiC,YAAYiB,WACtBlD,EAAKe,WAAW,qDAEhBf,EAAKe,WAAW,wCAChB/B,EAAE0F,YAAYI,SAAS9E,EAAM6E,S,GA5EnBhE,GCqDXmE,E,kDAzDX,aAAe,uCACL,CACFtF,GAAI,YACJoB,SAAU,K,oDAIVd,GACJ,IAAM6E,EAAI7E,EAAKiC,YACfjC,EAAKiF,WAAW,CAAC,CAAEnD,KAAM,eAAME,IAAK,KAC/BkD,OAAOzH,MAAMC,KAAKmH,EAAEZ,UAAU1E,UAAU,SAAA8E,GAAC,cAAK,CAC3CvC,OAAO,UAAA+C,EAAEb,mBAAF,eAAe9E,OAAQmF,EAAEnF,IAAM,eAAO,gBAAQmF,EAAE1E,KACvDqC,IAAK,CAAC,eAAgB,SAAU,WAAa,EAAC,UAAA6C,EAAEb,mBAAF,eAAe9E,OAAQmF,EAAEnF,IAAMmF,EAAI,e,+BAKpFrE,GACL,IAAM6E,EAAI7E,EAAKiC,YACTkD,EAAO,CACT,CAAErD,KAAM,iBADC,mBAEN+C,EAAEZ,UAAU1E,SAASd,KAAI,SAAA4F,GAAC,MAAK,CAC9BvC,KAAM,eAAOuC,EAAE1E,KACfoC,SAAU,eACV4C,UAAWN,EAAEI,cAAczE,GAC3BgC,IAAKqC,EAAEnF,UAWf,OARI2F,EAAEb,aACFmB,EAAQC,OAAO,EAAG,EAAG,CACjBtD,KAAM,eAAM+C,EAAEb,YAAYrE,KAC1BoC,SAAU,eACV4C,UAAWE,EAAEb,YAAYS,cAAczE,GACvCgC,IAAK6C,EAAEb,YAAY9E,MAGpBiG,I,8BAGHnF,EAAYY,GAChB,GAA0B,kBAAfA,EAAOoB,IAAkB,CAAC,IAAD,EAC1B9C,EAAc0B,EAAOoB,IACrB6C,EAAI7E,EAAKiC,YAEf,GAAI/C,KAAG,UAAK2F,EAAEb,mBAAP,aAAK,EAAe9E,KACvB2F,EAAE3C,SAASlC,EAAM,UACd,CACH,IAAM4B,EAAOiD,EAAEZ,UAAU5E,IAAIuB,EAAOoB,KAChCJ,GACAiD,EAAE3C,SAASlC,EAAM4B,IAI7B5B,EAAK+E,SAASpG,U,GAvDOkC,GCF7B,SAASwE,EAAQC,GAAsC,IAA9BC,EAA6B,wDAClD,OAAKD,GACc,kBAARA,EACH7H,MAAM+H,QAAQF,GACNC,EAAO,YAAOD,GAAOA,EAAI7G,IAAI4G,GAElCE,EAAO,eAAOD,GAAOG,OAAOC,YAC/BD,OAAOE,QAAQL,GACd7G,KAAI,SAACmH,EAAGC,GAAJ,MAAU,CAACD,EAAGP,EAAKQ,QAPfP,ECKrB,SAASQ,EAAUC,GAA2E,IACpFC,EAA+BD,EAA/BC,UAAWpF,EAAoBmF,EAApBnF,OAAQqF,EAAYF,EAAZE,QAC3B,OACE,yBAAQD,UAAWA,EAAWC,QAASA,EAAvC,UACGrF,EAAOmB,SAAW,sBAAMiE,UAAU,wBAAhB,SAAyCpF,EAAOmB,WAAmB,KACrFnB,EAAOkB,KACPlB,EAAO+D,UAAY,sBAAMqB,UAAU,yBAAhB,SAA0CpF,EAAO+D,YAAoB,QAU/F,IAAMpF,EAAS,CAAC,QAAS,QAAS,UAAW,WAAY,aAiQ1C2G,E,kDAtPb,WAAYH,GAA4B,IAAD,8BACrC,cAAMA,IARAI,gBAO+B,IAN/BC,WAAqB,EAMU,EAL/BC,WAA0B,GAKK,EAJ/BC,IAA6B,KAIE,EAH/BC,gBAA0B,GAGK,EAF/BC,kBAE+B,EAErC,EAAKL,WAAaM,IAAMC,YAExB,EAAKF,aAAeT,EAAMvH,KAAKmI,aAC/B,EAAKC,MAAQnB,OAAOoB,OAAO,GAAI,EAAKL,aAAc,CAChDM,SAAU,GACVC,aAAa,EACbC,eAAe,IAEjB,EAAKjB,MAAMvH,KAAKyI,MAAhB,gBAVqC,E,qDAa7B,IAAD,OACDlJ,EAAIY,KAAKiI,MACT/B,EAAI9G,EAAEyG,OACZ,OACE,sBAAKwB,UAAU,MAAf,UACE,yBAAQA,UAAU,YAAlB,UACE,8BACE,0CAAQrI,KAAKC,MAAMG,EAAEmJ,KAAO,IAAM,EAAlC,SAAsCnJ,EAAEmJ,KAAO,GAA/C,wBACA,0CAAQrC,EAAE9E,KAAKJ,KAAf,YACA,+BAAOkF,EAAEb,YAAF,sBAAqBa,EAAEb,YAAYrE,KAAnC,YAA2CkF,EAAEb,YAAYS,cAAc9F,MAAvE,KAAkF,gCAG3F,oBAAGqH,UAAU,SAAb,UACE,sBAAMA,UAAU,QAAhB,mBAA4BrH,KAAK8E,UAAU,UAA3C,YAAwDoB,EAAE9B,OAA1D,YAAoE8B,EAAE7B,aACrEzD,EAAOd,KAAI,SAAAmH,GAAC,gBAAO,EAAKnC,UAAUmC,GAAtB,YAA6Bf,EAAUe,OAAMnH,KAAI,SAAAV,GAAC,OAAK,sBAAciI,UAAU,QAAxB,SAAiCjI,GAAtBA,YAInF,sBAAKiI,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAamB,IAAKxI,KAAKwH,WAAtC,SACGxH,KAAKiI,MAAME,SAASrI,KAAI,SAAC2I,EAAG/C,GAAJ,aACvB,mBAAW2B,UAAW,mBAAUoB,EAAEC,aAAZ,aAAU,EAASC,KAAK,QAAQ,EAAtD,SACE,sBAAMtB,UAAU,UAAhB,SAA2BoB,EAAEtF,QADvBuC,QAMZ,qBAAK2B,UAAU,eAAf,SACGrH,KAAKiI,MAAMG,YAAcpI,KAAKiI,MAAMzB,QAAQ1G,KAAI,SAAC8I,EAAGlD,GAAJ,OAC/C,cAACyB,EAAD,CAEEE,UAAU,SACVpF,OAAQ2G,EACRtB,QAAS,EAAKuB,kBAAkBC,KAAK,EAAMF,EAAGlD,IAHzCA,MAMP,wBAAQ2B,UAAU,kBAAiBC,QAAStH,KAAK+I,UAAUD,KAAK9I,MAAM,GAAtE,0C,kCAU6B,IAAD,OAAtBgJ,EAAsB,wDAChCC,EAAOjJ,KAAK0H,WAAWjB,OAAO,EAAGuC,EAAMhJ,KAAK0H,WAAWwB,OAAS,GACtElJ,KAAKmJ,UACH,SAAA/J,GAAC,MAAK,CAAE+I,SAAU/I,EAAE+I,SAAS5B,OAAO0C,GAAMG,OAAO,SACjD,kCAAM,EAAK5B,WAAW6B,eAAtB,aAAM,EAAyBC,SAAS,CACtCC,IAAK,EAAK/B,WAAW6B,QAAQG,aAC7BC,SAAU,gB,kCAKkC,IAAhCC,EAA+B,wDAC9B,OAAb1J,KAAK2H,KACP3H,KAAKmJ,UAAS,iBAAO,CAAEf,aAAa,MACpCpI,KAAK+I,YACL/I,KAAK2H,IAAMgC,YAAY3J,KAAK4J,UAAUd,KAAK9I,MAAM,GAAO,MAC/C0J,IACL1J,KAAK0H,WAAWwB,QAClBlJ,KAAKmJ,UAAS,iBAAO,CAAEf,aAAa,MACpCpI,KAAK+I,cAELc,cAAc7J,KAAK2H,KACnB3H,KAAK2H,IAAM,KACX3H,KAAKmJ,UAAS,iBAAO,CAAEf,aAAa,U,iCAK/BjF,GAA8C,IAAC,IAAD,qBAAtBuF,EAAsB,iCAAtBA,EAAsB,kBACvD,IAAIoB,GAAa,EACG,kBAAT3G,IACT2G,EAAa3G,EAAK2G,aAAc,EAChCpB,EAAQvF,EAAKuF,OAASA,EACtBvF,EAAOA,EAAKA,MAGd,IAAM4G,GADN5G,EAAO2G,EAAa9J,KAAK8E,UAAU3B,GAAQA,GACT6G,MAAM,MACrClK,KAAI,SAAAV,GAAC,OAAIA,EAAE6K,UACXC,QAAO,SAAA9K,GAAC,OAAK,QAAQE,KAAKF,MACvB+K,EAAqBJ,EAAMjK,KAAI,SAAAV,GAAC,MAAK,CAAE+D,KAAM/D,EAAGsJ,aACtD,EAAA1I,KAAK0H,YAAW0C,KAAhB,oBAAwBD,IACxBnK,KAAK4J,c,iCAGIpD,GACTxG,KAAK6H,aAAarB,QAAUA,I,+BAKrB6D,GAAuD,IAAvCC,EAAsC,wDAM7D,OALIA,EACFtK,KAAK6H,aAAaU,KAAuD,IAA/CvJ,KAAKC,MAAMe,KAAK6H,aAAaU,KAAO,IAAM,GAAW8B,EAAS,GAExFrK,KAAK6H,aAAaU,MAAQ8B,EAErBrK,KAAK6H,aAAaU,O,8BAIzBvI,KAAKyH,WAAY,EACjBzH,KAAK6H,aAAe7H,KAAKoH,MAAMvH,KAAKmI,aACpC,IAAMnC,EAAS7F,KAAK6H,aAAahC,OACjCA,EAAOzE,KAAKM,UAAU1B,KAAM6F,GAC5B7F,KAAKmJ,SAASnJ,KAAK6H,cACnB7H,KAAKuK,iBACLvK,KAAKyH,WAAY,EACjBzH,KAAKoC,WAAW,2BAAQ,UACxBpC,KAAKoH,MAAMvH,KAAKyI,MAAMtI,MACtBA,KAAKwK,gB,uCAGW,IAAD,EAC0BxK,KAAKiI,MAAZwC,GADnB,EACPtC,SADO,EACGC,YADH,2CAEfpI,KAAK6H,aAAenB,EAAK+D,GAAI,K,oCAI7BzK,KAAKmJ,SAASnJ,KAAK6H,gB,+BAGZhD,GACP7E,KAAK4H,gBAAkB,4BAAU/C,EACjC7E,KAAKyH,WAAY,I,wCAIDxF,EAAgByI,GAChC1K,KAAKoC,WAAWH,EAAOkB,KAAM,QAE7BnD,KAAKyD,kBACL,IAAMrE,EAAIY,KAAK6H,aAEf,GAAmB,cAAf5F,EAAOoB,IACTrD,KAAK2K,aACA,GAAmB,kBAAf1I,EAAOoB,IAChBrD,KAAKsB,aAAa,IAAI+E,QACjB,GAAIjH,EAAEwL,OAAO1B,OAAS,EAAG,CAChB9J,EAAEwL,OAAOxL,EAAEwL,OAAO1B,OAAS,GACnC2B,QAAQ7K,KAAMiC,QACf,GAAIA,EAAO6I,UAAW,CAC3B,IAAMvJ,EAASnC,EAAEyG,OAAOzE,KAAKH,SAASP,IAAIuB,EAAO6I,WAC7CvJ,GACFA,EAAOwJ,WAAW/K,KAAMiC,QAEjBnD,MAAM+H,QAAQ5E,EAAOoB,MAC9BrD,KAAKgL,QAAQ/I,EAAOoB,KAGtBrD,KAAKuK,iBAEDvK,KAAKyH,YACPzH,KAAKoC,WAAWpC,KAAK4H,gBAAiB,UACtC5H,KAAKsG,WAAW,CAAC,CACfnD,KAAM,eACNE,IAAK,gBAITrD,KAAKwK,gB,8BAGCS,GACN,IAAMC,EAAOD,EAAI7B,MAAM,EAAG6B,EAAI/B,OAAS,GACjCiC,EAASF,EAAIA,EAAI/B,OAAS,IAAM,GAFZ,EDvM9B,SAAoBN,EAAQsC,GAExB,IADA,IAAIE,EAAIxC,EAAG1C,EAAI,KACNR,EAAI,EAAGA,EAAIwF,EAAKhC,OAAQxD,IAAK,CAClC,IAAMf,EAAMuG,EAAKxF,GACjB,IAAK0F,EAAEzG,GAAM,MACbuB,EAAIkF,EACJA,EAAIA,EAAEzG,GAEV,MAAO,CACH0G,OAAQD,EACRE,QAASpF,GCgMeqF,CAAWvL,KAAMkL,GAArCG,EAHkB,EAGlBA,OAAQC,EAHU,EAGVA,QACM,oBAAXD,GACRA,EAAoBG,MAAMF,EAASH,K,mCAI3BM,GACX,IAAIxC,EAAOjJ,KAAK6H,aAAa+C,OAC7B3B,EAAKmB,KAAKqB,GACVzL,KAAK6H,aAAa+C,OAAS3B,EAAKyC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAExJ,SAAWyJ,EAAEzJ,YAC9DsJ,EAAMI,QAAQ7L,Q,+BAGPyL,GACP,IAAMf,EAAQ1K,KAAK6H,aAAa+C,OAAOkB,WAAU,SAAAzL,GAAC,OAAIA,EAAEE,MAAQkL,EAAMlL,OAClEmK,GAAS,GACX1K,KAAK6H,aAAa+C,OAAOnE,OAAOiE,EAAO,GAEzC1K,KAAKuK,mB,uCAIL,IAAMnL,EAAIY,KAAK6H,aACf,GAAIzI,EAAEwL,OAAO1B,OAAS,EAAG,CACvB,IAAMuC,EAAQrM,EAAEwL,OAAOxL,EAAEwL,OAAO1B,OAAS,GACzClJ,KAAKsG,WAAWmF,EAAMM,SAAS/L,YAE/BA,KAAKyD,oB,wCAIU,IAAD,OACVyC,EAAIlG,KAAK6H,aAAahC,OACtBzE,EAAa8E,EAAE9E,KACfoF,EAAU1H,MAAMC,KAAKqC,EAAKH,SAASL,UAAU,SAAAP,GAAC,OAAIA,EAAE2L,gBAAgB,GAAMlM,KAAI,SAAA8I,GAAC,OAAI9B,OAAOoB,OAAOU,EAAG,CAAEkC,UAAWzK,EAAEE,YAAS0L,OAC5HC,EAAYhG,EAAEZ,UAAUzE,MAAQqF,EAAEb,YAAc,EAAI,GACpD8G,EAA0B,CAC9BhJ,KAAM,qBACNC,SAAU,eACV4C,UAAU,SAAD,OAAMkG,EAAN,UACT7I,IAAK,iBAEPrD,KAAKsG,WAAW4F,EAAS,sBAAO1F,GAAP,CAAgB2F,IAAmB3F,K,kCAI5D,OAAOxG,KAAK6H,aAAahC,S,+BAIzB,OAAO7F,KAAK6H,aAAa/H,M,gCAGjB6E,GACR,OAAO3E,KAAKoH,MAAMvH,KAAKiF,UAAUH,K,0CAIjC3E,KAAK2K,Y,GA3PS7C,IAAMsE,WCVTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCaCQ,E,kDAjBX,WAAYjN,GAAyB,kEAE1BA,GAFyB,IAG5BkB,GAAI,a,qDAIHM,EAAYE,EAAgBH,IACf,WAAdG,EAAOR,IAAmBQ,aAAkB0D,IAC5C5D,EAAKC,aAAa,IAAIqE,EAAY,CAC9B5E,GAAI,SACJ6E,MAAO5F,Y,GAbKmE,GCmDb4I,E,kDAvCX,WAAYlN,GAAgC,IAAD,8BACvC,cAAM,CACFkB,GAAI,qBACJC,KAAM,wBAPdgM,aAI2C,IAH3CC,aAG2C,IAF3CC,aAE2C,EAKvC,EAAKF,QAAUnN,EAAKmN,QACpB,EAAKC,QAAUpN,EAAKoN,SAAW,EAC/B,EAAKC,QAAUrN,EAAKqN,SAAW,EAPQ,E,4DAU3B7L,GACZ,MAAO,CAAC,CACJ8B,KAAK,eAAD,OAAOnD,KAAKoB,KAAKJ,MACrBoC,SAAU,eACV4C,UAAU,SAAD,OAAMhG,KAAKiN,QAAU,EAArB,c,iCAIN5L,EAAYY,GACnB,IAAMb,EAAOpB,KAAKoB,KAClBpB,KAAKiN,UACDjN,KAAKiN,SAAWjN,KAAKkN,SACrB9L,EAAKS,aAAaR,EAAMrB,MAExBV,EAAK+B,EAAKiC,YAAY8B,UACtB/D,EAAKe,WAAW,0DAChBhB,EAAKS,aAAaR,EAAMrB,MACxBoB,EAAK4D,YAAY3D,EAAMrB,KAAKgN,SAAS,IAEjChN,KAAKiN,SAAWjN,KAAKkN,SACrB7L,EAAKe,WAAW,sEAChBf,EAAKe,WAAL,wCAAwBhB,EAAKJ,KAA7B,sBAAwC,WAExCK,EAAKe,WAAW,4C,GAtCEN,GC0BnBqL,E,kDAtBX,cAA8D,IAAD,EAA/C1B,EAA+C,EAA/CA,MAAO2B,EAAwC,EAAxCA,KAAMnL,EAAkC,EAAlCA,OAAkC,4BACzD,cAAM,CACFlB,GAAI,gBACJC,KAAMyK,EAAM1K,MAPpB0K,WAI6D,IAH7DxJ,YAG6D,IAF7DmL,UAE6D,EAKzD,EAAK3B,MAAQA,EACb,EAAKxJ,OAASA,GAAU,CAAEkB,KAAM,OAChC,EAAKiK,KAAOA,IAAQ,EAPqC,E,4DAU7C/L,GACZ,MAAO,CAACrB,KAAKiC,U,iCAGNZ,EAAYY,GACnBZ,EAAKC,aAAatB,KAAKyL,OACnBzL,KAAKoN,MACLpN,KAAKoB,KAAKS,aAAaR,EAAMrB,U,GAtBR8B,GCclBuL,E,kDAdX,WAAYxN,GAA6B,IAAD,8BACpC,cAAM,CACFkB,GAAI,OACJoB,SAAU,MALlBmL,WAEwC,EAKpC,EAAKA,MAAQzN,EAAKyN,MALkB,E,oDAQhCjM,GACJrB,KAAKsN,MAAMlN,SAAQ,SAAAqI,GAAC,OAAIpH,EAAKe,WAAWqG,MACxCpH,EAAK+E,SAASpG,U,GAbSkC,GCqChBqL,E,kDA/BX,WAAY1N,GAA0B,IAAD,8BACjC,cAAM,CACFkB,GAAI,WACJoB,SAAU,KAPlByI,YAIqC,IAHrC4C,YAGqC,IAFrCC,QAAkB,EAOd,EAAK7C,OAAS/K,EAAK+K,OACnB,EAAK4C,OAAS1O,MAAM,EAAK8L,OAAO1B,OAAS,GAAGwE,KAAK,GAAG5N,KAAI,SAAC6N,EAAGjI,GAAJ,aAAU,UAAA7F,EAAK2N,cAAL,eAAc9H,KAAM,CAAEvC,KAAM,UAN7D,E,sDAS3B9B,GACN,GAAIrB,KAAKyN,SAAWzN,KAAK4K,OAAO1B,OAC5B7H,EAAK+E,SAASpG,UADlB,CAIA,IAAM4N,EAAK5N,KAAK4K,OAAO5K,KAAKyN,WAC5BpM,EAAKC,aAAasM,M,8BAGdvM,GACJrB,KAAK6N,UAAUxM,K,+BAGVA,GACL,MAAO,CAACrB,KAAKwN,OAAOxN,KAAKyN,QAAU,M,8BAG/BpM,EAAYY,GAChBjC,KAAK6N,UAAUxM,O,GAhCKa,GCeb4L,E,kDAbX,WAAYjO,GAA0B,IAAD,8BACjC,cAAM,CACFkB,GAAI,YACJoB,SAAU,MALlB0C,YAEqC,EAKjC,EAAKA,OAAShF,EAAKgF,OALc,E,oDAQ7BxD,GACJA,EAAKkE,SAASvF,KAAK6E,Y,GAZC3C,GCG5B,SAAS6L,IACL,OAAO,EAAIrP,EAAQ,EAAG,EAAG,GAG7B,IAgKesP,EAhKF,CACThG,WADS,WAEL,IAAMiG,EAAQ,CACV,IAAInN,EAAK,CACLC,GAAI,WACJC,KAAM,2BACNC,SAAU,CAAC,IAAIyC,EAAW,CAAEC,OAAQ,eACpCxC,QAAS,SAACE,GAAD,OAAgBA,EAAKiF,WAAW,CACrC,CAAEnD,KAAM,iCAASE,IAAK,CAAC,SAAU,WAAY,CAAC,gBAC9C,CAAEF,KAAM,qBAAOE,IAAK,CAAC,WAAY,CAAC,6EAG1C,IAAIvC,EAAK,CACLC,GAAI,YACJC,KAAM,qBACNC,SAAU,CAAC,IAAIyC,EAAW,CAAEC,OAAQ,kBAExC,IAAI7C,EAAK,CACLC,GAAI,aACJC,KAAM,qBACNC,SAAU,CACN,IAAIyC,EAAW,CAAEC,OAAQ,gBACzB,IAAID,EAAW,CAAEC,OAAQ,iBAGjC,IAAI7C,EAAK,CACLC,GAAI,cACJC,KAAM,eACNC,SAAU,CACN,IAAIyC,EAAW,CAAEC,OAAQ,WACzB,IAAID,EAAW,CAAEC,OAAQ,eACzB,IAAID,EAAW,CAAEC,OAAQ,cACzB,IAAIX,EAAW,CAAEC,KAAM,IAAIX,EAAY,CACnCvB,GAAI,OACJC,KAAM,eACNuB,OAAQ,IACRW,WAAW,OAGvB,IAAIpC,EAAK,CACLC,GAAI,aACJC,KAAM,2BACNC,SAAU,CACN,IAAIyC,EAAW,CAAEC,OAAQ,gBACzB,IAAIoJ,EAAoB,CACpBC,QAAS,CAAC,IAAIhK,EAAW,CAACC,KAAM,IAAIX,EAAY,CAC5CtB,KAAM,qBACNuB,OAAQ,CAAEG,MAAO,EAAG7D,MAAO,EAAG+D,KAAM,KACpCM,WAAW,UAI3B,IAAIpC,EAAK,CACLC,GAAI,SACJC,KAAM,eACNC,SAAU,CACN,IAAIyC,EAAW,CAAEC,OAAQ,oBACzB,IAAID,EAAW,CAAEC,OAAQ,mBAGjC,IAAI7C,EAAK,CACLC,GAAI,kBACJC,KAAM,iCACNC,SAAU,CACN,IAAIyC,EAAW,CAAEC,OAAQ,WACzB,IAAImJ,EAAc,CACd9L,KAAM,qBACNwD,WAAY,CAAE9B,MAAO,EAAGE,IAAK,GAC7B6B,eAAgB,eAChBL,OAAQ,GACRC,UAAW,GACXC,SAAU,GACVC,UAAW,GACXG,MAAO,CAAC,IAAIhB,EAAW,CACnBC,OAAQ,qBAKxB,IAAI7C,EAAK,CACLC,GAAI,aACJC,KAAM,2BACNC,SAAU,CACN,IAAIyC,EAAW,CAAEC,OAAQ,oBACzB,IAAIwJ,EAAmB,CACnBlL,OAAQ,CAAEkB,KAAM,2BAAQC,SAAU,sBAClCqI,MAAO,IAAI8B,EAAc,CACrB3C,OAAQ,CACJ,IAAIyC,EAAiB,CAAEC,MAAO,CAAC,CAAEnK,KAAM,WAAY2G,YAAY,MAC/D,IAAIgE,EAAc,CAAEjJ,OAAQ,8BAEhC2I,OAAQ,CAAC,CAAErK,KAAM,8BAKjC,IAAIrC,EAAK,CACLC,GAAI,WACJC,KAAM,kBAGRlB,EAAM,IAAIC,IAChBkO,EAAMnO,KAAI,SAAAV,GAAC,OAAIU,EAAIU,IAAIpB,EAAE2B,GAAI3B,MAC7B,IAAM8O,EAAkBxP,EAAQ,IAAM,EACtC,MAAO,CACHkM,OAAQ,GACR9K,MACA0G,QAAS,GACT+B,KAAM,EACN1C,OAAQ,IAAIZ,EAAa,CACrBlE,GAAI,SACJC,KAAM,qBACNI,KAAMtB,EAAIY,IAAI,YACdwE,MAAO6I,IACP3J,OAAQ8J,EACR7J,UAAW6J,EACX/I,MAAO4I,IACPzJ,SAAUyJ,IACVxJ,UAAWwJ,IACX3I,QAAS2I,IACT1I,YAAa,KACbC,UAAW,GACXd,WAAY,EACZC,eAAgB,mBAI5B6D,MAAO,SAACjH,GACJA,EAAKe,WAAW,mRAEpB0C,UAlIS,SAkICH,GACN,OAAQ3E,KAAKmO,YAAoBxJ,IAAQA,GAE7CwJ,YAAa,CACTjJ,MAAO,eACPd,OAAQ,eACRe,MAAO,eACPb,SAAU,eACVC,UAAW,eACXa,QAAS,eACTgJ,SAAS,ivC,SCvJjB,WACStH,OAAOC,cAERD,OAAOC,YAAc,SAA6BC,GAE9C,IADA,IAAM4B,EAA+B,GAC5B8B,EAAQ,EAAGA,EAAQ1D,EAAQkC,OAAQwB,IAAS,CACjD,IAAM2D,EAAQrH,EAAQ0D,GACtB9B,EAAEyF,EAAM,IAAMA,EAAM,GAExB,OAAOzF,IAIV9J,MAAMwP,UAAUrC,OAEjBnN,MAAMwP,UAAUrC,KAAO,SAAwCsC,GAC3D,IADoF,EAChFC,EAAgB,GADgE,cAEpExO,MAFoE,IAEpF,2BAAsB,CAAC,IAAZ2L,EAAW,QAClB6C,EAAMA,EAAIjI,OAAOoF,IAH+D,8BAKpF,OAAO6C,KCdnBC,GAEAC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK/O,KAAMA,MAEbgP,SAASC,eAAe,SAM1BzC,M","file":"static/js/main.ab489bd6.chunk.js","sourcesContent":["import { Dice } from \"../interfaces/interfaces\";\r\n\r\nfunction randInt(max: number, min: number = 0, times: number = 1): number {\r\n    return Array.from(Array(times), () => Math.floor(Math.random() * (max - min) + min)).reduce((s, n) => s + n, 0);\r\n}\r\n\r\nfunction rollDice(dice: Dice | number): number {\r\n    if (typeof dice === 'number') return dice;\r\n    return randInt(dice.faces + 1, 1, dice.times) * (dice.factor || 1) + (dice.fix || 0);\r\n}\r\n\r\nfunction test(possibility: number): boolean {\r\n    return (Math.random() < (possibility > 1 ? possibility / 100 : possibility));\r\n}\r\n\r\nlet uidc = Date.now();\r\nfunction genUid(): number {\r\n    return uidc++;\r\n}\r\n\r\nexport {\r\n    randInt,\r\n    test,\r\n    rollDice,\r\n    genUid,\r\n}","import { Unique } from \"../interfaces/types\";\r\n\r\nclass UniqueMap<T extends Unique> {\r\n    private map: Map<number, T> = new Map<number, T>();\r\n\r\n    constructor(data?: Array<T>) {\r\n        if (data) {\r\n            this.add(...data);\r\n        }\r\n    }\r\n\r\n    add(...elems: Array<T>): number {\r\n        let count = 0;\r\n        elems.forEach(e => {\r\n            if (!this.map.has(e.uid)) {\r\n                this.map.set(e.uid, e);\r\n                count++;\r\n            }\r\n        });\r\n        return count;\r\n    }\r\n\r\n    remove(...elems: Array<T | number>): number {\r\n        let count = 0;\r\n        elems.forEach(e => count += this.map.delete(typeof e === 'number' ? e : e.uid) ? 1 : 0);\r\n        return count;\r\n    }\r\n\r\n    get(uid: number): T | undefined {\r\n        return this.map.get(uid);\r\n    }\r\n\r\n    keys(): Array<number> {\r\n        return Array.from(this.map.keys());\r\n    }\r\n\r\n    values(): Array<T> {\r\n        return Array.from(this.map.values());\r\n    }\r\n    \r\n    get size(): number {\r\n        return this.map.size;\r\n    }\r\n}\r\n\r\nexport default UniqueMap;","import { Game, GameEvent } from \"../interfaces/interfaces\";\r\nimport { Identical, Named } from \"../interfaces/types\";\r\nimport Entity from \"./entities/Entity\";\r\nimport UniqueMap from \"./UniqueMap\";\r\n\r\ninterface SiteData extends Identical, Named {\r\n    entities?: Array<Entity>;\r\n    onEnter?: ((game: Game) => void) | GameEvent;\r\n}\r\n\r\nclass Site implements Identical, Named {\r\n\r\n    static FAKE_SITE = new Site({\r\n        id: '__fake_site__',\r\n        name: 'Fake Site',\r\n        entities: [],\r\n    });\r\n    \r\n    id: string;\r\n    name: string;\r\n    entities: UniqueMap<Entity> = new UniqueMap<Entity>();\r\n\r\n    private onEnterFn: ((game: Game) => void) | GameEvent | null;\r\n    \r\n    constructor(data: SiteData) {\r\n        this.id = data.id;\r\n        this.name = data.name;\r\n        this.onEnterFn = data.onEnter || null;\r\n        data.entities?.forEach(e => {\r\n            this.entities.add(e);\r\n            e.site = this;\r\n        });\r\n    }\r\n\r\n    onEnter(game: Game): void {\r\n        if (this.onEnterFn) {\r\n            if (typeof this.onEnterFn === 'function') {\r\n                this.onEnterFn(game);\r\n            } else {\r\n                game.triggerEvent(this.onEnterFn);\r\n            }\r\n        }\r\n    }\r\n\r\n    addEntity(game: Game, entity: Entity, silent: boolean = false): Site {\r\n        this.entities.add(entity);\r\n        if (entity.site !== this) {\r\n            entity.site = this;\r\n            if (!silent) {\r\n                this.entities.values().forEach(e => e.onDetect(game, entity, this));\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    addEntities(game: Game, entities: Array<Entity>, silent: boolean = false): Site {\r\n        entities.forEach(e => this.addEntity(game, e, silent));\r\n        return this;\r\n    }\r\n\r\n    removeEntity(game: Game, entity: Entity): Site {\r\n        this.entities.remove(entity.uid);\r\n        entity.site = Site.FAKE_SITE;\r\n        return this;\r\n    }\r\n\r\n    removeEntities(game: Game, entities: Array<Entity>): Site {\r\n        entities.forEach(e => this.removeEntity(game, e));\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\nexport default Site;\r\nexport type {\r\n    SiteData,\r\n}","import { Game, Option } from \"../../interfaces/interfaces\";\r\nimport { Identical, Named, Unique } from \"../../interfaces/types\";\r\nimport { genUid } from \"../../utils/math\";\r\nimport Site from \"../Site\";\r\n\r\ninterface EntityData {\r\n    id?: string;\r\n    uid?: number;\r\n    name: string;\r\n    site?: Site;\r\n}\r\n\r\nclass Entity implements Identical, Unique, Named {\r\n    id: string;\r\n    uid: number;\r\n    name: string;\r\n    site: Site;\r\n\r\n    constructor(data: EntityData) {\r\n        this.id = data.id || 'entity';\r\n        this.uid = data.uid || genUid();\r\n        this.name = data.name;\r\n        this.site = data.site || Site.FAKE_SITE;\r\n    }\r\n\r\n    onDetect(game: Game, entity: Entity, site: Site) {\r\n        // empty\r\n    }\r\n\r\n    goToSite(game: Game, newSite: Site, silient: boolean = false): void {\r\n        this.site.removeEntity(game, this);\r\n        if (silient) {\r\n            newSite.entities.add(this);\r\n        } else {\r\n            newSite.addEntity(game, this);\r\n        }\r\n        this.site = newSite;\r\n    }\r\n\r\n    getInteractions(game: Game): Array<Option> {\r\n        // return [{\r\n        //     text: this.name,\r\n        //     tag: this.uid,\r\n        // }];\r\n        return [];\r\n    }\r\n\r\n    onInteract(game: Game, option: Option): void {\r\n        // if (option.tag === this.uid) {\r\n        //     game.appendText(this.name);\r\n        // }\r\n    }\r\n}\r\n\r\nexport default Entity;\r\nexport type {\r\n    EntityData,\r\n}","import { Game, Option } from \"../interfaces/interfaces\";\r\nimport { Identical, Unique } from \"../interfaces/types\";\r\nimport { genUid } from \"../utils/math\";\r\n\r\ninterface EventData {\r\n    id: string;\r\n    priority?: number;\r\n    uid?: number;\r\n}\r\n\r\nclass GameEvent implements Identical, Unique {\r\n    id: string;\r\n    priority: number;\r\n    uid: number;\r\n\r\n    constructor(data: EventData) {\r\n        this.id = data.id;\r\n        this.priority = data.priority || 0;\r\n        this.uid = data.uid || genUid();\r\n    }\r\n\r\n    onStart(game: Game): void {\r\n        game.appendText(`事件[${this.id}]开始了`);\r\n    }\r\n\r\n    onRender(game: Game): Array<Option> {\r\n        return [];\r\n    }\r\n\r\n    onInput(game: Game, option: Option): void {\r\n        game.appendText(`来自事件[${this.id}]`);\r\n    }\r\n}\r\n\r\nexport default GameEvent;\r\nexport type {\r\n    EventData,\r\n}","import { Game } from \"../../interfaces/interfaces\";\r\nimport { Identical, Named, Unique } from \"../../interfaces/types\";\r\nimport { genUid } from \"../../utils/math\";\r\nimport LivingEntity from \"../entities/LivingEntity\";\r\n\r\ninterface ItemData {\r\n    id?: string;\r\n    uid?: number;\r\n    name: string;\r\n}\r\n\r\nclass Item implements Identical, Unique, Named {\r\n    id: string;\r\n    uid: number;\r\n    name: string;\r\n\r\n    constructor(data: ItemData) {\r\n        this.id = data.id || 'item';\r\n        this.uid = data.uid || genUid();\r\n        this.name = data.name;\r\n    }\r\n\r\n    onAttack(game: Game, entity: LivingEntity) {\r\n        // empty\r\n    }\r\n\r\n    previewDamage(game: Game, entity?: LivingEntity): string {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport default Item;\r\nexport type {\r\n    ItemData,\r\n}","import { Game } from \"../../interfaces/interfaces\";\r\nimport { Dice } from \"../../interfaces/types\";\r\nimport { rollDice } from \"../../utils/math\";\r\nimport LivingEntity from \"../entities/LivingEntity\";\r\nimport Item, { ItemData } from \"./Item\";\r\n\r\ninterface MeleeWeaponData extends ItemData {\r\n    damage: number | Dice;\r\n}\r\n\r\nclass MeleeWeapon extends Item {\r\n    damage: number | Dice;\r\n\r\n    constructor(data: MeleeWeaponData) {\r\n        super({\r\n            ...data,\r\n            id: data.id || 'melee_weapon'\r\n        });\r\n        this.damage = data.damage;\r\n    }\r\n\r\n    onAttack(game: Game, entity: LivingEntity) {\r\n        const dmg = rollDice(this.damage);\r\n        entity.mutateValue(game, 'health', -dmg, `受到${this.name}攻击`);\r\n    }\r\n\r\n    previewDamage(game: Game, entity: LivingEntity): string {\r\n        if (typeof this.damage === 'number') {\r\n            return String(this.damage);\r\n        } else {\r\n            const { faces, times, fix, factor } = this.damage;\r\n            let str = `${times || 1}d${faces}`;\r\n            if (factor && factor !== 1) {\r\n                str = `${factor}*(${str})`;\r\n            }\r\n            if (fix) {\r\n                str += fix >= 0 ? '+' + fix : String(fix);\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n}\r\n\r\nexport default MeleeWeapon;\r\nexport type {\r\n    MeleeWeaponData,\r\n}","import { Game, Item, Option } from \"../../interfaces/interfaces\";\r\nimport Entity from \"./Entity\";\r\nimport Site from \"../Site\";\r\n\r\ninterface ItemEntityData {\r\n    site?: Site;\r\n    item: Item;\r\n    autoEquip?: boolean;\r\n}\r\n\r\nclass ItemEntity extends Entity {\r\n    item: Item;\r\n    autoEquip: boolean;\r\n\r\n    constructor({ item, site, autoEquip }: ItemEntityData) {\r\n        super({\r\n            id: 'item', \r\n            name: item.name,\r\n            site,\r\n        });\r\n        this.item = item;\r\n        this.autoEquip = autoEquip || false;\r\n    }\r\n    \r\n    getInteractions() {\r\n        return [{\r\n            text: '捡起' + this.item.name,\r\n            leftText: '💎',\r\n            tag: [],\r\n        }];\r\n    }\r\n\r\n    onInteract(game: Game, option: Option) {\r\n        if (this.autoEquip) {\r\n            game.getPlayer().holdItem(game, this.item);\r\n        } else {\r\n            game.getPlayer().addItemToInventory(game, this.item);\r\n        }\r\n        this.site.removeEntity(game, this);\r\n        game.showPortOptions();\r\n    }\r\n}\r\n\r\nexport default ItemEntity;\r\nexport type {\r\n    ItemEntityData,\r\n}","import { Game, Option } from \"../../interfaces/interfaces\";\r\nimport Entity from \"./Entity\";\r\nimport Site from \"../Site\";\r\n\r\ninterface PortEntityData {\r\n    site?: Site;\r\n    target: string;\r\n    timeCost?: number;\r\n}\r\n\r\nclass PortEntity extends Entity {\r\n    target: string;\r\n    timeCost: number;\r\n\r\n    constructor({ target, site, timeCost }: PortEntityData) {\r\n        super({\r\n            id: 'port', \r\n            name: target,\r\n            site,\r\n        });\r\n        this.target = target;\r\n        this.timeCost = timeCost || 1;\r\n    }\r\n    \r\n    getInteractions(game: Game) {\r\n        return [{\r\n            text: '去往' + (game.getMap().get(this.target)?.name || '#ERROR#'),\r\n            leftText: (game.getPlayer().prevSite?.id === this.target) ? '⬅' : '➡',\r\n            tag: this.uid,\r\n        }];\r\n    }\r\n\r\n    onInteract(game: Game, option: Option) {\r\n        if (option.tag === this.uid) {\r\n            const site = game.getMap().get(this.target);\r\n            if (site) {\r\n                game.getPlayer().goToSite(game, site);\r\n                game.timePass(this.timeCost);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default PortEntity;\r\nexport type {\r\n    PortEntityData,\r\n}","function num2strWithSign(num: number): string {\r\n    return num >= 0 ? '+' + num : String(num);\r\n}\r\n\r\nexport {\r\n    num2strWithSign,\r\n}","import { Dice, Game, Item, ItemEntity, MeleeWeapon, Site } from \"../../interfaces/interfaces\";\r\nimport { num2strWithSign } from \"../../utils/strings\";\r\nimport Entity, { EntityData } from \"./Entity\";\r\n\r\ninterface LivingEntityData extends EntityData {\r\n    health: number;\r\n    maxHealth: number;\r\n    strength: number;\r\n    dexterity: number;\r\n    baseDamage: Dice | number;\r\n    baseWeaponName: string;\r\n    loots?: Array<Entity | Item>;\r\n}\r\n\r\nclass LivingEntity extends Entity {\r\n    \r\n    health: number;\r\n    maxHealth: number;\r\n    strength: number;\r\n    dexterity: number;\r\n    baseDamage: Dice | number;\r\n    baseWeaponName: string;\r\n    loots: Array<Entity>;\r\n\r\n    constructor(data: LivingEntityData) {\r\n        super(data);\r\n        this.health = data.health;\r\n        this.maxHealth = data.maxHealth;\r\n        this.strength = data.strength;\r\n        this.dexterity = data.dexterity;\r\n        this.baseDamage = data.baseDamage;\r\n        this.baseWeaponName = data.baseWeaponName;\r\n        this.loots = data.loots?.map(e => e instanceof Item ? new ItemEntity({ item: e }) : e) || [];\r\n    }\r\n\r\n    mutateValue(game: Game, key: string, delta: number, reason?: string): void {\r\n        switch(key) {\r\n            case 'health': this.health += delta; break;\r\n            case 'strength': this.strength += delta; break;\r\n            case 'dexterity': this.dexterity += delta; break;\r\n        }\r\n        game.appendText(`${this.name} ${reason || ''} ${game.translate(key)} ${num2strWithSign(delta)}`);\r\n        if (!this.isAlive()) {\r\n            game.appendText(`${this.name}死亡`);\r\n            this.site.addEntities(game, this.loots);\r\n            this.site.removeEntity(game, this);\r\n        }\r\n    }\r\n\r\n    goToSite(game: Game, newSite: Site): void {\r\n        game.appendText(`${this.name}来到了${newSite.name}`, 'mutate');\r\n        super.goToSite(game, newSite);\r\n    }\r\n\r\n    getWeapon(): Item {\r\n        return new MeleeWeapon({\r\n            id: 'melee',\r\n            name: this.baseWeaponName,\r\n            damage: this.baseDamage,\r\n        });\r\n    }\r\n\r\n    isAlive(): boolean {\r\n        return this.health > 0;\r\n    }\r\n}\r\n\r\nexport default LivingEntity;\r\nexport type {\r\n    LivingEntityData,\r\n}","import { Game, Option, Site } from \"../../interfaces/interfaces\";\r\nimport LivingEntity, { LivingEntityData } from \"./LivingEntity\";\r\nimport Item from \"../items/Item\";\r\nimport ItemEntity from \"./ItemEntity\";\r\nimport UniqueMap from \"../UniqueMap\";\r\nimport { num2strWithSign } from \"../../utils/strings\";\r\n\r\ninterface PlayerEntityData extends LivingEntityData {\r\n    money: number;\r\n    magic: number;\r\n    insight: number;\r\n    holdingItem: Item | null;\r\n    inventory: Array<Item>;\r\n    prevSite?: Site;\r\n}\r\n\r\nclass PlayerEntity extends LivingEntity {\r\n    money: number;\r\n    magic: number;\r\n    insight: number;\r\n    holdingItem: Item | null;\r\n    inventory: UniqueMap<Item> = new UniqueMap<Item>();\r\n    prevSite?: Site;\r\n\r\n    constructor(data: PlayerEntityData) {\r\n        super({...data, id: 'player'});\r\n        this.money = data.money;\r\n        this.magic = data.magic;\r\n        this.insight = data.insight;\r\n        this.holdingItem = data.holdingItem;\r\n        data.inventory.forEach(e => this.inventory.add(e));\r\n        this.prevSite = data.prevSite;\r\n    }\r\n\r\n    mutateValue(game: Game, key: string, delta: number, reason?: string): void {\r\n        switch(key) {\r\n            case 'health': this.health += delta; break;\r\n            case 'magic': this.magic += delta; break;\r\n            case 'money': this.money += delta; break;\r\n            case 'strength': this.strength += delta; break;\r\n            case 'insight': this.insight += delta; break;\r\n            case 'dexterity': this.dexterity += delta; break;\r\n        }\r\n        game.appendText(`${this.name} ${reason || ''} ${game.translate(key)} ${num2strWithSign(delta)}`);\r\n        if (!this.isAlive()) {\r\n            game.gameOver('失血过多');\r\n        }\r\n    }\r\n\r\n    holdItem(game: Game, item: Item | null, replaceOption: 'drop' | 'restore' | 'delete' = 'restore'): void {\r\n        const prevItem = this.holdingItem;\r\n        this.holdingItem = item;\r\n        if (item) {\r\n            this.inventory.remove(item);\r\n            game.appendText(`${this.name}拿起了${item.name}`, 'mutate');\r\n        } else if (prevItem) {\r\n            game.appendText(`${this.name}收起了${prevItem.name}`, 'mutate');\r\n        }\r\n        if (!prevItem) return;\r\n        switch (replaceOption) {\r\n            case 'drop': this.site.addEntity(game, new ItemEntity({ item: prevItem })); break;\r\n            case 'restore': this.inventory.add(prevItem); break;\r\n            case 'delete': break;\r\n        }\r\n    }\r\n\r\n    goToSite(game: Game, newSite: Site): void {\r\n        this.prevSite = this.site;\r\n        super.goToSite(game, newSite);\r\n    }\r\n\r\n    addItemToInventory(game: Game, item: Item): boolean {\r\n        if (this.inventory.add(item)) {\r\n            game.appendText(`${this.name}获得了${item.name}`, 'mutate');\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    removeItemFromInventory(game: Game, item: Item | number, replaceOption: 'drop' | 'delete' = 'drop'): boolean {\r\n        if (typeof item === 'number') {\r\n            const i = this.inventory.get(item);\r\n            if (!i) return false;\r\n            item = i;\r\n        }\r\n        if (!this.inventory.remove(item)) return false;\r\n        switch (replaceOption) {\r\n            case 'drop': this.site.addEntity(game, new ItemEntity({ item, site: this.site })); break;\r\n            case 'delete': break;\r\n        }\r\n        game.appendText(`${this.name}失去了${item.name}`, 'mutate');\r\n        return true;\r\n    }\r\n\r\n    getWeapon(): Item {\r\n        return this.holdingItem || super.getWeapon();\r\n    }\r\n\r\n    getInteractions(): Array<Option> {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport default PlayerEntity;\r\nexport type {\r\n    PlayerEntityData,\r\n}","import { Game, GameEvent, LivingEntity, Option } from \"../../interfaces/interfaces\";\r\nimport { test } from \"../../utils/math\";\r\nimport { EventData } from \"../GameEvent\";\r\n\r\ninterface CombatEventData extends EventData {\r\n    enemy: LivingEntity;\r\n}\r\n\r\nclass CombatEvent extends GameEvent {\r\n    enemy: LivingEntity;\r\n\r\n    constructor(data: CombatEventData) {\r\n        super({\r\n            ...data,\r\n            priority: 10,\r\n        });\r\n        this.enemy = data.enemy;\r\n    }\r\n\r\n    onStart(game: Game) {\r\n        game.appendText(`在你面前的是一个如暗夜般漆黑的怪物——${this.enemy.name}(${this.enemy.health}/${this.enemy.maxHealth})`);\r\n    }\r\n\r\n    onRender(game: Game): Array<Option> {\r\n        const player = game.getPlayer();\r\n        const previewDamage = player.getWeapon().previewDamage(game, this.enemy);\r\n        return [\r\n            { \r\n                text: `攻击`,\r\n                leftText: '🗡',\r\n                rightText: `${previewDamage}♥`,\r\n                tag: 'attack',\r\n            },\r\n            { \r\n                text: `逃跑`,\r\n                leftText: '🏃‍',\r\n                rightText: `${player.dexterity}%`,\r\n                tag: 'escape',\r\n            },\r\n        ];\r\n    }\r\n\r\n    onInput(game: Game, option: Option) {\r\n        let escaped: boolean = false;\r\n        const p = game.getPlayer();\r\n        const e = this.enemy;\r\n        if (option.tag === 'attack') {\r\n            if (test(this.enemy.dexterity)) {\r\n                game.appendText(this.enemy.name + '躲开了你的攻击');\r\n                if (test(this.enemy.dexterity)) {\r\n                    game.appendText('并给了你一拳');\r\n                    e.getWeapon().onAttack(game, p);\r\n                }\r\n            } else {\r\n                const weapon = p.getWeapon();\r\n                weapon.onAttack(game, e);\r\n            }\r\n        } else if (option.tag === 'escape') {\r\n            if(test(p.dexterity) || !test(e.dexterity)) {\r\n                escaped = true;\r\n                game.appendText('你逃了出去');\r\n                game.endEvent(this);\r\n            } else {\r\n                game.appendText('你没有逃跑成功');\r\n                if (test(this.enemy.strength)) {\r\n                    game.appendText('而且还被爪子抓伤');\r\n                    e.getWeapon().onAttack(game, p);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.enemy.health <= 0) {\r\n            game.appendText('你打败了' + this.enemy.name);\r\n            game.endEvent(this);\r\n            // game.triggerEvent('end');\r\n        } else if (escaped) {\r\n            game.appendText(`你成功逃离了${this.enemy.name}的追杀`);\r\n        } else {\r\n            game.appendText(`${this.enemy.name}依然存活(${this.enemy.health}/${this.enemy.maxHealth})`);\r\n            game.appendText(`到了${this.enemy.name}的回合`);\r\n            if (test(game.getPlayer().dexterity)) {\r\n                game.appendText('你逃过了它的偷袭');\r\n            } else {\r\n                game.appendText('你被爪子抓伤');\r\n                e.getWeapon().onAttack(game, p);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default CombatEvent;\r\nexport type { CombatEventData };\r\n","import { Game, GameEvent, Option } from \"../../interfaces/interfaces\";\r\n\r\nclass InventoryEvent extends GameEvent {\r\n\r\n    constructor() {\r\n        super({\r\n            id: 'inventory',\r\n            priority: 10\r\n        });\r\n    }\r\n\r\n    onStart(game: Game) {\r\n        const p = game.getPlayer();\r\n        game.setOptions([{ text: '返回', tag: [] }]\r\n            .concat(Array.from(p.inventory.values(), i => ({\r\n                text: (p.holdingItem?.uid === i.uid ? '卸下' : '装备') + i.name,\r\n                tag: ['currentState', 'player', 'holdItem',  [p.holdingItem?.uid === i.uid ? i : null]] as any,\r\n            })))\r\n        );\r\n    }\r\n\r\n    onRender(game: Game) {\r\n        const p = game.getPlayer();\r\n        const options = [\r\n            { text: '返回' },\r\n            ...p.inventory.values().map(i => ({ \r\n                text: '拿上' + i.name,\r\n                leftText: '🤜',\r\n                rightText: i.previewDamage(game),\r\n                tag: i.uid,\r\n            })),\r\n        ];\r\n        if (p.holdingItem) {\r\n            options.splice(1, 0, { \r\n                text: '收起'+ p.holdingItem.name,\r\n                leftText: '🤚',\r\n                rightText: p.holdingItem.previewDamage(game),\r\n                tag: p.holdingItem.uid,\r\n            });\r\n        }\r\n        return options;\r\n    }\r\n\r\n    onInput(game: Game, option: Option) {\r\n        if (typeof option.tag === 'number') {\r\n            const uid: number = option.tag;\r\n            const p = game.getPlayer();\r\n\r\n            if (uid === p.holdingItem?.uid) {\r\n                p.holdItem(game, null);\r\n            } else {\r\n                const item = p.inventory.get(option.tag);\r\n                if (item) {\r\n                    p.holdItem(game, item);\r\n                }\r\n            }\r\n        }\r\n        game.endEvent(this);\r\n    }\r\n}\r\n\r\nexport default InventoryEvent;\r\n","function copy<T>(ori: T, shallow: boolean = false): T {\r\n    if (!ori) return ori; // false, null, undefined\r\n    if (typeof ori === 'object') {\r\n        if (Array.isArray(ori)) {\r\n            return (shallow ? [...ori] : ori.map(copy as any)) as unknown as T;\r\n        }\r\n        return shallow ? {...ori} : Object.fromEntries(\r\n            Object.entries(ori)\r\n            .map((k, v) => [k, copy(v)])\r\n        );\r\n    }\r\n    return ori;\r\n    // return JSON.parse(JSON.stringify(ori));\r\n}\r\n\r\nfunction findByPath(o: any, path: Array<string>) {\r\n    let w = o, p = null;\r\n    for (let i = 0; i < path.length; i++) {\r\n        const key = path[i];\r\n        if (!w[key]) break;\r\n        p = w;\r\n        w = w[key];\r\n    }\r\n    return {\r\n        result: w,\r\n        thisArg: p,\r\n    };\r\n}\r\n\r\nexport {\r\n    copy,\r\n    findByPath,\r\n}","import React, { MouseEventHandler, RefObject } from 'react';\nimport './App.css';\nimport InventoryEvent from './buildin/events/InventoryEvent';\nimport { Game, GameState, Option, Text, GameEvent, GameData, Site } from './interfaces/interfaces';\nimport { copy, findByPath } from './utils/objects';\n\nfunction OptionBtn(props: { option: Option, className: string, onClick: MouseEventHandler }) {\n  const { className, option, onClick } = props;\n  return (\n    <button className={className} onClick={onClick}>\n      {option.leftText ? <span className=\"option-side-text left\">{option.leftText}</span> : null}\n      {option.text}\n      {option.rightText ? <span className=\"option-side-text right\">{option.rightText}</span> : null}\n    </button>\n  );\n}\n\ninterface AppState extends GameState {\n  textList: Array<Text>;\n  showOptions: boolean;\n}\n\nconst values = ['magic', 'money', 'insight', 'strength', 'dexterity'];\n\nclass App extends React.Component<{ data: GameData }, AppState> implements Game {\n\n  private textListEl: RefObject<HTMLDivElement>;\n  private resetting: boolean = false;\n  private textBuffer: Array<Text> = [];\n  private pid: NodeJS.Timeout | null = null;\n  private gameOverMessage: string = '';\n  private currentState: GameState;\n\n  constructor(props: { data: GameData }) {\n    super(props);\n    this.textListEl = React.createRef<HTMLDivElement>();\n\n    this.currentState = props.data.initialize();\n    this.state = Object.assign({}, this.currentState, { \n      textList: [], \n      showOptions: true, \n      showInventory: false,\n    });\n    this.props.data.start(this);\n  }\n\n  render() {\n    const s = this.state;\n    const p = s.player;\n    return (\n      <div className=\"App\">\n        <header className=\"state-bar\">\n          <p>\n            <span>第{Math.floor(s.time / 24) + 1}天{s.time % 24}点钟，</span>\n            <span>在{p.site.name}，</span>\n            <span>{p.holdingItem ? `手持${p.holdingItem.name}(${p.holdingItem.previewDamage(this)})` : '两手空空'}</span>\n          </p>\n          \n          <p className=\"values\">\n            <span className=\"value\">{`${this.translate('health')}:${p.health}/${p.maxHealth}`}</span>\n            {values.map(k => `${this.translate(k)}:${(p as any)[k]}`).map(s => (<span key={s} className=\"value\">{s}</span>))}\n          </p>\n        </header>\n        \n        <div className=\"panel\">\n          <div className=\"text-panel\" ref={this.textListEl}>\n            {this.state.textList.map((t, i) => (\n              <p key={i} className={'text ' + t.types?.join(' ') || ''}>\n                <span className=\"content\">{t.text}</span>\n              </p>\n            ))}\n          </div>\n\n          <div className=\"option-panel\">\n            {this.state.showOptions ? this.state.options.map((o, i) => (\n              <OptionBtn\n                key={i} \n                className=\"option\"\n                option={o}\n                onClick={this.handleClickOption.bind(this, o, i)}\n              />\n            )) \n            : <button className=\"option skip-btn\"onClick={this.flushText.bind(this, true)}> -=快进=- </button>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  //#region text\n\n  private flushText(all: boolean = false) {\n    const list = this.textBuffer.splice(0, all ? this.textBuffer.length : 1);\n    this.setState(\n      s => ({ textList: s.textList.concat(list).slice(-100) }),\n      () => this.textListEl.current?.scrollTo({\n        top: this.textListEl.current.scrollHeight,\n        behavior: 'smooth',\n      })\n    );\n  }\n\n  private flushLoop(isInInterval: boolean = false) {\n    if (this.pid === null) {\n      this.setState(() => ({ showOptions: false }));\n      this.flushText();\n      this.pid = setInterval(this.flushLoop.bind(this, true), 350);\n    } else if (isInInterval){\n      if (this.textBuffer.length) {\n        this.setState(() => ({ showOptions: false }));\n        this.flushText();\n      } else {\n        clearInterval(this.pid);\n        this.pid = null;\n        this.setState(() => ({ showOptions: true }));\n      }\n    }\n  }\n\n  appendText(text: Text | string, ...types: Array<string>) {\n    let translated = false;\n    if (typeof text !== 'string') {\n      translated = text.translated || false;\n      types = text.types || types;\n      text = text.text;\n    }\n    text = translated ? this.translate(text) : text;\n    const lines: Array<string> = text.split('\\n')\n      .map(s => s.trim())\n      .filter(s => !/^\\s*$/.test(s));\n    const packs: Array<Text> = lines.map(s => ({ text: s, types }));\n    this.textBuffer.push(...packs);\n    this.flushLoop();\n  }\n\n  setOptions(options: Array<Option>) {\n    this.currentState.options = options;\n  }\n\n  //#endregion\n\n  timePass(change: number, isInNextDay: boolean = false): number {\n    if (isInNextDay) {\n      this.currentState.time = (Math.floor(this.currentState.time / 24) + 1) * 24 + (change % 24);\n    } else {\n      this.currentState.time += change;\n    }\n    return this.currentState.time;\n  }\n\n  reset() {\n    this.resetting = true;\n    this.currentState = this.props.data.initialize();\n    const player = this.currentState.player;\n    player.site.addEntity(this, player);\n    this.setState(this.currentState);\n    this.refreshOptions();\n    this.resetting = false;\n    this.appendText('开始游戏', 'system');\n    this.props.data.start(this);\n    this.applyChange();\n  }\n  \n  takeScreenshot() {\n    const { textList, showOptions, ...ss } = this.state;\n    this.currentState = copy(ss, true);\n  }\n\n  applyChange() {\n    this.setState(this.currentState);\n  }\n\n  gameOver(reason?: string) {\n    this.gameOverMessage = '游戏结束 ' + reason;\n    this.resetting = true;\n  }\n\n  // 相当于游戏的主循环\n  handleClickOption(option: Option, index: number) {\n    this.appendText(option.text, 'self');\n    // this.takeScreenshot();\n    this.showPortOptions();\n    const s = this.currentState;\n\n    if (option.tag === '__reset__') {\n      this.reset();\n    } else if (option.tag === '__inventory__') {\n      this.triggerEvent(new InventoryEvent());\n    } else if (s.events.length > 0) {\n      const event = s.events[s.events.length - 1];\n      event.onInput(this, option);\n    } else if (option.entityUid) {\n      const entity = s.player.site.entities.get(option.entityUid);\n      if (entity) {\n        entity.onInteract(this, option)\n      }\n    } else if (Array.isArray(option.tag)) {\n      this.execCmd(option.tag);\n    }\n\n    this.refreshOptions();\n\n    if (this.resetting) {\n      this.appendText(this.gameOverMessage, 'system');\n      this.setOptions([{\n        text: '重来',\n        tag: '__reset__'\n      }]);\n    }\n\n    this.applyChange();\n  }\n\n  execCmd(cmd: Array<string>) {\n    const path = cmd.slice(0, cmd.length - 1);\n    const params = cmd[cmd.length - 2] || [];\n    const { result, thisArg } = findByPath(this, path);\n    if (typeof result === 'function') {\n      (result as Function).apply(thisArg, params);\n    }\n  }\n\n  triggerEvent(event: GameEvent) {\n    let list = this.currentState.events;\n    list.push(event);\n    this.currentState.events = list.sort((a, b) => a.priority - b.priority);\n    event.onStart(this);\n  }\n\n  endEvent(event: GameEvent) {\n    const index = this.currentState.events.findIndex(e => e.uid === event.uid);\n    if (index >= 0) {\n      this.currentState.events.splice(index, 1);\n    }\n    this.refreshOptions();\n  }\n\n  refreshOptions() {\n    const s = this.currentState;\n    if (s.events.length > 0) {\n      const event = s.events[s.events.length - 1];\n      this.setOptions(event.onRender(this));\n    } else {\n      this.showPortOptions();\n    }\n  }\n\n  showPortOptions() {\n    const p = this.currentState.player;\n    const site: Site = p.site;\n    const options = Array.from(site.entities.values(), e => e.getInteractions(this).map(o => Object.assign(o, { entityUid: e.uid }))).flat();\n    const itemCount = p.inventory.size + (p.holdingItem ? 1 : 0);\n    const inventoryOption: Option = {\n      text: '物品栏',\n      leftText: '💰',\n      rightText: `共${itemCount}个`,\n      tag: '__inventory__',\n    };\n    this.setOptions(itemCount ? [...options, inventoryOption] : options);\n  }\n\n  getPlayer() {\n    return this.currentState.player;\n  }\n\n  getMap() {\n    return this.currentState.map;\n  }\n\n  translate(key: string): string {\n    return this.props.data.translate(key);\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { CombatEvent, Entity, Game, LivingEntity, PlayerEntity, Site } from \"../../interfaces/interfaces\";\r\nimport { LivingEntityData } from \"./LivingEntity\";\r\n\r\nclass MonsterEntity extends LivingEntity {\r\n\r\n    constructor(data: LivingEntityData) {\r\n        super({\r\n            ...data,\r\n            id: 'monster',\r\n        });\r\n    }\r\n\r\n    onDetect(game: Game, entity: Entity, site: Site) {\r\n        if (entity.id === 'player' || entity instanceof PlayerEntity) {\r\n            game.triggerEvent(new CombatEvent({\r\n                id: 'combat',\r\n                enemy: this,\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport default MonsterEntity;","import { Game, Option } from \"../../interfaces/interfaces\";\r\nimport { test } from \"../../utils/math\";\r\nimport Entity from \"./Entity\";\r\n\r\ninterface InvestigationEntityData {\r\n    results: Array<Entity>;\r\n    counter?: number;\r\n    chances?: number;\r\n}\r\n\r\nclass InvestigationEntity extends Entity {\r\n    results: Array<Entity>;\r\n    counter: number;\r\n    chances: number;\r\n\r\n    constructor(data: InvestigationEntityData) {\r\n        super({\r\n            id: 'site_investigation', \r\n            name: 'site_investigation',\r\n        });\r\n        this.results = data.results;\r\n        this.counter = data.counter || 0;\r\n        this.chances = data.chances || 2;\r\n    }\r\n    \r\n    getInteractions(game: Game): Array<Option> {\r\n        return [{\r\n            text: `调查${this.site.name}`,\r\n            leftText: '💡',\r\n            rightText: `第${this.counter + 1}次`\r\n        }];\r\n    }\r\n\r\n    onInteract(game: Game, option: Option): void {\r\n        const site = this.site;\r\n        this.counter++;\r\n        if (this.counter >= this.chances) {\r\n            site.removeEntity(game, this);\r\n        }\r\n        if (test(game.getPlayer().insight)) {\r\n            game.appendText('你似乎察觉到了什么');\r\n            site.removeEntity(game, this);\r\n            site.addEntities(game, this.results, true);\r\n        } else {\r\n            if (this.counter >= this.chances) {\r\n                game.appendText('好像没发现什么，放弃吧');\r\n                game.appendText(`你失去了对${site.name}的兴趣`, 'mutate');\r\n            } else {\r\n                game.appendText('没什么特别的');\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default InvestigationEntity;","import { Game, GameEvent, Option } from \"../../interfaces/interfaces\";\r\nimport Entity from \"./Entity\";\r\n\r\ninterface EventTriggerEntityData {\r\n    event: GameEvent;\r\n    option?: Option;\r\n    once?: boolean; \r\n}\r\n\r\nclass EventTriggerEntity extends Entity {\r\n    event: GameEvent;\r\n    option: Option;\r\n    once: boolean; \r\n\r\n    constructor({ event, once, option }: EventTriggerEntityData) {\r\n        super({\r\n            id: 'event_trigger', \r\n            name: event.id,\r\n        });\r\n        this.event = event;\r\n        this.option = option || { text: '...' };\r\n        this.once = once || true;\r\n    }\r\n    \r\n    getInteractions(game: Game) {\r\n        return [this.option];\r\n    }\r\n\r\n    onInteract(game: Game, option: Option) {\r\n        game.triggerEvent(this.event);\r\n        if (this.once) {\r\n            this.site.removeEntity(game, this);\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventTriggerEntity;\r\nexport type {\r\n    EventTriggerEntityData,\r\n}","import { Game, GameEvent, Text } from \"../../interfaces/interfaces\";\r\n\r\ninterface TextDisplayEventData {\r\n    texts: Array<Text>;\r\n}\r\n\r\nclass TextDisplayEvent extends GameEvent {\r\n    texts: Array<Text>;\r\n\r\n    constructor(data: TextDisplayEventData) {\r\n        super({\r\n            id: 'text',\r\n            priority: 10,\r\n        });\r\n        this.texts = data.texts;\r\n    }\r\n\r\n    onStart(game: Game) {\r\n        this.texts.forEach(t => game.appendText(t));\r\n        game.endEvent(this);\r\n    }\r\n}\r\n\r\nexport default TextDisplayEvent;\r\nexport type {\r\n    TextDisplayEventData,\r\n}","import { Game, GameEvent, Option } from \"../../interfaces/interfaces\";\r\n\r\ninterface SequenceEventData {\r\n    events: Array<GameEvent>;\r\n    joints?: Array<Option>;\r\n}\r\n\r\nclass SequenceEvent extends GameEvent {\r\n    events: Array<GameEvent>;\r\n    joints: Array<Option>;\r\n    pointer: number = 0;\r\n\r\n    constructor(data: SequenceEventData) {\r\n        super({\r\n            id: 'sequence',\r\n            priority: 0,\r\n        });\r\n        this.events = data.events;\r\n        this.joints = Array(this.events.length - 1).fill(0).map((_, i) => data.joints?.[i] || { text: '...' });\r\n    }\r\n\r\n    nextEvent(game: Game) {\r\n        if (this.pointer >= this.events.length) {\r\n            game.endEvent(this);\r\n            return;\r\n        }\r\n        const ce = this.events[this.pointer++];\r\n        game.triggerEvent(ce);\r\n    }\r\n\r\n    onStart(game: Game) {\r\n        this.nextEvent(game);\r\n    }\r\n\r\n    onRender(game: Game): Array<Option> {\r\n        return [this.joints[this.pointer - 1]];\r\n    }\r\n\r\n    onInput(game: Game, option: Option): void {\r\n        this.nextEvent(game);\r\n    }\r\n}\r\n\r\nexport default SequenceEvent;\r\nexport type {\r\n    SequenceEventData,\r\n}","import { Game, GameEvent } from \"../../interfaces/interfaces\";\r\n\r\ninterface GameOverEventData {\r\n    reason: string;\r\n}\r\n\r\nclass GameOverEvent extends GameEvent {\r\n    reason: string;\r\n\r\n    constructor(data: GameOverEventData) {\r\n        super({\r\n            id: 'game_over',\r\n            priority: 10,\r\n        });\r\n        this.reason = data.reason;\r\n    }\r\n\r\n    onStart(game: Game) {\r\n        game.gameOver(this.reason);\r\n    }\r\n}\r\n\r\nexport default GameOverEvent;\r\nexport type {\r\n    GameOverEventData,\r\n}\r\n","import MonsterEntity from \"./buildin/entities/MonsterEntity\";\r\nimport { Game, GameData, ItemEntity, MeleeWeapon, PlayerEntity, PortEntity, Site } from \"./interfaces/interfaces\";\r\nimport { randInt } from \"./utils/math\";\r\nimport InvestigationEntity from \"./buildin/entities/InvestigationEntity\";\r\nimport EventTriggerEntity from \"./buildin/entities/EventTriggerEntity\";\r\nimport TextDisplayEvent from \"./buildin/events/TextDisplayEvent\";\r\nimport SequenceEvent from \"./buildin/events/SequenceEvent\";\r\nimport GameOverEvent from \"./buildin/events/GameOverEvent\";\r\n\r\nfunction randValue(): number {\r\n    return 5 * randInt(7, 1, 3);\r\n}\r\n\r\nconst data = {\r\n    initialize() {\r\n        const sites = [\r\n            new Site({\r\n                id: 'bus_stop',\r\n                name: '巴士车站',\r\n                entities: [new PortEntity({ target: 'ng_bridge' })],\r\n                onEnter: (game: Game) => game.setOptions([\r\n                    { text: '到村子里去', tag: ['player', 'goToSite', ['hs_village']] },\r\n                    { text: '回城里', tag: ['gameOver', ['小江坐上了离开的巴士。']] },\r\n                ]),\r\n            }),\r\n            new Site({\r\n                id: 'ng_bridge',\r\n                name: '鼐沟桥',\r\n                entities: [new PortEntity({ target: 'hs_village' })],\r\n            }),\r\n            new Site({\r\n                id: 'hs_village',\r\n                name: '灴山村',\r\n                entities: [\r\n                    new PortEntity({ target: 'main_streat'  }),\r\n                    new PortEntity({ target: 'ng_bridge' }),\r\n                ],\r\n            }),\r\n            new Site({\r\n                id: 'main_streat',\r\n                name: '大路',\r\n                entities: [\r\n                    new PortEntity({ target: 'temple' }),\r\n                    new PortEntity({ target: 'wang_house' }),\r\n                    new PortEntity({ target: 'ng_bridge' }),\r\n                    new ItemEntity({ item: new MeleeWeapon({\r\n                        id: 'bone',\r\n                        name: '猪骨',\r\n                        damage: 3,\r\n                    }), autoEquip: true }),\r\n                ],\r\n            }),\r\n            new Site({\r\n                id: 'wang_house',\r\n                name: '王屠户家',\r\n                entities: [\r\n                    new PortEntity({ target: 'main_streat' }),\r\n                    new InvestigationEntity({\r\n                        results: [new ItemEntity({item: new MeleeWeapon({\r\n                            name: '杀猪刀',\r\n                            damage: { faces: 3, times: 2, fix: -1 },\r\n                        }), autoEquip: true })]\r\n                    }),\r\n                ],\r\n            }),\r\n            new Site({\r\n                id: 'temple',\r\n                name: '祠堂',\r\n                entities: [\r\n                    new PortEntity({ target: 'temple_basement' }),\r\n                    new PortEntity({ target: 'main_streat' }),\r\n                ],\r\n            }),\r\n            new Site({\r\n                id: 'temple_basement',\r\n                name: '祠堂地下室',\r\n                entities: [\r\n                    new PortEntity({ target: 'temple' }),\r\n                    new MonsterEntity({\r\n                        name: '触手怪',\r\n                        baseDamage: { faces: 2, fix: 1 },\r\n                        baseWeaponName: '爪子',\r\n                        health: 10,\r\n                        maxHealth: 10,\r\n                        strength: 30,\r\n                        dexterity: 40,\r\n                        loots: [new PortEntity({\r\n                            target: 'dark_river'\r\n                        })]\r\n                    }),\r\n                ],\r\n            }),\r\n            new Site({\r\n                id: 'dark_river',\r\n                name: '漆黑之河',\r\n                entities: [\r\n                    new PortEntity({ target: 'temple_basement' }),\r\n                    new EventTriggerEntity({\r\n                        option: { text: '跳入其中', leftText: '🏊‍' },\r\n                        event: new SequenceEvent({\r\n                            events: [\r\n                                new TextDisplayEvent({ texts: [{ text: 'end_text', translated: true }] }),\r\n                                new GameOverEvent({ reason: '完美通关' })\r\n                            ],\r\n                            joints: [{ text: '结束了' }]\r\n                        })\r\n                    }),\r\n                ],\r\n            }),\r\n            new Site({\r\n                id: 'hospital',\r\n                name: '医院',\r\n            }),\r\n        ];\r\n        const map = new Map<string, Site>();\r\n        sites.map(s => map.set(s.id, s));\r\n        const playerMaxHealth = randInt(10) + 5;\r\n        return {\r\n            events: [],\r\n            map,\r\n            options: [],\r\n            time: 0,\r\n            player: new PlayerEntity({\r\n                id: 'player',\r\n                name: '王二狗',\r\n                site: map.get('bus_stop') as Site,\r\n                money: randValue(),\r\n                health: playerMaxHealth,\r\n                maxHealth: playerMaxHealth,\r\n                magic: randValue(),\r\n                strength: randValue(),\r\n                dexterity: randValue(),\r\n                insight: randValue(),\r\n                holdingItem: null,\r\n                inventory: [],\r\n                baseDamage: 1,\r\n                baseWeaponName: '拳头',\r\n            }),\r\n        };\r\n    },\r\n    start: (game: Game) => {\r\n        game.appendText(\"你是小江，少小离村去了城里，不常回来，最近家里说有事情找你，立刻回去，于是你收拾好了行装。\");\r\n    },\r\n    translate(key: string) {\r\n        return (this.translation as any)[key] || key;\r\n    },\r\n    translation: {\r\n        money: '金钱',\r\n        health: '体力',\r\n        magic: '魔力',\r\n        strength: '力量',\r\n        dexterity: '敏捷',\r\n        insight: '洞察',\r\n        end_text:  `\r\n            你发现了地下有一条暗黑的河流，甚至手电筒的关联都不能照亮它一毫\r\n            仿佛有一种声音在召唤你，让你向它靠近\r\n            正在思考眼前的一切时，你已经来到了暗河边\r\n            \r\n            你跳入了这条河流\r\n            没有一丝丝冰凉或溺水的痛苦，也没有任何其它感觉\r\n            你能感受到河水带着你飘向了无尽的黑暗深渊\r\n            可是你却丝毫不想反抗\r\n\r\n            不知道过了多久后，你醒了\r\n\r\n            在清晨的阳光中，病床上的你睁开双眼\r\n            询问护士的结果是，有人在海边发现了你，神志不清\r\n        `\r\n    },\r\n};\r\n\r\nconst d: GameData = data;\r\n\r\nexport default d;","\r\n\r\nfunction polyfill() {\r\n    if (!Object.fromEntries) {\r\n        // eslint-disable-next-line\r\n        Object.fromEntries = function fromEntries<TValue>(entries: Array<[string, TValue]>): { [key: string]: TValue } {\r\n            const o: { [key: string]: TValue } = {};\r\n            for (let index = 0; index < entries.length; index++) {\r\n                const entry = entries[index];\r\n                o[entry[0]] = entry[1];\r\n            }\r\n            return o;\r\n        };\r\n    }\r\n\r\n    if (!Array.prototype.flat) {\r\n        // eslint-disable-next-line\r\n        Array.prototype.flat = function flat<T>(this: Array<Array<T>>, depth: number): Array<T> {\r\n            let arr: Array<T> = [];\r\n            for (const a of this) {\r\n                arr = arr.concat(a);\r\n            }\r\n            return arr;\r\n        } as any;\r\n    }\r\n}\r\n\r\nexport default polyfill;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport data from './data';\nimport polyfill from './utils/polyfill'\n\npolyfill();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App data={data}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}